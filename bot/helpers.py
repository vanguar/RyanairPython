# bot/helpers.py
import logging
from datetime import datetime
from decimal import Decimal, ROUND_HALF_UP, InvalidOperation
from telegram import Update
from .config import COUNTRIES_DATA

logger = logging.getLogger(__name__)

def format_flight_details(flight) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        if hasattr(flight, 'price') and flight.price is not None: # –†–µ–π—Å –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            departure_time_dt = flight.departureTime
            if isinstance(departure_time_dt, str):
                try:
                    departure_time_dt = datetime.fromisoformat(departure_time_dt.replace("Z", "+00:00"))
                except ValueError:
                    logger.warning(f"Could not parse date string: {flight.departureTime}")
                    # Keep original string if parsing fails
            
            departure_time_str = departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(departure_time_dt, datetime) else str(flight.departureTime)

            return (
                f"‚úàÔ∏è  –†–µ–π—Å : {getattr(flight, 'flightNumber', 'N/A')}\n"
                f"üìç  –ú–∞—Ä—à—Ä—É—Ç : {getattr(flight, 'originFull', 'N/A')} -> {getattr(flight, 'destinationFull', 'N/A')}\n"
                f"üïí  –í—ã–ª–µ—Ç : {departure_time_str}\n"
                f"üí∞  –¶–µ–Ω–∞ : {Decimal(str(flight.price)).quantize(Decimal('0.01'))} {getattr(flight, 'currency', 'N/A')}\n"
            ) + "\n--------------------------\n"
        elif hasattr(flight, 'outbound') and flight.outbound and hasattr(flight.outbound, 'price') and \
             hasattr(flight, 'inbound') and flight.inbound and hasattr(flight.inbound, 'price'): # –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ
            
            outbound = flight.outbound
            inbound = flight.inbound

            out_departure_time_dt = outbound.departureTime
            if isinstance(out_departure_time_dt, str):
                try:
                    out_departure_time_dt = datetime.fromisoformat(out_departure_time_dt.replace("Z", "+00:00"))
                except ValueError:
                     logger.warning(f"Could not parse outbound date string: {outbound.departureTime}")

            out_departure_time_str = out_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(out_departure_time_dt, datetime) else str(outbound.departureTime)

            in_departure_time_dt = inbound.departureTime
            if isinstance(in_departure_time_dt, str):
                try:
                    in_departure_time_dt = datetime.fromisoformat(in_departure_time_dt.replace("Z", "+00:00"))
                except ValueError:
                    logger.warning(f"Could not parse inbound date string: {inbound.departureTime}")
            
            in_departure_time_str = in_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(in_departure_time_dt, datetime) else str(inbound.departureTime)

            total_price = Decimal(str(outbound.price)) + Decimal(str(inbound.price))
            return (
                f"üîÑ  –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ \n\n"
                f"‚û°Ô∏è  –í—ã–ª–µ—Ç —Ç—É–¥–∞ :\n"
                f"  -  –†–µ–π—Å : {getattr(outbound, 'flightNumber', 'N/A')}\n"
                f"  -  –ú–∞—Ä—à—Ä—É—Ç : {getattr(outbound, 'originFull', 'N/A')} -> {getattr(outbound, 'destinationFull', 'N/A')}\n"
                f"  -  –í—ã–ª–µ—Ç : {out_departure_time_str}\n"
                f"  -  –¶–µ–Ω–∞ : {Decimal(str(outbound.price)).quantize(Decimal('0.01'))} {getattr(outbound, 'currency', 'N/A')}\n\n"
                f"‚¨ÖÔ∏è  –í—ã–ª–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ :\n"
                f"  -  –†–µ–π—Å : {getattr(inbound, 'flightNumber', 'N/A')}\n"
                f"  -  –ú–∞—Ä—à—Ä—É—Ç : {getattr(inbound, 'originFull', 'N/A')} -> {getattr(inbound, 'destinationFull', 'N/A')}\n"
                f"  -  –í—ã–ª–µ—Ç : {in_departure_time_str}\n"
                f"  -  –¶–µ–Ω–∞ : {Decimal(str(inbound.price)).quantize(Decimal('0.01'))} {getattr(inbound, 'currency', 'N/A')}\n\n"
                f"üíµ  –û–±—â–∞—è —Ü–µ–Ω–∞ : {total_price.quantize(Decimal('0.01'))} {getattr(outbound, 'currency', 'N/A')}\n"
            ) + "\n--------------------------\n"
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {flight}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–π—Å–∞: {e}. –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞: {flight}")
        return "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ."

def validate_date_format(date_str: str) -> datetime | None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –æ–±—ä–µ–∫—Ç."""
    try:
        return datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        return None

def validate_price(price_str: str) -> Decimal | None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω–æ–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ Decimal)."""
    try:
        price = Decimal(price_str).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
        if price > 0:
            return price
        return None
    except InvalidOperation: # –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ Decimal
        return None

async def clear_chat_keyboards(update: Update, context, num_messages=5):
    """–ü—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    if update.effective_chat and update.effective_message:
        chat_id = update.effective_chat.id
        message_id = update.effective_message.message_id
        for i in range(num_messages):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id - i)
            except Exception:
                # logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id - i}: {e}")
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

def get_airport_iata(country_name: str, city_name: str) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç IATA –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥—É."""
    return COUNTRIES_DATA.get(country_name, {}).get(city_name)