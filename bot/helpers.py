# bot/helpers.py
import logging
from datetime import datetime
from decimal import Decimal, ROUND_HALF_UP, InvalidOperation
from typing import Dict, List, Any, Union # –î–æ–±–∞–≤–ª—è–µ–º Union –¥–ª—è PriceChoice –≤ user_data, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
from collections import defaultdict

from .config import COUNTRIES_DATA # –ó–∞–≥—Ä—É–∑–∫–∞ COUNTRIES_DATA –µ—Å–ª–∏ –æ–Ω–∞ —Ç—É—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

logger = logging.getLogger(__name__)

def format_flight_details(flight: Any) -> str: #
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        if hasattr(flight, 'price') and flight.price is not None: # –†–µ–π—Å –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É #
            departure_time_dt = flight.departureTime #
            if isinstance(departure_time_dt, str): #
                try:
                    departure_time_dt = datetime.fromisoformat(departure_time_dt.replace("Z", "+00:00")) #
                except ValueError: #
                    logger.warning(f"Could not parse date string: {flight.departureTime}") #
            
            departure_time_str = departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(departure_time_dt, datetime) else str(flight.departureTime) #

            return ( #
                f"‚úàÔ∏è *–†–µ–π—Å*: {getattr(flight, 'flightNumber', 'N/A')}\n"
                f"üìç *–ú–∞—Ä—à—Ä—É—Ç*: {getattr(flight, 'originFull', 'N/A')} -> {getattr(flight, 'destinationFull', 'N/A')}\n"
                f"üïí *–í—ã–ª–µ—Ç*: {departure_time_str}\n"
                f"üí∞ *–¶–µ–Ω–∞*: {Decimal(str(flight.price)).quantize(Decimal('0.01'))} {getattr(flight, 'currency', 'N/A')}\n" #
            ) + "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚úàÔ∏è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        elif hasattr(flight, 'outbound') and flight.outbound and hasattr(flight.outbound, 'price') and \
             hasattr(flight, 'inbound') and flight.inbound and hasattr(flight.inbound, 'price'): # –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ #
            
            outbound = flight.outbound #
            inbound = flight.inbound #

            out_departure_time_dt = outbound.departureTime #
            if isinstance(out_departure_time_dt, str): #
                try:
                    out_departure_time_dt = datetime.fromisoformat(out_departure_time_dt.replace("Z", "+00:00")) #
                except ValueError: #
                     logger.warning(f"Could not parse outbound date string: {outbound.departureTime}") #

            out_departure_time_str = out_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(out_departure_time_dt, datetime) else str(outbound.departureTime) #

            in_departure_time_dt = inbound.departureTime #
            if isinstance(in_departure_time_dt, str): #
                try:
                    in_departure_time_dt = datetime.fromisoformat(in_departure_time_dt.replace("Z", "+00:00")) #
                except ValueError: #
                    logger.warning(f"Could not parse inbound date string: {inbound.departureTime}") #
            
            in_departure_time_str = in_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(in_departure_time_dt, datetime) else str(inbound.departureTime) #

            total_price = Decimal(str(outbound.price)) + Decimal(str(inbound.price)) #
            return ( #
                f"üîÑ *–†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ*\n\n"
                f"‚û°Ô∏è *–í—ã–ª–µ—Ç —Ç—É–¥–∞*:\n"
                f"  - *–†–µ–π—Å*: {getattr(outbound, 'flightNumber', 'N/A')}\n"
                f"  - *–ú–∞—Ä—à—Ä—É—Ç*: {getattr(outbound, 'originFull', 'N/A')} -> {getattr(outbound, 'destinationFull', 'N/A')}\n"
                f"  - *–í—ã–ª–µ—Ç*: {out_departure_time_str}\n"
                f"  - *–¶–µ–Ω–∞*: {Decimal(str(outbound.price)).quantize(Decimal('0.01'))} {getattr(outbound, 'currency', 'N/A')}\n\n" #
                f"‚¨ÖÔ∏è *–í—ã–ª–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ*:\n"
                f"  - *–†–µ–π—Å*: {getattr(inbound, 'flightNumber', 'N/A')}\n"
                f"  - *–ú–∞—Ä—à—Ä—É—Ç*: {getattr(inbound, 'originFull', 'N/A')} -> {getattr(inbound, 'destinationFull', 'N/A')}\n"
                f"  - *–í—ã–ª–µ—Ç*: {in_departure_time_str}\n"
                f"  - *–¶–µ–Ω–∞*: {Decimal(str(inbound.price)).quantize(Decimal('0.01'))} {getattr(inbound, 'currency', 'N/A')}\n\n" #
                f"üíµ *–û–±—â–∞—è —Ü–µ–Ω–∞*: {total_price.quantize(Decimal('0.01'))} {getattr(outbound, 'currency', 'N/A')}\n" #
            ) + "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚úàÔ∏è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {flight}") #
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ." #
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–π—Å–∞: {e}. –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞: {flight}") #
        return "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ." #

def validate_date_format(date_str: str) -> Union[datetime, None]: #
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –æ–±—ä–µ–∫—Ç."""
    try:
        return datetime.strptime(date_str, "%Y-%m-%d") #
    except ValueError: #
        return None #

def validate_price(price_str: str) -> Union[Decimal, None]: #
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω–æ–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ Decimal)."""
    try:
        price = Decimal(price_str).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP) #
        if price > 0: #
            return price #
        return None #
    except InvalidOperation: # –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ Decimal #
        return None #

def get_airport_iata(country_name: str, city_name: str) -> Union[str, None]: #
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç IATA –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥—É."""
    return COUNTRIES_DATA.get(country_name, {}).get(city_name) #

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
def filter_cheapest_flights(all_flights_data: Dict[str, List[Any]]) -> Dict[str, List[Any]]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ä–µ–π—Å–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –∏–º–µ—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É.

    Args:
        all_flights_data: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏ ('YYYY-MM-DD'),
                          –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–µ–π—Å–æ–≤.
                          –û–±—ä–µ–∫—Ç—ã —Ä–µ–π—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç 'price' (–¥–ª—è one-way)
                          –∏–ª–∏ 'outbound.price' –∏ 'inbound.price' (–¥–ª—è round-trip).

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Ç–æ–≥–æ –∂–µ —Ñ–æ—Ä–º–∞—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Ä–µ–π—Å—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ —Å –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–Ω–æ–π.
    """
    if not all_flights_data:
        return {}

    min_overall_price = Decimal('inf')

    # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –Ω–∞–π—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    for flights_on_date in all_flights_data.values():
        for flight in flights_on_date:
            current_flight_price = Decimal('inf')
            if hasattr(flight, 'price') and flight.price is not None:
                try: current_flight_price = Decimal(str(flight.price))
                except InvalidOperation: continue
            elif hasattr(flight, 'outbound') and flight.outbound and hasattr(flight.outbound, 'price'):
                try:
                    current_flight_price = Decimal(str(flight.outbound.price))
                    if hasattr(flight, 'inbound') and flight.inbound and hasattr(flight.inbound, 'price'):
                        current_flight_price += Decimal(str(flight.inbound.price))
                except InvalidOperation: continue
            
            if current_flight_price < min_overall_price:
                min_overall_price = current_flight_price
    
    if min_overall_price == Decimal('inf'):
        return {}

    cheapest_flights_result: Dict[str, List[Any]] = defaultdict(list)
    # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ä–µ–π—Å—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
    for date_str, flights_on_date in all_flights_data.items():
        for flight in flights_on_date:
            current_flight_price = Decimal('inf')
            if hasattr(flight, 'price') and flight.price is not None:
                try: current_flight_price = Decimal(str(flight.price))
                except InvalidOperation: continue
            elif hasattr(flight, 'outbound') and flight.outbound and hasattr(flight.outbound, 'price'):
                try:
                    current_flight_price = Decimal(str(flight.outbound.price))
                    if hasattr(flight, 'inbound') and flight.inbound and hasattr(flight.inbound, 'price'):
                        current_flight_price += Decimal(str(flight.inbound.price))
                except InvalidOperation: continue

            if current_flight_price == min_overall_price:
                cheapest_flights_result[date_str].append(flight)
                
    return dict(cheapest_flights_result)

def get_flight_price(flight: Any) -> Decimal:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—â—É—é —Ü–µ–Ω—É –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ–π—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Decimal('inf'), –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.
    """
    price_str = None
    if hasattr(flight, 'price') and getattr(flight, 'price') is not None: # –í –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
        price_str = getattr(flight, 'price')
    elif hasattr(flight, 'outbound') and getattr(flight, 'outbound') and \
         hasattr(flight.outbound, 'price') and getattr(flight.outbound, 'price') is not None: # –¢—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ
        
        outbound_price_str = getattr(flight.outbound, 'price')
        try:
            current_total_price = Decimal(str(outbound_price_str))
            if hasattr(flight, 'inbound') and getattr(flight, 'inbound') and \
               hasattr(flight.inbound, 'price') and getattr(flight.inbound, 'price') is not None:
                inbound_price_str = getattr(flight.inbound, 'price')
                current_total_price += Decimal(str(inbound_price_str))
            return current_total_price
        except InvalidOperation:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É —Ä–µ–π—Å–∞ –≤ Decimal: outbound='{outbound_price_str}', inbound='{getattr(flight.inbound, 'price', None)}'")
            return Decimal('inf')
    
    if price_str is not None:
        try:
            return Decimal(str(price_str))
        except InvalidOperation:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É —Ä–µ–π—Å–∞ –≤ Decimal: '{price_str}'")
            return Decimal('inf')
            
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ–π—Å–∞: {flight}")
    return Decimal('inf')