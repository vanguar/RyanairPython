# bot/handlers_top3.py
import logging
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, CommandHandler, filters
from telegram.error import BadRequest

from . import config, keyboards, flight_api, message_formatter, user_history, helpers

logger = logging.getLogger(__name__)

# ---------- entry-point ----------

async def start_top3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç –∫–Ω–æ–ø–∫–∏ ¬´üî• –¢–æ–ø-3 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è¬ª."""
    query = update.callback_query
    if not query:
        return ConversationHandler.END

    try:
        await query.answer("üî•", cache_time=1)
    except BadRequest:
        return ConversationHandler.END

    context.user_data.clear()
    context.user_data["current_search_flow"] = config.FLOW_TOP3

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è top3
    saved = await user_history.get_last_saved_search(update.effective_user.id)
    if saved and saved.get("current_search_flow") == config.FLOW_TOP3:
        kb = keyboards.get_yes_no_keyboard(
            yes_callback="top3_use_saved",
            no_callback="top3_new_search",
            yes_text="üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ",
            no_text="üÜï –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
        )
        await query.edit_message_text(
            f"{config.MSG_TOP3_WELCOME}\n\n–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
            reply_markup=kb
        )
        return config.TOP3_ASK_SCOPE

    # –∏–Ω–∞—á–µ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º ¬´–æ—Ç–æ–≤—Å—é–¥—É / –∏–∑ –≥–æ—Ä–æ–¥–∞¬ª
    return await ask_scope(update, context)

# ---------- —à–∞–≥ 1: ¬´–æ—Ç–æ–≤—Å—é–¥—É / –≥–æ—Ä–æ–¥¬ª ----------

async def ask_scope(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    kb = keyboards.get_yes_no_keyboard(
        yes_callback=config.CALLBACK_TOP3_SPECIFIC_CITY,
        no_callback=config.CALLBACK_TOP3_FROM_ANYWHERE,
        yes_text="üèôÔ∏è –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥",
        no_text="üåç –û—Ç–æ–≤—Å—é–¥—É"
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=config.MSG_TOP3_SCOPE,
        reply_markup=kb
    )
    return config.TOP3_ASK_SCOPE

async def handle_scope_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()

    if q.data == "top3_use_saved":        # –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö
        saved = await user_history.get_last_saved_search(update.effective_user.id)
        context.user_data.update(saved)
        await q.edit_message_text("üíæ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚Ä¶")
        return await execute_search(update, context)

    if q.data == "top3_new_search":
        return await ask_scope(update, context)

    if q.data == config.CALLBACK_TOP3_FROM_ANYWHERE:
        context.user_data["top3_from_anywhere"] = True
        context.user_data["airport_pool"]       = config.POPULAR_DEPARTURE_AIRPORTS.copy()

        await q.edit_message_text(
            "üåç –ò—â—É –ª—É—á—à–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Ö–∞–±–æ–≤‚Ä¶"
        )
        return await execute_search(update, context)

    if q.data == config.CALLBACK_TOP3_SPECIFIC_CITY:
        context.user_data["top3_from_anywhere"] = False
        await q.edit_message_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üåç –°—Ç—Ä–∞–Ω–∞:",
            reply_markup=keyboards.get_country_reply_keyboard()
        )
        return config.TOP3_ASK_COUNTRY

    return ConversationHandler.END

# ---------- —à–∞–≥ 2: —Å—Ç—Ä–∞–Ω–∞ / –≥–æ—Ä–æ–¥ ----------

async def handle_country_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    country = update.message.text
    if country not in config.COUNTRIES_DATA:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return config.TOP3_ASK_COUNTRY

    context.user_data["departure_country"] = country
    await update.message.reply_text(
        f"üèôÔ∏è –ì–æ—Ä–æ–¥ –≤ {country}:",
        reply_markup=keyboards.get_city_reply_keyboard(country)
    )
    return config.TOP3_ASK_CITY

async def handle_city_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    country = context.user_data["departure_country"]
    city    = update.message.text
    iata    = helpers.get_airport_iata(country, city)
    if not iata:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return config.TOP3_ASK_CITY

    context.user_data.update({
        "departure_airport_iata": iata,
        "departure_city_name": city
    })
    await update.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–Ω {city} ({iata})", reply_markup=ReplyKeyboardRemove())
    return await execute_search(update, context)

# ---------- –ø–æ–∏—Å–∫ –∏ –≤—ã–≤–æ–¥ ----------

async def execute_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, "üîç –ò—â—É —Ç–æ–ø-3‚Ä¶")

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ–¥–∏–Ω –∞—ç—Ä–æ–ø–æ—Ä—Ç –∏–ª–∏ –ø—É–ª
    airport_pool = context.user_data.get("airport_pool")
    all_flights: list[dict] = []

    if airport_pool:
        # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ N —Ö–∞–±–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –¥–µ—Å—è—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤)
        for dep_iata in airport_pool[:5]:
            tmp_params          = context.user_data.copy()
            tmp_params["departure_airport_iata"] = dep_iata
            flights             = await flight_api.get_cheapest_flights_top3(tmp_params, limit=10)
            if flights:
                all_flights.extend(flights)
    else:
        flights = await flight_api.get_cheapest_flights_top3(context.user_data, limit=3)
        all_flights.extend(flights)

    if not all_flights:
        await context.bot.send_message(chat_id, "üòî –ù–∏—á–µ–≥–æ –¥–µ—à—ë–≤–æ–≥–æ –Ω–µ –Ω–∞—à—ë–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª –ø–æ —Ü–µ–Ω–µ
    all_flights.sort(key=lambda x: x["price"])
    top3 = all_flights[:3]

    from_text = "–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Ö–∞–±–æ–≤" if airport_pool else context.user_data.get(
        "departure_city_name", "‚Äî")

    await context.bot.send_message(
        chat_id,
        f"üî• <b>–¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π</b>\n–ò–∑: {from_text}\n",
        parse_mode="HTML"
    )

    for idx, item in enumerate(top3, 1):
        formatted = await message_formatter.format_flight_details(item["flight"])
        await context.bot.send_message(
            chat_id,
            f"üèÜ <b>#{idx}</b>\n{formatted}",
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    kb = keyboards.get_yes_no_keyboard(
        yes_callback=config.CALLBACK_TOP3_SAVE_YES,
        no_callback=config.CALLBACK_TOP3_SAVE_NO,
        yes_text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        no_text="‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å"
    )
    await context.bot.send_message(
        chat_id,
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏—Ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–∂–∞—Ç–∏–∏ ¬´–¢–æ–ø-3¬ª?",
        reply_markup=kb
    )
    return config.TOP3_ASK_SAVE


async def handle_save_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ñ–º—ë–º ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å / –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å¬ª –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ Top-3"""
    q = update.callback_query
    await q.answer()

    user_id = update.effective_user.id

    if q.data == config.CALLBACK_TOP3_SAVE_YES:
        await user_history.save_search_parameters(user_id, context.user_data)
        await q.edit_message_text(config.MSG_TOP3_SAVED)
    else:                                 # CALLBACK_TOP3_SAVE_NO
        await q.edit_message_text(config.MSG_TOP3_NOT_SAVED)

    # –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–∏–µ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_saved = await user_history.has_saved_searches(user_id)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –¥–∏–∞–ª–æ–≥ –Ω–µ ¬´–∑–∞–≤–∏—Å¬ª
    main_kb = keyboards.get_main_menu_keyboard(has_saved_searches=has_saved)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üëá –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ:",
        reply_markup=main_kb,
    )

    context.user_data.clear()
    return ConversationHandler.END





async def cancel_top3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("üõë –ü–æ–∏—Å–∫ Top-3 –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await update.message.reply_text("üõë –ü–æ–∏—Å–∫ Top-3 –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END


