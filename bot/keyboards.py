# bot/keyboards.py
import logging
from datetime import datetime # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime, timedelta —É–±—Ä–∞–Ω–∞, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
# MODIFIED: Added CALLBACK_YES_OTHER_AIRPORTS, CALLBACK_NO_OTHER_AIRPORTS (–µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º)
from .config import COUNTRIES_DATA, RUSSIAN_MONTHS, CALLBACK_SKIP, CALLBACK_NO_SPECIFIC_DATES, \
                    CALLBACK_YES_OTHER_AIRPORTS, CALLBACK_NO_OTHER_AIRPORTS


logger = logging.getLogger(__name__)

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("‚úàÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="start_standard_search")],
        [InlineKeyboardButton("‚ú® –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫", callback_data="start_flex_search")],
        [InlineKeyboardButton("üéØ –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –±–∏–ª–µ—Ç (–∫—É–¥–∞ —É–≥–æ–¥–Ω–æ)", callback_data="start_flex_anywhere")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_flight_type_reply_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞ (1 –∏–ª–∏ 2)."""
    reply_keyboard = [['1', '2']]
    return ReplyKeyboardMarkup(
        reply_keyboard, one_time_keyboard=True, resize_keyboard=True,
        input_field_placeholder='1 (–≤ –æ–¥–Ω—É) –∏–ª–∏ 2 (—Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ)'
    )

def get_country_reply_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã."""
    if not COUNTRIES_DATA:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return ReplyKeyboardMarkup([["–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö"]], one_time_keyboard=True)
    
    country_names = sorted(list(COUNTRIES_DATA.keys()))
    keyboard = [country_names[i:i + 3] for i in range(0, len(country_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

def get_city_reply_keyboard(
        country_name: str,
        override_cities: dict[str, str] | None = None,
):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤. –ï—Å–ª–∏ override_cities –ø–µ—Ä–µ–¥–∞–Ω ‚Äî
    —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –Ω–µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ COUNTRIES_DATA.
    """
    cities_dict = override_cities or COUNTRIES_DATA.get(country_name, {})
    if not cities_dict:
        logger.warning(f"–ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã ¬´{country_name}¬ª")
        return ReplyKeyboardMarkup([["–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"]], one_time_keyboard=True)

    city_names = sorted(cities_dict.keys())
    keyboard = [city_names[i:i + 3] for i in range(0, len(city_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)



def generate_year_buttons(callback_prefix: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å —Ç–µ–∫—É—â–∏–º –∏ —Å–ª–µ–¥—É—é—â–∏–º –≥–æ–¥–æ–º."""
    current_year = datetime.now().year
    next_year = current_year + 1
    keyboard = [
        [InlineKeyboardButton(text=str(current_year), callback_data=f"{callback_prefix}{current_year}")],
        [InlineKeyboardButton(text=str(next_year), callback_data=f"{callback_prefix}{next_year}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def generate_month_buttons(
        callback_prefix: str = "",
        year_for_months: int | None = None,
        min_departure_month: int | None = None,
        departure_year_for_comparison: int | None = None,
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline-keyboard —Å –º–µ—Å—è—Ü–∞–º–∏, —Å–∫—Ä—ã–≤–∞—è —É–∂–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ."""
    now = datetime.now()
    cur_year, cur_month = now.year, now.month
    keyboard_rows = [] # –ò—Å–ø–æ–ª—å–∑—É–µ–º keyboard_rows –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    month_items = list(RUSSIAN_MONTHS.items())

    if year_for_months is None: # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (—Ö–æ—Ç—è –∏–∑ handlers.py –¥–æ–ª–∂–µ–Ω)
        year_for_months = cur_year

    current_row = []
    for idx, month_name in month_items: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ 12 –º–µ—Å—è—Ü–µ–≤
        # –§–∏–ª—å—Ç—Ä 1: –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —Ç–µ–∫—É—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ–¥—É
        is_past_month = (year_for_months == cur_year and idx < cur_month)
        
        # –§–∏–ª—å—Ç—Ä 2: –¥–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö —Ä–µ–π—Å–æ–≤ - –º–µ—Å—è—Ü —Ä–∞–Ω—å—à–µ –º–µ—Å—è—Ü–∞ –≤—ã–ª–µ—Ç–∞ –≤ —Ç–æ–º –∂–µ –≥–æ–¥—É
        is_before_min_departure = (
            min_departure_month is not None and
            departure_year_for_comparison is not None and # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –≥–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω
            departure_year_for_comparison == year_for_months and
            idx < min_departure_month
        )

        if is_past_month or is_before_min_departure:
            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –º–µ—Å—è—Ü

        callback_data = f"{callback_prefix}{str(idx).zfill(2)}"
        logger.info(
            "generate_month_buttons: —Å–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É '%s' —Å callback_data '%s'",
            month_name, callback_data
        )
        current_row.append(InlineKeyboardButton(text=month_name, callback_data=callback_data))
        
        if len(current_row) == 3: # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            keyboard_rows.append(current_row)
            current_row = []
            
    if current_row: # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 3 –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        keyboard_rows.append(current_row)

    if not keyboard_rows: # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Å—è—Ü—ã –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã
        logger.warning(f"–î–ª—è {year_for_months} (min_dep_month: {min_departure_month} in {departure_year_for_comparison}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤.")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ fallbacks ConversationHandler
        keyboard_rows.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤", callback_data="no_valid_months_error")]) 
        
    return InlineKeyboardMarkup(keyboard_rows)


def generate_date_range_buttons(year: int, month: int, callback_prefix: str = ""):
    """Inline-–∫–ª–∞–≤–∞ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –¥–∞—Ç; –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ —Å–∫—Ä—ã–≤–∞–µ—Ç —É–∂–µ –ø—Ä–æ—à–µ–¥—à–∏–µ."""
    today = datetime.now().date()

    try:
        if month == 12:
            days_in_month = (datetime(year + 1, 1, 1) - datetime(year, month, 1)).days
        else:
            days_in_month = (datetime(year, month + 1, 1) - datetime(year, month, 1)).days
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü {year}-{month} –¥–ª—è generate_date_range_buttons")
        return InlineKeyboardMarkup([])

    ranges = [(1, 10), (11, 20), (21, days_in_month)]
    keyboard_buttons = [] # –ò—Å–ø–æ–ª—å–∑—É–µ–º keyboard_buttons –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

    for start, end in ranges:
        actual_end = min(end, days_in_month)
        if start > actual_end: # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ days_in_month < 21, —Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω 21-X –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            continue

        # –°–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω, –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –ø—Ä–æ—à–ª–æ–º –∏ —Ä–µ—á—å –æ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        if year == today.year and month == today.month and actual_end < today.day:
            logger.info("generate_date_range_buttons: –ø—Ä–æ–ø—É—Å—Ç–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω %s-%s –¥–ª—è %s-%s (—É–∂–µ –ø—Ä–æ—à–ª–æ, —Å–µ–≥–æ–¥–Ω—è %s)",
                        start, actual_end, month, year, today.day)
            continue

        cb = f"{callback_prefix}{start}-{actual_end}"
        keyboard_buttons.append([InlineKeyboardButton(f"{start}-{actual_end}", callback_data=cb)])

    if not keyboard_buttons:
        logger.info(f"–î–ª—è {year}-{month} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç (—Å–µ–≥–æ–¥–Ω—è: {today.strftime('%Y-%m-%d')}).")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ fallbacks
        keyboard_buttons.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", callback_data="no_valid_dates_error")])

    return InlineKeyboardMarkup(keyboard_buttons)


def generate_specific_date_buttons(
        year: int, month: int, date_range_start: int, date_range_end: int, 
        callback_prefix: str = "", min_allowed_date: datetime | None = None
    ):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, —Ñ–∏–ª—å—Ç—Ä—É—è –ø—Ä–æ—à–µ–¥—à–∏–µ."""
    buttons_rows = [] # –ò—Å–ø–æ–ª—å–∑—É–µ–º buttons_rows –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    current_row = []

    if min_allowed_date is None:
        min_allowed_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

    any_button_created = False
    for day in range(date_range_start, date_range_end + 1):
        try:
            date_obj = datetime(year, month, day)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ—à–µ–¥—à–µ–π (—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ)
            if date_obj < min_allowed_date:
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã

            any_button_created = True
            date_str_callback = date_obj.strftime("%Y-%m-%d")
            display_date = date_obj.strftime("%d")
            
            current_row.append(InlineKeyboardButton(text=display_date, callback_data=f"{callback_prefix}{date_str_callback}"))
            if len(current_row) == 5: # 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
                buttons_rows.append(current_row)
                current_row = []
        except ValueError:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç—ã: {year}-{month}-{day}")
            continue
            
    if current_row: # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 5
        buttons_rows.append(current_row)
    
    if not any_button_created and date_range_start <= date_range_end: 
        logger.info(f"–í –¥–∏–∞–ø–∞–∑–æ–Ω–µ {year}-{month} ({date_range_start}-{date_range_end}) –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç (–≤—Å–µ –ø—Ä–æ—à–ª–∏ –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã).")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ fallbacks
        buttons_rows.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ", callback_data="no_valid_dates_error")])
        
    return InlineKeyboardMarkup(buttons_rows)

def get_skip_or_select_keyboard(prompt_message: str, callback_skip_action: str, callback_select_action: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏–ª–∏ "–í—ã–±—Ä–∞—Ç—å"."""
    keyboard = [
        [InlineKeyboardButton(f"‚úèÔ∏è {prompt_message}", callback_data=callback_select_action)],
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=callback_skip_action)],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_yes_no_keyboard(yes_callback: str, no_callback: str, yes_text="–î–∞", no_text="–ù–µ—Ç"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç."""
    keyboard = [
        [
            InlineKeyboardButton(yes_text, callback_data=yes_callback),
            InlineKeyboardButton(no_text, callback_data=no_callback),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_skip_dates_keyboard(callback_select_dates: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞ (–ø–æ–∏—Å–∫ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç)."""
    keyboard = [
        [InlineKeyboardButton("üóì –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã", callback_data=callback_select_dates)],
        [InlineKeyboardButton("‚ú® –ò—Å–∫–∞—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç", callback_data=CALLBACK_NO_SPECIFIC_DATES)],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_search_other_airports_keyboard(country_name: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã."""
    keyboard = [
        [
            InlineKeyboardButton(f"–î–∞, –∏—Å–∫–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –≤ {country_name}", callback_data=CALLBACK_YES_OTHER_AIRPORTS),
            InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data=CALLBACK_NO_OTHER_AIRPORTS),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)