# bot/keyboards.py
import logging
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
# MODIFIED: Added CALLBACK_YES_OTHER_AIRPORTS, CALLBACK_NO_OTHER_AIRPORTS
from .config import COUNTRIES_DATA, RUSSIAN_MONTHS, CALLBACK_SKIP, CALLBACK_NO_SPECIFIC_DATES, \
                    CALLBACK_YES_OTHER_AIRPORTS, CALLBACK_NO_OTHER_AIRPORTS


logger = logging.getLogger(__name__)

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("‚úàÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="start_standard_search")],
        [InlineKeyboardButton("‚ú® –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫", callback_data="start_flex_search")],
        # NEW: –ö–Ω–æ–ø–∫–∞ "–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ"
        [InlineKeyboardButton("üéØ –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –±–∏–ª–µ—Ç (–∫—É–¥–∞ —É–≥–æ–¥–Ω–æ)", callback_data="start_flex_anywhere")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_flight_type_reply_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞ (1 –∏–ª–∏ 2)."""
    reply_keyboard = [['1', '2']]
    return ReplyKeyboardMarkup(
        reply_keyboard, one_time_keyboard=True, resize_keyboard=True,
        input_field_placeholder='1 (–≤ –æ–¥–Ω—É) –∏–ª–∏ 2 (—Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ)'
    )

def get_country_reply_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã."""
    if not COUNTRIES_DATA:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return ReplyKeyboardMarkup([["–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö"]], one_time_keyboard=True)
    
    country_names = sorted(list(COUNTRIES_DATA.keys()))
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 —Å—Ç—Ä–∞–Ω—ã –≤ —Ä—è–¥
    keyboard = [country_names[i:i + 3] for i in range(0, len(country_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

def get_city_reply_keyboard(country_name: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ."""
    if country_name not in COUNTRIES_DATA or not COUNTRIES_DATA[country_name]:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω—ã '{country_name}' –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ReplyKeyboardMarkup([["–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö"]], one_time_keyboard=True)

    city_names = sorted(list(COUNTRIES_DATA[country_name].keys()))
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –≥–æ—Ä–æ–¥–∞ –≤ —Ä—è–¥
    keyboard = [city_names[i:i + 3] for i in range(0, len(city_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)


def generate_year_buttons(callback_prefix: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å —Ç–µ–∫—É—â–∏–º –∏ —Å–ª–µ–¥—É—é—â–∏–º –≥–æ–¥–æ–º."""
    current_year = datetime.now().year
    next_year = current_year + 1
    keyboard = [
        [InlineKeyboardButton(text=str(current_year), callback_data=f"{callback_prefix}{current_year}")],
        [InlineKeyboardButton(text=str(next_year), callback_data=f"{callback_prefix}{next_year}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def generate_month_buttons(callback_prefix: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å –º–µ—Å—è—Ü–∞–º–∏."""
    keyboard = []
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –ø–æ 3 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    month_items = list(RUSSIAN_MONTHS.items())
    for i in range(0, len(month_items), 3):
        row = []
        for idx, month_name in month_items[i:i+3]:
            callback_data = f"{callback_prefix}{str(idx).zfill(2)}" # –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª—ë–º
            row.append(InlineKeyboardButton(text=month_name, callback_data=callback_data))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

def generate_date_range_buttons(year: int, month: int, callback_prefix: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –¥–∞—Ç (1-10, 11-20, 21-–∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞)."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        if month == 12:
            # –î–ª—è –¥–µ–∫–∞–±—Ä—è —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü - —è–Ω–≤–∞—Ä—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
            days_in_month = (datetime(year + 1, 1, 1) - datetime(year, month, 1)).days
        else:
            days_in_month = (datetime(year, month + 1, 1) - datetime(year, month, 1)).days
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ ({year}) –∏–ª–∏ –º–µ—Å—è—Ü ({month}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç.")
        return InlineKeyboardMarkup([]) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    ranges = [
        (1, 10),
        (11, 20),
        (21, days_in_month)
    ]

    keyboard = []
    for start, end in ranges:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        actual_end = min(end, days_in_month)
        if start > actual_end : # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –±–æ–ª—å—à–µ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è 21-20 –≤ —Ñ–µ–≤—Ä–∞–ª–µ)
            continue
        range_str = f"{start}-{actual_end}"
        callback_data = f"{callback_prefix}{start}-{actual_end}"
        keyboard.append([InlineKeyboardButton(text=range_str, callback_data=callback_data)])
    return InlineKeyboardMarkup(keyboard)

def generate_specific_date_buttons(year: int, month: int, date_range_start: int, date_range_end: int, callback_prefix: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
    buttons = []
    row = []
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏, –ø–æ 5 –≤ —Ä—è–¥—É
    for day in range(date_range_start, date_range_end + 1):
        try:
            date_obj = datetime(year, month, day)
            date_str_callback = date_obj.strftime("%Y-%m-%d") # –§–æ—Ä–º–∞—Ç –¥–ª—è callback_data
            display_date = date_obj.strftime("%d") # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
            
            row.append(InlineKeyboardButton(text=display_date, callback_data=f"{callback_prefix}{date_str_callback}"))
            if len(row) == 5: # 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
                buttons.append(row)
                row = []
        except ValueError:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 —Ñ–µ–≤—Ä–∞–ª—è)
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç—ã: {year}-{month}-{day}")
            continue
    if row: # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 5
        buttons.append(row)
    return InlineKeyboardMarkup(buttons)

def get_skip_or_select_keyboard(prompt_message: str, callback_skip_action: str, callback_select_action: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏–ª–∏ "–í—ã–±—Ä–∞—Ç—å"."""
    keyboard = [
        [InlineKeyboardButton(f"‚úèÔ∏è {prompt_message}", callback_data=callback_select_action)],
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=callback_skip_action)],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_yes_no_keyboard(yes_callback: str, no_callback: str, yes_text="–î–∞", no_text="–ù–µ—Ç"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç."""
    keyboard = [
        [
            InlineKeyboardButton(yes_text, callback_data=yes_callback),
            InlineKeyboardButton(no_text, callback_data=no_callback),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_skip_dates_keyboard(callback_select_dates: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞ (–ø–æ–∏—Å–∫ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç)."""
    keyboard = [
        [InlineKeyboardButton("üóì –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã", callback_data=callback_select_dates)],
        [InlineKeyboardButton("‚ú® –ò—Å–∫–∞—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç", callback_data=CALLBACK_NO_SPECIFIC_DATES)],
    ]
    return InlineKeyboardMarkup(keyboard)

# NEW: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
def get_search_other_airports_keyboard(country_name: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã."""
    keyboard = [
        [
            InlineKeyboardButton(f"–î–∞, –∏—Å–∫–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –≤ {country_name}", callback_data=CALLBACK_YES_OTHER_AIRPORTS),
            InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data=CALLBACK_NO_OTHER_AIRPORTS),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)