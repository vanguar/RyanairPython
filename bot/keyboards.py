# bot/keyboards.py
import logging
from datetime import datetime # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —á–µ–≥–æ-—Ç–æ –µ—â–µ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from .config import (
    COUNTRIES_DATA, RUSSIAN_MONTHS, CALLBACK_SKIP, CALLBACK_NO_SPECIFIC_DATES,
    CALLBACK_YES_OTHER_AIRPORTS, CALLBACK_NO_OTHER_AIRPORTS,
    CALLBACK_PRICE_CUSTOM, CALLBACK_PRICE_LOWEST, CALLBACK_PRICE_ALL,
    MSG_BACK,
    # ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ CB_BACK_... –∫–æ–Ω—Å—Ç–∞–Ω—Ç ...
    # –ü—Ä–∏–º–µ—Ä: CB_BACK_STD_DEP_YEAR_TO_CITY, CB_BACK_FLEX_RET_DATE_TO_RANGE, –∏ —Ç.–¥.
    MSG_FLIGHT_TYPE_PROMPT, # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å

    # –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ò–ú–ü–û–†–¢–ê:
    CALLBACK_SAVE_SEARCH_YES, CALLBACK_SAVE_SEARCH_NO,
    CALLBACK_START_LAST_SAVED_SEARCH,
    CALLBACK_START_TOP3,
    CALLBACK_ENTIRE_RANGE_SELECTED
)

logger = logging.getLogger(__name__)

def get_main_menu_keyboard(has_saved_searches: bool = False) -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞. –í–≤–µ—Ä—Ö—É ‚Äì –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–¢–æ–ø-3 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è¬ª.
    """
    keyboard_buttons = [
        [InlineKeyboardButton("üî• –¢–æ–ø-3 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data=CALLBACK_START_TOP3)],
        [InlineKeyboardButton("‚úàÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="start_standard_search")],
        [InlineKeyboardButton("‚ú® –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫",        callback_data="start_flex_search")],
        [InlineKeyboardButton("üéØ –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –±–∏–ª–µ—Ç (–∫—É–¥–∞ —É–≥–æ–¥–Ω–æ)",
                              callback_data="start_flex_anywhere")],
    ]
    if has_saved_searches:
        keyboard_buttons.append(
            [InlineKeyboardButton("üíæ –ú–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫",
                                  callback_data=CALLBACK_START_LAST_SAVED_SEARCH)]
        )
    return InlineKeyboardMarkup(keyboard_buttons)


def get_flight_type_reply_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞ (1 –∏–ª–∏ 2)."""
    reply_keyboard = [['1', '2']]
    return ReplyKeyboardMarkup(
        reply_keyboard,
        one_time_keyboard=False,
        resize_keyboard=True,
        input_field_placeholder='1 (–≤ –æ–¥–Ω—É) –∏–ª–∏ 2 (–≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)'
    )

def get_country_reply_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã."""
    if not COUNTRIES_DATA:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return ReplyKeyboardMarkup([["–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö"]], one_time_keyboard=False, resize_keyboard=True)

    country_names = sorted(list(COUNTRIES_DATA.keys()))
    keyboard = [country_names[i:i + 3] for i in range(0, len(country_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)

def get_city_reply_keyboard(
        country_name: str,
        override_cities: dict[str, str] | None = None,
) -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤. –ï—Å–ª–∏ override_cities –ø–µ—Ä–µ–¥–∞–Ω ‚Äî
    —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –Ω–µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ COUNTRIES_DATA.
    """
    cities_dict = override_cities or COUNTRIES_DATA.get(country_name, {})
    if not cities_dict:
        logger.warning(f"–ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã ¬´{country_name}¬ª")
        return ReplyKeyboardMarkup([["–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"]], one_time_keyboard=False, resize_keyboard=True)

    city_names = sorted(cities_dict.keys())
    keyboard = [city_names[i:i + 3] for i in range(0, len(city_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)

def generate_year_buttons(callback_prefix: str = "", back_callback_data: str | None = None) -> InlineKeyboardMarkup:
    current_year = datetime.now().year
    next_year = current_year + 1
    keyboard = [
        [InlineKeyboardButton(text=str(current_year), callback_data=f"{callback_prefix}{current_year}")],
        [InlineKeyboardButton(text=str(next_year), callback_data=f"{callback_prefix}{next_year}")]
    ]
    if back_callback_data:
        keyboard.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard)

def generate_month_buttons(
        callback_prefix: str = "",
        year_for_months: int | None = None,
        min_departure_month: int | None = None,
        departure_year_for_comparison: int | None = None,
        back_callback_data: str | None = None
) -> InlineKeyboardMarkup:
    now = datetime.now()
    cur_year, cur_month = now.year, now.month
    keyboard_rows = []
    month_items = list(RUSSIAN_MONTHS.items())

    if year_for_months is None:
        year_for_months = cur_year

    current_row = []
    valid_month_found = False
    for idx, month_name in month_items:
        is_past_month = (year_for_months == cur_year and idx < cur_month)
        is_before_min_departure = (
            min_departure_month is not None and
            departure_year_for_comparison is not None and
            departure_year_for_comparison == year_for_months and
            idx < min_departure_month
        )
        if is_past_month or is_before_min_departure:
            continue
        valid_month_found = True
        callback_data = f"{callback_prefix}{str(idx).zfill(2)}"
        current_row.append(InlineKeyboardButton(text=month_name, callback_data=callback_data))
        if len(current_row) == 3:
            keyboard_rows.append(current_row)
            current_row = []
    if current_row:
        keyboard_rows.append(current_row)

    if not valid_month_found:
        if not back_callback_data:
             keyboard_rows.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤", callback_data="no_valid_months_error")])
        elif not keyboard_rows:
             keyboard_rows = []

    if back_callback_data:
        if not keyboard_rows and not valid_month_found :
             keyboard_rows = [[InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)]]
        else:
             keyboard_rows.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard_rows)

def generate_date_range_buttons(year: int, month: int, callback_prefix: str = "", back_callback_data: str | None = None) -> InlineKeyboardMarkup:
    today = datetime.now().date()
    try:
        days_in_month = (datetime(year, month + 1, 1) - datetime(year, month, 1)).days if month != 12 else (datetime(year + 1, 1, 1) - datetime(year, month, 1)).days
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü {year}-{month} –¥–ª—è generate_date_range_buttons")
        rows = []
        if back_callback_data:
            rows.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
        return InlineKeyboardMarkup(rows)

    ranges = [(1, 10), (11, 20), (21, days_in_month)]
    keyboard_buttons = []
    valid_range_found = False

    for start, end_limit in ranges:
        actual_end = min(end_limit, days_in_month)
        if start > actual_end: continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±—ã–ª –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        if year == today.year and month == today.month and actual_end < today.day: continue
        valid_range_found = True
        cb = f"{callback_prefix}{start}-{actual_end}"
        keyboard_buttons.append([InlineKeyboardButton(f"{start}-{actual_end}", callback_data=cb)])

    if not valid_range_found:
        if not back_callback_data:
            keyboard_buttons.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", callback_data="no_valid_date_ranges_error")])
        elif not keyboard_buttons:
             keyboard_buttons = []

    if back_callback_data:
        if not keyboard_buttons and not valid_range_found:
             keyboard_buttons = [[InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)]]
        else:
             keyboard_buttons.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard_buttons)

def generate_specific_date_buttons(
        year: int, month: int, date_range_start: int, date_range_end: int,
        callback_prefix: str = "", # –≠—Ç–æ –¥–ª—è callback'–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
        min_allowed_date: datetime | None = None,
        back_callback_data: str | None = None,
        # –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–† –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤—ã–ª–µ—Ç/–≤–æ–∑–≤—Ä–∞—Ç)
        range_selection_type: str = "dep"  # "dep" –∏–ª–∏ "ret"
    ) -> InlineKeyboardMarkup:
    final_button_rows = [] # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ –∑–¥–µ—Å—å

    if min_allowed_date is None:
        min_allowed_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º date_range_start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Ä–∞–Ω—å—à–µ min_allowed_date
    # –≠—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–∂–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    # –Ω–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω" –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ date_range_start, date_range_end
    # —Ç–∞–∫ –∫–∞–∫ API —Å–∞–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–µ–Ω –≤–µ—Å—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    display_range_start = date_range_start
    if year == min_allowed_date.year and month == min_allowed_date.month:
        display_range_start = max(date_range_start, min_allowed_date.day)

    # 1. –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω"
    # –§–æ—Ä–º–∞—Ç callback: entire_range_slctd_dep_YYYY-MM-DDstart-DDend
    # –∏–ª–∏ entire_range_slctd_ret_YYYY-MM-DDstart-DDend
    entire_range_callback_data = (
        f"{CALLBACK_ENTIRE_RANGE_SELECTED}{range_selection_type}_"
        f"{year}-{month:02d}-{date_range_start:02d}-{date_range_end:02d}"
    )
    entire_range_button_text = f"–í—ã–±—Ä–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω {date_range_start}-{date_range_end}"
    final_button_rows.append([InlineKeyboardButton(text=entire_range_button_text, callback_data=entire_range_callback_data)])

    # 2. –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
    individual_date_buttons_rows = []
    current_row = []
    any_button_created = False

    for day in range(display_range_start, date_range_end + 1): # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_range_start –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∞–º–∞ –¥–∞—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π
            current_date_obj_for_check = datetime(year, month, day)
            if current_date_obj_for_check < min_allowed_date:
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞—Ç—ã —Ä–∞–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π

            any_button_created = True
            date_str_callback = current_date_obj_for_check.strftime("%Y-%m-%d") # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è callback
            display_date_text = current_date_obj_for_check.strftime("%d") # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å
            current_row.append(InlineKeyboardButton(text=display_date_text, callback_data=f"{callback_prefix}{date_str_callback}"))
            if len(current_row) == 5: # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
                individual_date_buttons_rows.append(current_row)
                current_row = []
        except ValueError:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç—ã: {year}-{month}-{day}")
            continue
    
    if current_row: # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        individual_date_buttons_rows.append(current_row)
    
    final_button_rows.extend(individual_date_buttons_rows)

    # 3. –°–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç", –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
    # –∏ –¥–∏–∞–ø–∞–∑–æ–Ω display_range_start <= date_range_end –±—ã–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤–∞–ª–∏–¥–µ–Ω
    if not any_button_created and display_range_start <= date_range_end:
        if not back_callback_data: # –ò –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç–æ
            # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞-–∑–∞–≥–ª—É—à–∫–∞ –≤–∞–∂–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–º–∞–ª, –ø–æ—á–µ–º—É –Ω–µ—Ç –¥–∞—Ç
            final_button_rows.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ", callback_data="no_specific_dates_in_range_error")])
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç" –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º,
        # —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥. –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ —Å "–ù–∞–∑–∞–¥" –∏ "–í—ã–±—Ä–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω") –¥–æ–ø—É—Å—Ç–∏–º–∞.

    # 4. –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if back_callback_data:
        final_button_rows.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])

    return InlineKeyboardMarkup(final_button_rows)

def get_price_options_keyboard(back_callback_data: str | None = None) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É", callback_data=CALLBACK_PRICE_CUSTOM)],
        [InlineKeyboardButton("üìâ –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è", callback_data=CALLBACK_PRICE_LOWEST)],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë", callback_data=CALLBACK_PRICE_ALL)],
    ]
    if back_callback_data:
        keyboard.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard)

def get_yes_no_keyboard(yes_callback: str, no_callback: str, yes_text="–î–∞", no_text="–ù–µ—Ç", back_callback_data: str | None = None) -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(yes_text, callback_data=yes_callback),
            InlineKeyboardButton(no_text, callback_data=no_callback),
        ]
    ]
    if back_callback_data:
        keyboard.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard)

def get_skip_dates_keyboard(callback_select_dates: str, back_callback_data: str | None = None) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üóì –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã", callback_data=callback_select_dates)],
        [InlineKeyboardButton("‚ú® –ò—Å–∫–∞—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç", callback_data=CALLBACK_NO_SPECIFIC_DATES)],
    ]
    if back_callback_data:
        keyboard.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard)

def get_search_other_airports_keyboard(country_name: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã."""
    keyboard = [
        [
            InlineKeyboardButton(f"–î–∞, –∏—Å–∫–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –≤ {country_name}", callback_data=CALLBACK_YES_OTHER_AIRPORTS),
            InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data=CALLBACK_NO_OTHER_AIRPORTS),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø (–ø–æ–≤—Ç–æ—Ä–Ω–æ, –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
def get_save_search_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [
            InlineKeyboardButton("–î–∞ üëç", callback_data=CALLBACK_SAVE_SEARCH_YES),
            InlineKeyboardButton("–ù–µ—Ç üëé", callback_data=CALLBACK_SAVE_SEARCH_NO),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)