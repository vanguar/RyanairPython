# bot/keyboards.py
import logging
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from .config import (
    COUNTRIES_DATA, RUSSIAN_MONTHS, CALLBACK_SKIP, CALLBACK_NO_SPECIFIC_DATES,
    CALLBACK_YES_OTHER_AIRPORTS, CALLBACK_NO_OTHER_AIRPORTS,
    # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ü–µ–Ω—ã
    CALLBACK_PRICE_CUSTOM, CALLBACK_PRICE_LOWEST, CALLBACK_PRICE_ALL,
    MSG_BACK, # <--- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
    CB_BACK_STD_DEP_YEAR_TO_CITY, CB_BACK_STD_DEP_MONTH_TO_YEAR,
    CB_BACK_STD_DEP_RANGE_TO_MONTH, CB_BACK_STD_DEP_DATE_TO_RANGE,
    CB_BACK_PRICE_TO_STD_ARR_CITY_ONEWAY, CB_BACK_PRICE_TO_STD_RET_DATE_TWOWAY,
    CB_BACK_STD_RET_YEAR_TO_ARR_CITY, CB_BACK_STD_RET_MONTH_TO_YEAR,
    CB_BACK_STD_RET_RANGE_TO_MONTH, CB_BACK_STD_RET_DATE_TO_RANGE,
    CB_BACK_PRICE_TO_ENTERING_CUSTOM,
    # ... –∏ –¥–ª—è –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ ...
    CB_BACK_PRICE_TO_FLEX_FLIGHT_TYPE, CB_BACK_FLEX_ASK_DEP_TO_PRICE,
    CB_BACK_FLEX_DEP_COUNTRY_TO_ASK_DEP, CB_BACK_FLEX_DEP_CITY_TO_DEP_COUNTRY,
    CB_BACK_FLEX_ASK_ARR_TO_DEP_CITY, CB_BACK_FLEX_ARR_COUNTRY_TO_ASK_ARR,
    CB_BACK_FLEX_ARR_CITY_TO_ARR_COUNTRY, CB_BACK_FLEX_ASK_DATES_TO_ARR_CITY,
    CB_BACK_FLEX_ASK_DATES_TO_DEP_CITY_NO_ARR, CB_BACK_FLEX_DEP_YEAR_TO_ASK_DATES,
    CB_BACK_FLEX_DEP_MONTH_TO_YEAR, CB_BACK_FLEX_DEP_RANGE_TO_MONTH,
    CB_BACK_FLEX_DEP_DATE_TO_RANGE, CB_BACK_FLEX_RET_YEAR_TO_DEP_DATE,
    CB_BACK_FLEX_RET_MONTH_TO_YEAR, CB_BACK_FLEX_RET_RANGE_TO_MONTH,
    CB_BACK_FLEX_RET_DATE_TO_RANGE,
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MSG_FLIGHT_TYPE_PROMPT —Ç–æ–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    MSG_FLIGHT_TYPE_PROMPT
)

logger = logging.getLogger(__name__)

def get_main_menu_keyboard(): #
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞."""
    keyboard = [ #
        [InlineKeyboardButton("‚úàÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="start_standard_search")], #
        [InlineKeyboardButton("‚ú® –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫", callback_data="start_flex_search")], #
        [InlineKeyboardButton("üéØ –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –±–∏–ª–µ—Ç (–∫—É–¥–∞ —É–≥–æ–¥–Ω–æ)", callback_data="start_flex_anywhere")] #
    ]
    return InlineKeyboardMarkup(keyboard) #

# bot/keyboards.py
def get_flight_type_reply_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞ (1 –∏–ª–∏ 2)."""
    reply_keyboard = [['1', '2']]
    return ReplyKeyboardMarkup(
        reply_keyboard,
        one_time_keyboard=False,  # –ò–ó–ú–ï–ù–ï–ù–û
        resize_keyboard=True,
        input_field_placeholder='1 (–≤ –æ–¥–Ω—É) –∏–ª–∏ 2 (–≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)' # –ò–ó–ú–ï–ù–ï–ù–û
    )

# bot/keyboards.py
def get_country_reply_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã."""
    if not COUNTRIES_DATA:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return ReplyKeyboardMarkup([["–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö"]], one_time_keyboard=False, resize_keyboard=True) # –ò–ó–ú–ï–ù–ï–ù–û one_time_keyboard

    country_names = sorted(list(COUNTRIES_DATA.keys()))
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å—é–¥–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞
    # keyboard = [country_names[i:i + 3] for i in range(0, len(country_names), 3)]
    # keyboard.append([MSG_BACK]) # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω—É–∂–Ω–∞ –∑–¥–µ—Å—å –∫–∞–∫ Reply –∫–Ω–æ–ø–∫–∞
    # –ù–æ –¥–ª—è ReplyKeyboard "–ù–∞–∑–∞–¥" –ª—É—á—à–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –≤ fallbacks –∏–ª–∏ MessageHandler.
    # –î–ª—è –∏–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ—Ö–æ–¥–æ–≤ "–ù–∞–∑–∞–¥" –±—É–¥–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π.
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥", —Ç.–∫. –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–µ–π—Å–∞ (ReplyKeyboard).
    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–∏–ø—É —Ä–µ–π—Å–∞ –ø—Ä–æ—â–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä–∞–Ω—É.
    keyboard = [country_names[i:i + 3] for i in range(0, len(country_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True) # –ò–ó–ú–ï–ù–ï–ù–û one_time_keyboard

# bot/keyboards.py
def get_city_reply_keyboard(
        country_name: str,
        override_cities: dict[str, str] | None = None,
):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤. –ï—Å–ª–∏ override_cities –ø–µ—Ä–µ–¥–∞–Ω ‚Äî
    —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –Ω–µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ COUNTRIES_DATA.
    """
    cities_dict = override_cities or COUNTRIES_DATA.get(country_name, {})
    if not cities_dict:
        logger.warning(f"–ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã ¬´{country_name}¬ª")
        return ReplyKeyboardMarkup([["–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"]], one_time_keyboard=False, resize_keyboard=True) # –ò–ó–ú–ï–ù–ï–ù–û one_time_keyboard

    city_names = sorted(cities_dict.keys())
    keyboard = [city_names[i:i + 3] for i in range(0, len(city_names), 3)]
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ get_country_reply_keyboard, –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫–∞–∫ Reply –∫–Ω–æ–ø–∫—É –∑–¥–µ—Å—å –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º.
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True) # –ò–ó–ú–ï–ù–ï–ù–û one_time_keyboard

# bot/keyboards.py

def generate_year_buttons(callback_prefix: str = "", back_callback_data: str | None = None):
    current_year = datetime.now().year
    next_year = current_year + 1
    keyboard = [
        [InlineKeyboardButton(text=str(current_year), callback_data=f"{callback_prefix}{current_year}")],
        [InlineKeyboardButton(text=str(next_year), callback_data=f"{callback_prefix}{next_year}")]
    ]
    if back_callback_data:
        keyboard.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard)

def generate_month_buttons(
        callback_prefix: str = "",
        year_for_months: int | None = None,
        min_departure_month: int | None = None,
        departure_year_for_comparison: int | None = None,
        back_callback_data: str | None = None
):
    now = datetime.now()
    cur_year, cur_month = now.year, now.month
    keyboard_rows = []
    month_items = list(RUSSIAN_MONTHS.items())

    if year_for_months is None:
        year_for_months = cur_year

    current_row = []
    valid_month_found = False
    for idx, month_name in month_items:
        is_past_month = (year_for_months == cur_year and idx < cur_month)
        is_before_min_departure = (
            min_departure_month is not None and
            departure_year_for_comparison is not None and
            departure_year_for_comparison == year_for_months and
            idx < min_departure_month
        )
        if is_past_month or is_before_min_departure:
            continue
        valid_month_found = True
        callback_data = f"{callback_prefix}{str(idx).zfill(2)}"
        current_row.append(InlineKeyboardButton(text=month_name, callback_data=callback_data))
        if len(current_row) == 3:
            keyboard_rows.append(current_row)
            current_row = []
    if current_row:
        keyboard_rows.append(current_row)

    if not valid_month_found:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤, –Ω–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤"
        if not back_callback_data:
             keyboard_rows.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤", callback_data="no_valid_months_error")])
        elif not keyboard_rows: # –ï—Å–ª–∏ keyboard_rows –ø—É—Å—Ç –∏ –µ—Å—Ç—å back_callback_data
             keyboard_rows = [] # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤"

    if back_callback_data:
        if not keyboard_rows and not valid_month_found : # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)
             keyboard_rows = [[InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)]]
        else:
             keyboard_rows.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard_rows)

def generate_date_range_buttons(year: int, month: int, callback_prefix: str = "", back_callback_data: str | None = None):
    today = datetime.now().date()
    try:
        days_in_month = (datetime(year, month + 1, 1) - datetime(year, month, 1)).days if month != 12 else (datetime(year + 1, 1, 1) - datetime(year, month, 1)).days
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥/–º–µ—Å—è—Ü {year}-{month} –¥–ª—è generate_date_range_buttons")
        rows = []
        if back_callback_data:
            rows.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
        return InlineKeyboardMarkup(rows)

    ranges = [(1, 10), (11, 20), (21, days_in_month)]
    keyboard_buttons = []
    valid_range_found = False

    for start, end_limit in ranges:
        actual_end = min(end_limit, days_in_month)
        if start > actual_end: continue
        if year == today.year and month == today.month and actual_end < today.day: continue
        valid_range_found = True
        cb = f"{callback_prefix}{start}-{actual_end}"
        keyboard_buttons.append([InlineKeyboardButton(f"{start}-{actual_end}", callback_data=cb)])

    if not valid_range_found:
        if not back_callback_data:
            keyboard_buttons.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", callback_data="no_valid_date_ranges_error")])
        elif not keyboard_buttons:
             keyboard_buttons = []


    if back_callback_data:
        if not keyboard_buttons and not valid_range_found:
             keyboard_buttons = [[InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)]]
        else:
             keyboard_buttons.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard_buttons)

def generate_specific_date_buttons(
        year: int, month: int, date_range_start: int, date_range_end: int,
        callback_prefix: str = "", min_allowed_date: datetime | None = None,
        back_callback_data: str | None = None
    ):
    buttons_rows = []
    current_row = []
    if min_allowed_date is None:
        min_allowed_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    any_button_created = False
    for day in range(date_range_start, date_range_end + 1):
        try:
            date_obj = datetime(year, month, day)
            if date_obj < min_allowed_date: continue
            any_button_created = True
            date_str_callback = date_obj.strftime("%Y-%m-%d")
            display_date = date_obj.strftime("%d")
            current_row.append(InlineKeyboardButton(text=display_date, callback_data=f"{callback_prefix}{date_str_callback}"))
            if len(current_row) == 5:
                buttons_rows.append(current_row)
                current_row = []
        except ValueError:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç—ã: {year}-{month}-{day}")
            continue
    if current_row:
        buttons_rows.append(current_row)

    if not any_button_created and date_range_start <= date_range_end:
        if not back_callback_data:
            buttons_rows.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ", callback_data="no_specific_dates_in_range_error")])
        elif not buttons_rows: # –ï—Å–ª–∏ buttons_rows –ø—É—Å—Ç –∏ –µ—Å—Ç—å back_callback_data
             buttons_rows = []

    if back_callback_data:
        if not buttons_rows and not any_button_created:
             buttons_rows = [[InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)]]
        else:
             buttons_rows.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])

    return InlineKeyboardMarkup(buttons_rows)

def get_price_options_keyboard(back_callback_data: str | None = None) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É", callback_data=CALLBACK_PRICE_CUSTOM)],
        [InlineKeyboardButton("üìâ –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è", callback_data=CALLBACK_PRICE_LOWEST)],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë", callback_data=CALLBACK_PRICE_ALL)],
    ]
    if back_callback_data:
        keyboard.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard)

def get_yes_no_keyboard(yes_callback: str, no_callback: str, yes_text="–î–∞", no_text="–ù–µ—Ç", back_callback_data: str | None = None):
    keyboard = [
        [
            InlineKeyboardButton(yes_text, callback_data=yes_callback),
            InlineKeyboardButton(no_text, callback_data=no_callback),
        ]
    ]
    if back_callback_data:
        keyboard.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard)

def get_skip_dates_keyboard(callback_select_dates: str, back_callback_data: str | None = None):
    keyboard = [
        [InlineKeyboardButton("üóì –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã", callback_data=callback_select_dates)],
        [InlineKeyboardButton("‚ú® –ò—Å–∫–∞—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç", callback_data=CALLBACK_NO_SPECIFIC_DATES)],
    ]
    if back_callback_data:
        keyboard.append([InlineKeyboardButton(MSG_BACK, callback_data=back_callback_data)])
    return InlineKeyboardMarkup(keyboard)

def get_search_other_airports_keyboard(country_name: str): #
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã."""
    keyboard = [ #
        [
            InlineKeyboardButton(f"–î–∞, –∏—Å–∫–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –≤ {country_name}", callback_data=CALLBACK_YES_OTHER_AIRPORTS), #
            InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data=CALLBACK_NO_OTHER_AIRPORTS), #
        ]
    ]
    return InlineKeyboardMarkup(keyboard) #

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
def get_price_options_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ–ø—Ü–∏–∏ —Ü–µ–Ω—ã."""
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É", callback_data=CALLBACK_PRICE_CUSTOM)],
        [InlineKeyboardButton("üìâ –°–∞–º–∞—è –Ω–∏–∑–∫–∞—è", callback_data=CALLBACK_PRICE_LOWEST)],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë", callback_data=CALLBACK_PRICE_ALL)],
    ]
    return InlineKeyboardMarkup(keyboard)