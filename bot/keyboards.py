# bot/keyboards.py
import logging
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from .config import COUNTRIES_DATA, RUSSIAN_MONTHS, CALLBACK_SKIP, CALLBACK_NO_SPECIFIC_DATES, \
                    CALLBACK_YES_OTHER_AIRPORTS, CALLBACK_NO_OTHER_AIRPORTS

logger = logging.getLogger(__name__)

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("‚úàÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="start_standard_search")],
        [InlineKeyboardButton("‚ú® –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫", callback_data="start_flex_search")],
        [InlineKeyboardButton("üéØ –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –±–∏–ª–µ—Ç (–∫—É–¥–∞ —É–≥–æ–¥–Ω–æ)", callback_data="start_flex_anywhere")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_flight_type_reply_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Å–∞ (1 –∏–ª–∏ 2)."""
    reply_keyboard = [['1', '2']]
    return ReplyKeyboardMarkup(
        reply_keyboard, one_time_keyboard=True, resize_keyboard=True,
        input_field_placeholder='1 (–≤ –æ–¥–Ω—É) –∏–ª–∏ 2 (—Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ)'
    )

def get_country_reply_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã."""
    if not COUNTRIES_DATA:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return ReplyKeyboardMarkup([["–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—Ä–∞–Ω–∞—Ö"]], one_time_keyboard=True)
    
    country_names = sorted(list(COUNTRIES_DATA.keys()))
    keyboard = [country_names[i:i + 3] for i in range(0, len(country_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

def get_city_reply_keyboard(country_name: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ."""
    if country_name not in COUNTRIES_DATA or not COUNTRIES_DATA[country_name]:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω—ã '{country_name}' –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ReplyKeyboardMarkup([["–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö"]], one_time_keyboard=True)

    city_names = sorted(list(COUNTRIES_DATA[country_name].keys()))
    keyboard = [city_names[i:i + 3] for i in range(0, len(city_names), 3)]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)


def generate_year_buttons(callback_prefix: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å —Ç–µ–∫—É—â–∏–º –∏ —Å–ª–µ–¥—É—é—â–∏–º –≥–æ–¥–æ–º."""
    current_year = datetime.now().year
    next_year = current_year + 1
    keyboard = [
        [InlineKeyboardButton(text=str(current_year), callback_data=f"{callback_prefix}{current_year}")],
        [InlineKeyboardButton(text=str(next_year), callback_data=f"{callback_prefix}{next_year}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def generate_month_buttons(callback_prefix: str = "", year_for_months: int = None, 
                           min_departure_month: int = None, departure_year_for_comparison: int = None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å –º–µ—Å—è—Ü–∞–º–∏.
    year_for_months: –≥–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –º–µ—Å—è—Ü—ã.
    min_departure_month: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏ year_for_months == departure_year_for_comparison ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–µ—Å—è—Ü (–º–µ—Å—è—Ü –≤—ã–ª–µ—Ç–∞).
    departure_year_for_comparison: –≥–æ–¥ –≤—ã–ª–µ—Ç–∞, –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å 'year_for_months' –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ min_departure_month.
    """
    now = datetime.now()
    current_system_year = now.year
    current_system_month = now.month

    keyboard = []
    month_items = list(RUSSIAN_MONTHS.items())
    
    row = []
    buttons_in_row_count = 0

    for month_number, month_name in month_items:
        show_disabled = False
        
        # –£—Å–ª–æ–≤–∏–µ 1: –ú–µ—Å—è—Ü –ø—Ä–æ—à–µ–ª –≤ —Ç–µ–∫—É—â–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–º –≥–æ–¥—É
        if year_for_months == current_system_year and month_number < current_system_month:
            show_disabled = True
        
        # –£—Å–ª–æ–≤–∏–µ 2: –ú–µ—Å—è—Ü —Ä–∞–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤—ã–ª–µ—Ç–∞ (–¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞)
        if not show_disabled and min_departure_month is not None and departure_year_for_comparison is not None:
            if year_for_months == departure_year_for_comparison and month_number < min_departure_month:
                show_disabled = True
            # –¢–∞–∫–∂–µ, –µ—Å–ª–∏ –≥–æ–¥ –≤—ã–±–æ—Ä–∞ (year_for_months) —Ä–∞–Ω—å—à–µ –≥–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ (departure_year_for_comparison) - –≤—Å–µ –º–µ—Å—è—Ü—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
            elif year_for_months < departure_year_for_comparison:
                 show_disabled = True

        if show_disabled:
            row.append(InlineKeyboardButton(f"‚õîÔ∏è {month_name}", callback_data="ignore_past_month"))
        else:
            callback_data_month = f"{callback_prefix}{str(month_number).zfill(2)}"
            row.append(InlineKeyboardButton(text=month_name, callback_data=callback_data_month))
        
        buttons_in_row_count += 1
        if buttons_in_row_count == 3:
            keyboard.append(row)
            row = []
            buttons_in_row_count = 0
            
    if row: # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 3 –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        keyboard.append(row)

    if not keyboard: # –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤", callback_data="no_valid_months_error")]) # –ò–∑–º–µ–Ω–µ–Ω callback_data –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        
    return InlineKeyboardMarkup(keyboard)

def generate_date_range_buttons(year: int, month: int, callback_prefix: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –¥–∞—Ç (1-10, 11-20, 21-–∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞)."""
    try:
        if month == 12:
            days_in_month = (datetime(year + 1, 1, 1) - datetime(year, month, 1)).days
        else:
            days_in_month = (datetime(year, month + 1, 1) - datetime(year, month, 1)).days
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ ({year}) –∏–ª–∏ –º–µ—Å—è—Ü ({month}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç.")
        return InlineKeyboardMarkup([])

    ranges = [
        (1, 10),
        (11, 20),
        (21, days_in_month)
    ]

    keyboard = []
    for start, end in ranges:
        actual_end = min(end, days_in_month)
        if start > actual_end :
            continue
        range_str = f"{start}-{actual_end}"
        callback_data = f"{callback_prefix}{start}-{actual_end}"
        keyboard.append([InlineKeyboardButton(text=range_str, callback_data=callback_data)])
    return InlineKeyboardMarkup(keyboard)

def generate_specific_date_buttons(year: int, month: int, date_range_start: int, date_range_end: int, 
                                   callback_prefix: str = "", min_allowed_date: datetime = None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Inline Keyboard —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
    min_allowed_date ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–∞—Ç–∞ (–æ–±—ä–µ–∫—Ç datetime).
    """
    buttons = []
    row = []
    
    # –ï—Å–ª–∏ min_allowed_date –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç (–∫—Ä–æ–º–µ —Å–∞–º–æ–π –¥–∞—Ç—ã)
    # –ù–æ –¥–ª—è –¥–∞—Ç –≤—ã–ª–µ—Ç–∞ —ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—á—å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è. –î–ª—è –¥–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ - –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞.
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å—é–¥–∞.

    for day in range(date_range_start, date_range_end + 1):
        try:
            current_date_obj = datetime(year, month, day).replace(hour=0, minute=0, second=0, microsecond=0) # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
            display_date = current_date_obj.strftime("%d")
            
            show_disabled = False
            if min_allowed_date and current_date_obj < min_allowed_date.replace(hour=0, minute=0, second=0, microsecond=0):
                show_disabled = True
            
            if show_disabled:
                row.append(InlineKeyboardButton(f"‚õîÔ∏è {display_date}", callback_data="ignore_past_day"))
            else:
                date_str_callback = current_date_obj.strftime("%Y-%m-%d")
                row.append(InlineKeyboardButton(text=display_date, callback_data=f"{callback_prefix}{date_str_callback}"))

            if len(row) == 5:
                buttons.append(row)
                row = []
        except ValueError:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç—ã: {year}-{month}-{day}")
            continue
    if row:
        buttons.append(row)
        
    if not buttons: # –ï—Å–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
         buttons.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç", callback_data="no_valid_dates_error")]) # –ò–∑–º–µ–Ω–µ–Ω callback_data
         
    return InlineKeyboardMarkup(buttons)

def get_skip_or_select_keyboard(prompt_message: str, callback_skip_action: str, callback_select_action: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏–ª–∏ "–í—ã–±—Ä–∞—Ç—å"."""
    keyboard = [
        [InlineKeyboardButton(f"‚úèÔ∏è {prompt_message}", callback_data=callback_select_action)],
        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=callback_skip_action)],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_yes_no_keyboard(yes_callback: str, no_callback: str, yes_text="–î–∞", no_text="–ù–µ—Ç"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç."""
    keyboard = [
        [
            InlineKeyboardButton(yes_text, callback_data=yes_callback),
            InlineKeyboardButton(no_text, callback_data=no_callback),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_skip_dates_keyboard(callback_select_dates: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞ (–ø–æ–∏—Å–∫ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç)."""
    keyboard = [
        [InlineKeyboardButton("üóì –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã", callback_data=callback_select_dates)],
        [InlineKeyboardButton("‚ú® –ò—Å–∫–∞—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç", callback_data=CALLBACK_NO_SPECIFIC_DATES)],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_search_other_airports_keyboard(country_name: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã."""
    keyboard = [
        [
            InlineKeyboardButton(f"–î–∞, –∏—Å–∫–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –≤ {country_name}", callback_data=CALLBACK_YES_OTHER_AIRPORTS),
            InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data=CALLBACK_NO_OTHER_AIRPORTS),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)