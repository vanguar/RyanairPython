# bot/weather_api.py
import httpx # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–∞–∫ –∏ ryanair-py
import logging
from bot import config # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–ª—é—á—É

logger = logging.getLogger(__name__)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∫ —ç–º–æ–¥–∑–∏
WEATHER_EMOJI_MAP = {
    "clear": "‚òÄÔ∏è",  # –Ø—Å–Ω–æ
    "clouds": "‚òÅÔ∏è", # –û–±–ª–∞—á–Ω–æ
    "rain": "üåßÔ∏è",   # –î–æ–∂–¥—å
    "drizzle": "üå¶Ô∏è",# –ú–æ—Ä–æ—Å—å
    "snow": "‚ùÑÔ∏è",   # –°–Ω–µ–≥
    "thunderstorm": "‚õàÔ∏è", # –ì—Ä–æ–∑–∞
    "atmosphere": "üå´Ô∏è", # –¢—É–º–∞–Ω, –¥—ã–º–∫–∞ –∏ —Ç.–¥. (Mist, Smoke, Haze, Fog, Dust, Sand, Ash, Squall, Tornado)
    "unknown": "‚ùì" # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
}

def _map_weather_condition_to_emoji(weather_id: int) -> str:
    """–ú–∞–ø–ø–∏—Ç ID –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è OpenWeatherMap –Ω–∞ —ç–º–æ–¥–∑–∏."""
    if 200 <= weather_id <= 232: # –ì—Ä–æ–∑–∞
        return WEATHER_EMOJI_MAP["thunderstorm"]
    elif 300 <= weather_id <= 321: # –ú–æ—Ä–æ—Å—å
        return WEATHER_EMOJI_MAP["drizzle"]
    elif 500 <= weather_id <= 531: # –î–æ–∂–¥—å
        return WEATHER_EMOJI_MAP["rain"]
    elif 600 <= weather_id <= 622: # –°–Ω–µ–≥
        return WEATHER_EMOJI_MAP["snow"]
    elif 701 <= weather_id <= 781: # –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (—Ç—É–º–∞–Ω, –¥—ã–º–∫–∞ –∏ —Ç.–¥.)
        return WEATHER_EMOJI_MAP["atmosphere"]
    elif weather_id == 800: # –Ø—Å–Ω–æ
        return WEATHER_EMOJI_MAP["clear"]
    elif 801 <= weather_id <= 804: # –û–±–ª–∞–∫–∞
        return WEATHER_EMOJI_MAP["clouds"]
    return WEATHER_EMOJI_MAP["unknown"]

async def get_weather_forecast(city_name: str) -> dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ —ç–º–æ–¥–∑–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    if not config.OPENWEATHER_API_KEY:
        logger.warning("API –∫–ª—é—á –¥–ª—è OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return None
    if not city_name:
        logger.debug("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.")
        return None

    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city_name,
        "appid": config.OPENWEATHER_API_KEY,
        "units": "metric",  # –î–ª—è –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—è
        "lang": "ru"        # –î–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(base_url, params=params)
            response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫ (4xx, 5xx)
            data = response.json()

            if data.get("cod") != 200: 
                logger.error(f"–û—à–∏–±–∫–∞ API OpenWeatherMap –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}': {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')}")
                return None

            main_data = data.get("main")
            weather_data = data.get("weather")

            if main_data and weather_data and len(weather_data) > 0:
                temperature = main_data.get("temp")
                weather_id = weather_data[0].get("id") 
                city_name_from_api = data.get("name", city_name) 

                if temperature is not None and weather_id is not None:
                    emoji = _map_weather_condition_to_emoji(weather_id)
                    return {
                        "city": city_name_from_api,
                        "temperature": round(float(temperature)), 
                        "emoji": emoji
                    }
            logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}': {data}")
            return None
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}': {e.response.status_code} - {e.response.text}")
        return None
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}': {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}': {e}", exc_info=True)
        return None