# bot/weather_api.py
import httpx  # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
import logging
from datetime import datetime
from bot import config  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–ª—é—á—É

logger = logging.getLogger(__name__)

# –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∫ —ç–º–æ–¥–∑–∏
WEATHER_EMOJI_MAP = {
    "clear": "‚òÄÔ∏è",       # –Ø—Å–Ω–æ
    "clouds": "‚òÅÔ∏è",      # –û–±–ª–∞—á–Ω–æ
    "rain": "üåßÔ∏è",        # –î–æ–∂–¥—å
    "drizzle": "üå¶Ô∏è",     # –ú–æ—Ä–æ—Å—å
    "snow": "‚ùÑÔ∏è",        # –°–Ω–µ–≥
    "thunderstorm": "‚õàÔ∏è",# –ì—Ä–æ–∑–∞
    "atmosphere": "üå´Ô∏è",  # –¢—É–º–∞–Ω, –¥—ã–º–∫–∞ –∏ —Ç.–¥.
    "unknown": "‚ùì"       # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
}

def _map_weather_condition_to_emoji(weather_id: int) -> str:
    """
    –ú–∞–ø–ø–∏—Ç ID –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è OpenWeatherMap –Ω–∞ —ç–º–æ–¥–∑–∏.
    """
    if 200 <= weather_id <= 232:
        return WEATHER_EMOJI_MAP["thunderstorm"]
    elif 300 <= weather_id <= 321:
        return WEATHER_EMOJI_MAP["drizzle"]
    elif 500 <= weather_id <= 531:
        return WEATHER_EMOJI_MAP["rain"]
    elif 600 <= weather_id <= 622:
        return WEATHER_EMOJI_MAP["snow"]
    elif 701 <= weather_id <= 781:
        return WEATHER_EMOJI_MAP["atmosphere"]
    elif weather_id == 800:
        return WEATHER_EMOJI_MAP["clear"]
    elif 801 <= weather_id <= 804:
        return WEATHER_EMOJI_MAP["clouds"]
    return WEATHER_EMOJI_MAP["unknown"]

async def get_weather_with_forecast(city_name: str, target_dt: datetime) -> dict | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≥–æ–¥—É (—Ç–µ–∫—É—â—É—é –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑) –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏.
    - –ï—Å–ª–∏ target_dt –±–ª–∏–∑–æ–∫ –∫ —Ç–µ–∫—É—â–µ–º—É –º–æ–º–µ–Ω—Ç—É (¬±3 —á–∞—Å–∞), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É (/weather).
    - –ï—Å–ª–∏ target_dt –¥–∞–ª—å—à–µ (–¥–æ 5 –¥–Ω–µ–π), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (/forecast) 
      –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
    {
      "city": <–∏–º—è –≥–æ—Ä–æ–¥–∞ –∏–∑ API –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ>,
      "temperature": <—Ü–µ–ª–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è>,
      "emoji": <—Å–∏–º–≤–æ–ª –ø–æ–≥–æ–¥—ã>,
      "type": "current" –∏–ª–∏ "forecast",
      "dt": <datetime UTC, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω –≤—ã–≤–æ–¥>
    }
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    if not config.OPENWEATHER_API_KEY:
        logger.warning("API –∫–ª—é—á –¥–ª—è OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return None
    if not city_name:
        logger.debug("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.")
        return None

    now_utc = datetime.utcnow()
    # –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —Ü–µ–ª–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º (UTC)
    diff_seconds = (target_dt.replace(tzinfo=None) - now_utc).total_seconds()

    try:
        async with httpx.AsyncClient() as client:
            # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±3 —á–∞—Å–æ–≤, –±–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
            if abs(diff_seconds) <= 3 * 3600:
                url_current = "http://api.openweathermap.org/data/2.5/weather"
                params = {
                    "q": city_name,
                    "appid": config.OPENWEATHER_API_KEY,
                    "units": "metric",
                    "lang": "ru"
                }
                resp = await client.get(url_current, params=params)
                resp.raise_for_status()
                data = resp.json()

                if data.get("cod") != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ API OpenWeatherMap (current) –¥–ª—è '{city_name}': {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}") 
                    return None

                main_data = data.get("main")
                weather_data = data.get("weather")
                if main_data and weather_data and len(weather_data) > 0:
                    temp = main_data.get("temp")
                    weather_id = weather_data[0].get("id")
                    city_from_api = data.get("name", city_name)
                    if temp is not None and weather_id is not None:
                        emoji = _map_weather_condition_to_emoji(weather_id)
                        return {
                            "city": city_from_api,
                            "temperature": round(float(temp)),
                            "emoji": emoji,
                            "type": "current",
                            "dt": now_utc
                        }
                logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (current) –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}': {data}")
                return None

            # –ò–Ω–∞—á–µ: target_dt –¥–∞–ª—å—à–µ —á–µ–º ¬±3 —á–∞—Å–∞ ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 5-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            url_forecast = "http://api.openweathermap.org/data/2.5/forecast"
            params = {
                "q": city_name,
                "appid": config.OPENWEATHER_API_KEY,
                "units": "metric",
                "lang": "ru"
            }
            resp = await client.get(url_forecast, params=params)
            resp.raise_for_status()
            data = resp.json()

            if data.get("cod") != "200" or "list" not in data:
                logger.error(f"–û—à–∏–±–∫–∞ API OpenWeatherMap (forecast) –¥–ª—è '{city_name}': {data.get('message', data)}")
                return None

            forecast_list = data["list"]  # –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –∫–∞–∂–¥—ã–π 3 —á–∞—Å–∞ (–æ–±—ã—á–Ω–æ 40 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
            best_item = None
            best_diff = None

            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ timestamp –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ target_dt
            for item in forecast_list:
                item_dt = datetime.utcfromtimestamp(item.get("dt", 0))
                diff = abs((item_dt - target_dt).total_seconds())
                if best_diff is None or diff < best_diff:
                    best_diff = diff
                    best_item = item

            if best_item:
                main_data = best_item.get("main", {})
                weather_data = best_item.get("weather", [{}])
                if main_data and "temp" in main_data and weather_data and weather_data[0].get("id") is not None:
                    temp = main_data.get("temp")
                    weather_id = weather_data[0].get("id")
                    city_from_api = data.get("city", {}).get("name", city_name)
                    if temp is not None and weather_id is not None:
                        emoji = _map_weather_condition_to_emoji(weather_id)
                        return {
                            "city": city_from_api,
                            "temperature": round(float(temp)),
                            "emoji": emoji,
                            "type": "forecast",
                            "dt": datetime.utcfromtimestamp(best_item.get("dt", 0))
                        }
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç (forecast) –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}' –∏ –≤—Ä–µ–º–µ–Ω–∏ {target_dt}")
            return None

    except httpx.HTTPStatusError as e:
        status = e.response.status_code if e.response else "?"
        text = e.response.text if e.response else ""
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}': {status} - {text}")
        return None
    except httpx.RequestError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}': {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è '{city_name}': {e}", exc_info=True)
        return None
