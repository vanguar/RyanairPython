"""
bot/donate_stars.py
–í–∏—Ç—Ä–∏–Ω–∞ ¬´–ø–æ–¥–∞—Ä–∫–æ–≤¬ª —á–µ—Ä–µ–∑ Telegram Stars (XTR) –¥–ª—è PTB v20.

–§–∏—á–∏:
- /donate –∏ –∫–Ω–æ–ø–∫–∞ "‚ú® –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∑–≤—ë–∑–¥–∞–º–∏" –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∏—Ç—Ä–∏–Ω—É.
- –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ ¬´–ø–æ–¥–∞—Ä–∫–∏¬ª (–∫–∞–∫ –≤ –∫–∞–Ω–∞–ª–µ) + –∫–Ω–æ–ø–∫–∞ ¬´üî¢ –°–≤–æ—è —Å—É–º–º–∞¬ª.
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—É–º–º—ã: —à–∞–≥–∏ -10/-5/-1/+1/+5/+10, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å ‚≠ê N¬ª –∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.
- –ü–æ –Ω–∞–∂–∞—Ç–∏—é —Å–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å (sendInvoice, currency='XTR', provider='STARS').
- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –∫–∞—Å—Ç–æ–º–Ω–æ–µ ¬´—Å–ø–∞—Å–∏–±–æ¬ª, –ª–æ–≥ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.

–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ main.py (—É —Ç–µ–±—è —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ):
    from bot.donate_stars import get_handlers as donate_get_handlers
    for h in donate_get_handlers():
        application.add_handler(h)
"""

from __future__ import annotations

import time
import logging
from dataclasses import dataclass
from typing import List, Optional

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)

log = logging.getLogger(__name__)

# ---- –ö–æ–Ω—Ñ–∏–≥/–ø—Ä–æ–≤–∞–π–¥–µ—Ä ----
try:
    from . import config  # bot.config
    PROVIDER_TOKEN = getattr(config, "TELEGRAM_STARS_PROVIDER_TOKEN", "STARS")
    ADMIN_ID: Optional[int] = getattr(config, "ADMIN_TELEGRAM_ID", None)
except Exception:
    PROVIDER_TOKEN = "STARS"
    ADMIN_ID = None

CURRENCY = "XTR"
STARS_MULTIPLIER = 1  # 1‚≠ê = 1 –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ (—Å–µ–π—á–∞—Å —Ç–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)

# ---- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—É–º–º—ã ----
CUSTOM_MIN = 1
CUSTOM_MAX = 10000
CUSTOM_DEFAULT = 10
USER_KEY_AMOUNT = "donate_custom_amount"

# –ï—Å–ª–∏ True ‚Äî –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏—Ç—Ä–∏–Ω–æ–π/–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
DELETE_MESSAGE_ON_INVOICE = True

# ---- –ú–æ–¥–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ ----
@dataclass(frozen=True)
class Gift:
    emoji: str
    title: str
    price_stars: int
    description: str

# ---- –ö–∞—Ç–∞–ª–æ–≥ ¬´–ø–æ–¥–∞—Ä–∫–æ–≤¬ª (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª) ----
GIFTS: List[Gift] = [
    Gift("üíñ", "–°–µ—Ä–¥—Ü–µ",             15,  "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"),
    Gift("üß∏", "–ü–ª—é—à–µ–≤—ã–π –º–µ–¥–≤–µ–¥—å",    15,  "–ú–∏–ª–æ—Ç–∞ –∏ –∑–∞–±–æ—Ç–∞."),
    Gift("üéÅ", "–ü–æ–¥–∞—Ä–æ–∫",             25,  "–¢—ë–ø–ª—ã–π —Å—é—Ä–ø—Ä–∏–∑!"),
    Gift("üåπ", "–†–æ–∑–∞",                25,  "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫ –≤–Ω–∏–º–∞–Ω–∏—è."),
    Gift("üéÇ", "–¢–æ—Ä—Ç",                50,  "–ó–∞ —Ç–≤–æ–∏ —Å—Ç–∞—Ä–∞–Ω–∏—è!"),
    Gift("üíê", "–ë—É–∫–µ—Ç",               50,  "–û—Ö–∞–ø–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏."),
    Gift("üöÄ", "–†–∞–∫–µ—Ç–∞",              50,  "–í–∑–ª–µ—Ç–∞–µ–º!"),
    Gift("üèÜ", "–ö—É–±–æ–∫",              100,  "–¢–æ–ø–æ–≤—ã–π –±–æ—Ç ‚Äî —Ç–æ–ø–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞."),
    Gift("üíç", "–ö–æ–ª—å—Ü–æ",             100,  "–û–≥–æ. –≠—Ç–æ —Å–µ—Ä—å—ë–∑–Ω–æ!"),
]

# ---- –¢–µ–∫—Å—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ ----
THANK_YOU_TEXT_TEMPLATE = (
    "{gift} –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É, {name}! "
    "–¢—ã –∑–∞–¥–æ–Ω–∞—Ç–∏–ª(–∞) {stars}‚≠ê ‚Äî —ç—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞. "
    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ —Å –¥—Ä—É–∑—å—è–º–∏ üòâ"
)

# ---- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----
def _build_gifts_keyboard() -> InlineKeyboardMarkup:
    buttons: List[List[InlineKeyboardButton]] = []
    row: List[InlineKeyboardButton] = []

    for idx, g in enumerate(GIFTS):
        text = f"{g.emoji} {g.title} ({g.price_stars}‚≠ê)"
        row.append(InlineKeyboardButton(text, callback_data=f"gift_pick:{idx}"))
        if len(row) == 3:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    # –°–≤–æ—è —Å—É–º–º–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    buttons.append([InlineKeyboardButton("üî¢ –°–≤–æ—è —Å—É–º–º–∞", callback_data="donate_custom")])
    # –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="donate_menu_back_to_menu")])
    return InlineKeyboardMarkup(buttons)

def _clamp_amount(n: int) -> int:
    return max(CUSTOM_MIN, min(CUSTOM_MAX, n))

def _build_amount_keyboard(amount: int) -> InlineKeyboardMarkup:
    amount = _clamp_amount(amount)
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚àí10", callback_data="amount_step:-10"),
            InlineKeyboardButton("‚àí5",  callback_data="amount_step:-5"),
            InlineKeyboardButton("‚àí1",  callback_data="amount_step:-1"),
            InlineKeyboardButton("+1",  callback_data="amount_step:+1"),
            InlineKeyboardButton("+5",  callback_data="amount_step:+5"),
            InlineKeyboardButton("+10", callback_data="amount_step:+10"),
        ],
        [InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å ‚≠ê {amount}", callback_data="amount_pay")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="amount_cancel")],
    ])

# ---- –û–±—â–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ ----
def _gift_to_price(g: Gift) -> List[LabeledPrice]:
    amount = int(g.price_stars * STARS_MULTIPLIER)
    return [LabeledPrice(label=f"{g.title} {g.emoji}", amount=amount)]

def _custom_to_price(stars: int) -> List[LabeledPrice]:
    amount = int(_clamp_amount(stars) * STARS_MULTIPLIER)
    return [LabeledPrice(label=f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚≠ê {stars}", amount=amount)]

# ---- Entry-–ø–æ–π–Ω—Ç—ã ----
async def donate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text="‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞:",
        reply_markup=_build_gifts_keyboard()
    )

async def donate_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞:",
        reply_markup=_build_gifts_keyboard()
    )

async def donate_menu_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer("–ù–∞–∑–∞–¥")
    await q.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

# ---- –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ ‚Üí –∏–Ω–≤–æ–π—Å ----
async def _send_invoice_for_gift(update: Update, context: ContextTypes.DEFAULT_TYPE, gift_id: int) -> None:
    chat_id = update.effective_chat.id
    g = GIFTS[gift_id]
    payload = f"gift:{gift_id}:{int(time.time())}:{chat_id}"

    await context.bot.send_invoice(
        chat_id=chat_id,
        title=f"{g.emoji} {g.title}",
        description=g.description,
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=_gift_to_price(g),
    )

async def gift_pick_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    try:
        _, idx_str = q.data.split(":")
        gift_id = int(idx_str)
    except Exception:
        await q.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞", show_alert=True)
        return

    await _send_invoice_for_gift(update, context, gift_id)

    # –ü–æ –∂–µ–ª–∞–Ω–∏—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–∏—Ç—Ä–∏–Ω—É
    if DELETE_MESSAGE_ON_INVOICE:
        try:
            await q.delete_message()
        except Exception:
            pass

# ---- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ¬´–°–≤–æ—è —Å—É–º–º–∞¬ª ----
async def donate_custom_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    context.user_data[USER_KEY_AMOUNT] = CUSTOM_DEFAULT
    await q.edit_message_text(
        f"üî¢ –£–∫–∞–∂–∏ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (‚≠ê): —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî {CUSTOM_DEFAULT}\n"
        f"–î–∏–∞–ø–∞–∑–æ–Ω {CUSTOM_MIN}‚Ä¶{CUSTOM_MAX}‚≠ê",
        reply_markup=_build_amount_keyboard(CUSTOM_DEFAULT),
    )

async def amount_step_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    delta_str = q.data.split(":")[1]
    try:
        delta = int(delta_str)
    except Exception:
        return

    current = int(context.user_data.get(USER_KEY_AMOUNT, CUSTOM_DEFAULT))
    new_amount = _clamp_amount(current + delta)
    context.user_data[USER_KEY_AMOUNT] = new_amount

    try:
        await q.edit_message_text(
            f"üî¢ –£–∫–∞–∂–∏ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (‚≠ê): —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî {new_amount}\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω {CUSTOM_MIN}‚Ä¶{CUSTOM_MAX}‚≠ê",
            reply_markup=_build_amount_keyboard(new_amount),
        )
    except Exception:
        pass

async def amount_cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await q.edit_message_text(
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞:",
        reply_markup=_build_gifts_keyboard()
    )

async def amount_pay_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    amount = int(context.user_data.get(USER_KEY_AMOUNT, CUSTOM_DEFAULT))
    amount = _clamp_amount(amount)
    chat_id = update.effective_chat.id
    payload = f"custom:{amount}:{int(time.time())}:{chat_id}"

    await context.bot.send_invoice(
        chat_id=chat_id,
        title=f"‚≠ê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ({amount})",
        description="–°–≤–æ–±–æ–¥–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=_custom_to_price(amount),
    )

    if DELETE_MESSAGE_ON_INVOICE:
        try:
            await q.delete_message()
        except Exception:
            pass

# ---- PreCheckout –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ok=True ----
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.pre_checkout_query
    await query.answer(ok=True)

# ---- –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ----
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    sp = update.message.successful_payment
    total = sp.total_amount
    stars = total // STARS_MULTIPLIER if STARS_MULTIPLIER else total
    payload = sp.invoice_payload or ""
    user = update.effective_user
    name = user.first_name or (user.username and f"@{user.username}") or "–¥—Ä—É–≥"

    gift_emoji = "‚ú®"
    gift_title = "–ü–æ–¥–∞—Ä–∫–∞/–ø–æ–¥–¥–µ—Ä–∂–∫–∞"

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å payload
    try:
        parts = payload.split(":")
        if parts and parts[0] == "gift":
            gift_id = int(parts[1])
            if 0 <= gift_id < len(GIFTS):
                gift_emoji = GIFTS[gift_id].emoji
                gift_title = GIFTS[gift_id].title
        elif parts and parts[0] == "custom":
            gift_emoji = "‚≠ê"
            gift_title = f"–°–≤–æ—è —Å—É–º–º–∞ ({parts[1]}‚≠ê)"
    except Exception:
        pass

    # –°–ø–∞—Å–∏–±–æ
    thank_text = THANK_YOU_TEXT_TEMPLATE.format(gift=gift_emoji, name=name, stars=stars)
    try:
        await update.message.reply_text(thank_text)
    except Exception as e:
        log.warning("–ù–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∞—Å–∏–±–æ: %s", e)

    # –õ–æ–≥
    log.info("‚≠ê DONATION: user_id=%s username=%s type=%s stars=%s payload=%s",
             user.id, user.username, gift_title, stars, payload)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_ID:
        try:
            await context.bot.send_message(
                chat_id=int(ADMIN_ID),
                text=(f"‚≠ê –î–æ–Ω–∞—Ç –ø–æ–ª—É—á–µ–Ω\n"
                      f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.id}\n"
                      f"–¢–∏–ø: {gift_emoji} {gift_title}\n"
                      f"–°—É–º–º–∞: {stars} ‚≠ê")
            )
        except Exception as e:
            log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: %s", e)

# ---- –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ----
def get_handlers():
    return [
        CommandHandler("donate", donate_command),
        # –≤–∏—Ç—Ä–∏–Ω–∞
        CallbackQueryHandler(donate_menu_callback, pattern="^donate_menu$"),
        CallbackQueryHandler(donate_menu_back_to_menu, pattern="^donate_menu_back_to_menu$"),
        CallbackQueryHandler(gift_pick_handler, pattern="^gift_pick:\\d+$"),
        # —Å–≤–æ—è —Å—É–º–º–∞
        CallbackQueryHandler(donate_custom_start, pattern="^donate_custom$"),
        CallbackQueryHandler(amount_step_handler, pattern="^amount_step:(?:\\+|-)?\\d+$"),
        CallbackQueryHandler(amount_cancel_handler, pattern="^amount_cancel$"),
        CallbackQueryHandler(amount_pay_handler, pattern="^amount_pay$"),
        # –ø–ª–∞—Ç–µ–∂–∏
        PreCheckoutQueryHandler(precheckout_handler),
        MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler),
    ]
