# bot/handlers.py
import logging
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
from datetime import datetime, timedelta # timedelta –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è min_date
from collections import defaultdict

from . import config, keyboards, helpers, flight_api

logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
async def ask_departure_country(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(message_text, reply_markup=keyboards.get_country_reply_keyboard()) #
    elif hasattr(update, 'callback_query') and update.callback_query and update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=keyboards.get_country_reply_keyboard()) #
    else:
        logger.warning("ask_departure_country: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def ask_departure_city(update: Update, context: ContextTypes.DEFAULT_TYPE, country_name: str):
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:", reply_markup=keyboards.get_city_reply_keyboard(country_name)) #
    elif hasattr(update, 'callback_query') and update.callback_query and update.effective_chat:
         await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:", reply_markup=keyboards.get_city_reply_keyboard(country_name)) #

async def ask_arrival_country(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(message_text, reply_markup=keyboards.get_country_reply_keyboard()) #
    elif hasattr(update, 'callback_query') and update.callback_query and update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=keyboards.get_country_reply_keyboard()) #

async def ask_arrival_city(update: Update, context: ContextTypes.DEFAULT_TYPE, country_name: str):
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞:", reply_markup=keyboards.get_city_reply_keyboard(country_name)) #
    elif hasattr(update, 'callback_query') and update.callback_query and update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞:", reply_markup=keyboards.get_city_reply_keyboard(country_name)) #

async def ask_year(message_or_update: Update | object, context: ContextTypes.DEFAULT_TYPE, message_text: str, callback_prefix: str = ""):
    target_message_object = None
    if hasattr(message_or_update, 'callback_query') and message_or_update.callback_query:
        await message_or_update.callback_query.edit_message_text(
            text=message_text,
            reply_markup=keyboards.generate_year_buttons(callback_prefix) #
        )
        return
    elif hasattr(message_or_update, 'message') and message_or_update.message:
        target_message_object = message_or_update.message
    elif hasattr(message_or_update, 'reply_text'):
        target_message_object = message_or_update

    if target_message_object and hasattr(target_message_object, 'reply_text'):
        await target_message_object.reply_text(
            message_text,
            reply_markup=keyboards.generate_year_buttons(callback_prefix) #
        )
    elif hasattr(message_or_update, 'effective_chat') and message_or_update.effective_chat:
         await context.bot.send_message(
            chat_id=message_or_update.effective_chat.id,
            text=message_text,
            reply_markup=keyboards.generate_year_buttons(callback_prefix) #
        )
    else:
        logger.warning("ask_year: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

async def ask_month(update: Update, context: ContextTypes.DEFAULT_TYPE,
                  year_for_months: int, message_text: str, callback_prefix: str = "",
                  departure_year_for_comparison: int = None,
                  departure_month_for_comparison: int = None):
    await update.callback_query.edit_message_text(
        text=message_text,
        reply_markup=keyboards.generate_month_buttons( #
            callback_prefix=callback_prefix,
            year_for_months=year_for_months,
            min_departure_month=departure_month_for_comparison,  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            departure_year_for_comparison=departure_year_for_comparison  # –ò–°–ü–†–ê–í–õ–ï–ù–û
        )
    )

async def ask_date_range(update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, message_text: str, callback_prefix: str = ""):
    await update.callback_query.edit_message_text(
        text=message_text,
        reply_markup=keyboards.generate_date_range_buttons(year, month, callback_prefix) #
    )

async def ask_specific_date(update: Update, context: ContextTypes.DEFAULT_TYPE,
                            year: int, month: int, range_start: int, range_end: int,
                            message_text: str, callback_prefix: str = "",
                            min_allowed_date_for_comparison: datetime = None):
    await update.callback_query.edit_message_text(
        text=message_text,
        reply_markup=keyboards.generate_specific_date_buttons( #
            year, month, range_start, range_end,
            callback_prefix=callback_prefix,
            min_allowed_date=min_allowed_date_for_comparison
        )
    )

async def process_and_send_flights(update: Update, context: ContextTypes.DEFAULT_TYPE, flights_by_date: dict): #
    chat_id = update.effective_chat.id
    context.user_data.pop('remaining_flights_to_show', None)

    if not flights_by_date:
        await context.bot.send_message(chat_id=chat_id, text=config.MSG_NO_FLIGHTS_FOUND) #
        dep_country = context.user_data.get('departure_country')
        dep_airport_iata = context.user_data.get('departure_airport_iata')
        if dep_country and dep_airport_iata and config.COUNTRIES_DATA.get(dep_country) and \
           len(config.COUNTRIES_DATA[dep_country]) > 1: #
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–•–æ—Ç–∏—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤—ã–ª–µ—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –≤ —Å—Ç—Ä–∞–Ω–µ {dep_country} –ø–æ —ç—Ç–æ–º—É –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –¥–∞—Ç–∞–º?", #
                reply_markup=keyboards.get_search_other_airports_keyboard(dep_country) #
            )
            return config.ASK_SEARCH_OTHER_AIRPORTS #
        await context.bot.send_message(
            chat_id=chat_id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.get_yes_no_keyboard( #
                yes_callback="prompt_new_search_type", no_callback="end_search_session",
                yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
            )
        )
        return ConversationHandler.END

    else:
        await context.bot.send_message(chat_id=chat_id, text=config.MSG_FLIGHTS_FOUND_SEE_BELOW) #
        total_flights_shown_count = 0
        flights_message_parts = []
        sorted_dates = sorted(flights_by_date.keys())

        for flight_date_str in sorted_dates:
            flights_on_this_date = flights_by_date[flight_date_str]
            if not flights_on_this_date:
                continue
            try:
                date_obj = datetime.strptime(flight_date_str, "%Y-%m-%d")
                formatted_date_header = f"\n--- üìÖ *{date_obj.strftime('%d %B %Y (%A)')}* ---\n"
            except ValueError: # Fallback for "unknown_date" or other non-standard keys
                formatted_date_header = f"\n--- üìÖ *{flight_date_str}* ---\n"

            flights_message_parts.append(formatted_date_header)

            for i, flight in enumerate(flights_on_this_date):
                if i < config.FLIGHTS_CHUNK_SIZE: #
                    formatted_flight = helpers.format_flight_details(flight) #
                    flights_message_parts.append(formatted_flight)
                    total_flights_shown_count += 1
                else:
                    flights_message_parts.append(f"...–∏ –µ—â–µ {len(flights_on_this_date) - i} —Ä–µ–π—Å(–æ–≤) –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
                    break

            if not flights_message_parts[-1].endswith("—Ä–µ–π—Å(–æ–≤) –Ω–∞ —ç—Ç—É –¥–∞—Ç—É."):
                 flights_message_parts.append("\n")

        if flights_message_parts:
            full_message = "".join(flights_message_parts)
            max_length = 4096
            for i in range(0, len(full_message), max_length):
                await context.bot.send_message(chat_id=chat_id, text=full_message[i:i+max_length], parse_mode='Markdown')

        if total_flights_shown_count == 0 and any(flights_by_date.values()):
             await context.bot.send_message(chat_id=chat_id, text="–ù–∞–π–¥–µ–Ω—ã —Ä–µ–π—Å—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")

    await context.bot.send_message(
        chat_id=chat_id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=keyboards.get_yes_no_keyboard( #
            yes_callback="prompt_new_search_type", no_callback="end_search_session",
            yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
        )
    )
    context.user_data.clear()
    return ConversationHandler.END

async def show_all_remaining_flights_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ–π—Å–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.")

async def prompt_new_search_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.message:
      await query.edit_message_text(text=config.MSG_WELCOME, reply_markup=keyboards.get_main_menu_keyboard()) # [cite: 1]
    elif update.effective_chat:
      await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_WELCOME, reply_markup=keyboards.get_main_menu_keyboard()) # [cite: 1]

async def end_search_session_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.message:
      await query.edit_message_text(text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –º–µ–Ω—è –Ω–∞–π—Ç–∏! /start")
    elif update.effective_chat:
      await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –º–µ–Ω—è –Ω–∞–π—Ç–∏! /start")
    context.user_data.clear()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text(config.MSG_WELCOME, reply_markup=keyboards.get_main_menu_keyboard()) # [cite: 1]
    elif update.callback_query:
        await update.callback_query.answer()
        if update.callback_query.message:
            await update.callback_query.edit_message_text(config.MSG_WELCOME, reply_markup=keyboards.get_main_menu_keyboard()) # [cite: 1]
        elif update.effective_chat:
             await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_WELCOME, reply_markup=keyboards.get_main_menu_keyboard()) # [cite: 1]

async def start_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    if query.data == "start_standard_search":
        if query.message: await query.edit_message_text(text="–í—ã–±—Ä–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫.")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_FLIGHT_TYPE_PROMPT, reply_markup=keyboards.get_flight_type_reply_keyboard()) # [cite: 1]
        return config.SELECTING_FLIGHT_TYPE #
    elif query.data == "start_flex_search":
        if query.message: await query.edit_message_text(text="–í—ã–±—Ä–∞–Ω –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫.")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_FLIGHT_TYPE_PROMPT, reply_markup=keyboards.get_flight_type_reply_keyboard()) # [cite: 1]
        return config.SELECTING_FLEX_FLIGHT_TYPE #
    # NEW "–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ"
    elif query.data == "start_flex_anywhere": # Handler defined separately below
        return await start_flex_anywhere_callback(update, context)
    return ConversationHandler.END

async def start_flex_anywhere_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # query may not be present if called directly (though pattern suggests it's from callback)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.message:
            await query.edit_message_text(text="–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ \"–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ\".")
    else: # Should not happen with current setup but good for robustness
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ \"–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ\".")

    context.user_data.clear()
    context.user_data['arrival_airport_iata'] = None
    context.user_data['departure_date'] = None
    context.user_data['return_date'] = None

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=config.MSG_FLIGHT_TYPE_PROMPT, #
        reply_markup=keyboards.get_flight_type_reply_keyboard() #
    )
    return config.SELECTING_FLEX_FLIGHT_TYPE #

# --- –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ü–û–ò–°–ö ---
async def standard_flight_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    if user_input not in ['1', '2']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.", reply_markup=keyboards.get_flight_type_reply_keyboard()) #
        return config.SELECTING_FLIGHT_TYPE #
    context.user_data['flight_type_one_way'] = (user_input == '1')
    await ask_departure_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:")
    return config.SELECTING_DEPARTURE_COUNTRY #

async def standard_departure_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    country = update.message.text
    if country not in config.COUNTRIES_DATA: #
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_departure_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:")
        return config.SELECTING_DEPARTURE_COUNTRY #
    context.user_data['departure_country'] = country
    await ask_departure_city(update, context, country)
    return config.SELECTING_DEPARTURE_CITY #

async def standard_departure_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    country = context.user_data.get('departure_country')
    iata_code = helpers.get_airport_iata(country, city) #
    if not iata_code:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_departure_city(update, context, country)
        return config.SELECTING_DEPARTURE_CITY #
    context.user_data['departure_airport_iata'] = iata_code
    context.user_data['departure_city_name'] = city
    await ask_year(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_year_") #
    return config.SELECTING_DEPARTURE_YEAR #

async def standard_departure_year_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_year = int(query.data.replace(config.CALLBACK_PREFIX_STANDARD + "dep_year_", "")) #
    context.user_data['departure_year'] = selected_year
    await ask_month(update, context,
                  year_for_months=selected_year,
                  message_text=f"–ì–æ–¥ –≤—ã–ª–µ—Ç–∞: {selected_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                  callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_month_") #
    return config.SELECTING_DEPARTURE_MONTH #

async def standard_departure_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_month = int(query.data.replace(config.CALLBACK_PREFIX_STANDARD + "dep_month_", "")) #

    # –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∞)
    year = context.user_data['departure_year']
    now = datetime.now()
    if year == now.year and selected_month < now.month:
        await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü ({config.RUSSIAN_MONTHS[selected_month]}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü.") #
        await ask_month(update, context,
                      year_for_months=year,
                      message_text=f"–ì–æ–¥ –≤—ã–ª–µ—Ç–∞: {year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                      callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_month_") #
        return config.SELECTING_DEPARTURE_MONTH #

    context.user_data['departure_month'] = selected_month
    month_name = config.RUSSIAN_MONTHS.get(selected_month, "") #
    context.user_data['departure_month_name'] = month_name
    await ask_date_range(update, context, year, selected_month, f"–í—ã–±—Ä–∞–Ω: {month_name} {year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_range_") #
    return config.SELECTING_DEPARTURE_DATE_RANGE #

async def standard_departure_date_range_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_range_str = query.data.replace(config.CALLBACK_PREFIX_STANDARD + "dep_range_", "") #
    try:
        start_day, end_day = map(int, selected_range_str.split('-'))
        context.user_data['departure_date_range_str'] = selected_range_str
    except ValueError:
        await query.edit_message_text(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        year = context.user_data['departure_year']
        month = context.user_data['departure_month']
        month_name = config.RUSSIAN_MONTHS.get(month, "") #
        await ask_date_range(update, context, year, month, f"–í—ã–±—Ä–∞–Ω: {month_name} {year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_range_") #
        return config.SELECTING_DEPARTURE_DATE_RANGE #

    year = context.user_data['departure_year']
    month = context.user_data['departure_month']
    min_date_for_dep = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    await ask_specific_date(update, context, year, month, start_day, end_day,
                            f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                            callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_date_", #
                            min_allowed_date_for_comparison=min_date_for_dep)
    return config.SELECTING_DEPARTURE_DATE #

async def standard_departure_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_date_str = query.data.replace(config.CALLBACK_PREFIX_STANDARD + "dep_date_", "") #
    date_obj = helpers.validate_date_format(selected_date_str) #
    min_allowed_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

    if not date_obj or date_obj < min_allowed_date :
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        year = context.user_data['departure_year']
        month = context.user_data['departure_month']
        selected_range_str = context.user_data.get('departure_date_range_str', "1-10")
        try:
            start_day, end_day = map(int, selected_range_str.split('-'))
        except ValueError: start_day, end_day = 1, 10
        await ask_specific_date(update, context, year, month, start_day, end_day,
                                f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                                callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_date_", #
                                min_allowed_date_for_comparison=min_allowed_date)
        return config.SELECTING_DEPARTURE_DATE #

    context.user_data['departure_date'] = selected_date_str # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –ì–ì–ì–ì-–ú–ú-–î–î
    formatted_date = date_obj.strftime('%d-%m-%Y')
    await query.edit_message_text(text=f"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
    await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
    return config.SELECTING_ARRIVAL_COUNTRY #

async def standard_arrival_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    country = update.message.text
    if country not in config.COUNTRIES_DATA: #
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
        return config.SELECTING_ARRIVAL_COUNTRY #
    departure_airport_iata = context.user_data.get('departure_airport_iata')
    if departure_airport_iata and country in config.COUNTRIES_DATA and len(config.COUNTRIES_DATA[country]) == 1: #
        single_city_name = list(config.COUNTRIES_DATA[country].keys())[0] #
        single_airport_iata = helpers.get_airport_iata(country, single_city_name) #
        if single_airport_iata == departure_airport_iata:
            await update.message.reply_text(
                f"–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤ —Å—Ç—Ä–∞–Ω–µ \"{country}\" ({single_city_name}) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –≤—ã–ª–µ—Ç–∞. "
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞."
            )
            await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
            return config.SELECTING_ARRIVAL_COUNTRY #
    context.user_data['arrival_country'] = country
    await ask_arrival_city(update, context, country)
    return config.SELECTING_ARRIVAL_CITY #

async def standard_arrival_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    country = context.user_data.get('arrival_country')
    iata_code = helpers.get_airport_iata(country, city) #
    if not iata_code:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_arrival_city(update, context, country)
        return config.SELECTING_ARRIVAL_CITY #
    if iata_code == context.user_data.get('departure_airport_iata'):
        await update.message.reply_text("–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –≤—ã–ª–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        await ask_arrival_city(update, context, country)
        return config.SELECTING_ARRIVAL_CITY #
    context.user_data['arrival_airport_iata'] = iata_code
    context.user_data['arrival_city_name'] = city
    if context.user_data.get('flight_type_one_way', True):
        await update.message.reply_text(config.MSG_MAX_PRICE_PROMPT, reply_markup=ReplyKeyboardRemove()) #
        return config.SELECTING_MAX_PRICE #
    else:
        await ask_year(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_year_") #
        return config.SELECTING_RETURN_YEAR #

async def standard_return_year_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_return_year = int(query.data.replace(config.CALLBACK_PREFIX_STANDARD + "ret_year_", "")) #

    departure_year = context.user_data.get('departure_year')
    if selected_return_year < departure_year:
        await query.edit_message_text(text=f"–ì–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ ({selected_return_year}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≥–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ ({departure_year}).")
        await ask_year(query, context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_year_") #
        return config.SELECTING_RETURN_YEAR #

    context.user_data['return_year'] = selected_return_year
    departure_month = context.user_data.get('departure_month')
    await ask_month(update, context,
                  year_for_months=selected_return_year,
                  message_text=f"–ì–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {selected_return_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                  callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_month_", #
                  departure_year_for_comparison=departure_year,
                  departure_month_for_comparison=departure_month)
    return config.SELECTING_RETURN_MONTH #

async def standard_return_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_return_month = int(query.data.replace(config.CALLBACK_PREFIX_STANDARD + "ret_month_", "")) #

    return_year = context.user_data['return_year']
    departure_year = context.user_data['departure_year']
    departure_month = context.user_data['departure_month']

    if return_year == departure_year and selected_return_month < departure_month:
        await query.edit_message_text(text=f"–ú–µ—Å—è—Ü –≤–æ–∑–≤—Ä–∞—Ç–∞ ({config.RUSSIAN_MONTHS[selected_return_month]}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –º–µ—Å—è—Ü–∞ –≤—ã–ª–µ—Ç–∞ ({config.RUSSIAN_MONTHS[departure_month]} {departure_year}).") #
        await ask_month(update, context,
                      year_for_months=return_year,
                      message_text=f"–ì–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {return_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                      callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_month_", #
                      departure_year_for_comparison=departure_year,
                      departure_month_for_comparison=departure_month)
        return config.SELECTING_RETURN_MONTH #

    context.user_data['return_month'] = selected_return_month
    month_name = config.RUSSIAN_MONTHS.get(selected_return_month, "") #
    context.user_data['return_month_name'] = month_name
    await ask_date_range(update, context, return_year, selected_return_month, f"–í—ã–±—Ä–∞–Ω: {month_name} {return_year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_range_") #
    return config.SELECTING_RETURN_DATE_RANGE #

async def standard_return_date_range_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_range_str = query.data.replace(config.CALLBACK_PREFIX_STANDARD + "ret_range_", "") #
    try:
        start_day, end_day = map(int, selected_range_str.split('-'))
        context.user_data['return_date_range_str'] = selected_range_str
    except ValueError:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –∑–∞–Ω–æ–≤–æ.")
        year = context.user_data['return_year']
        # month_name = context.user_data.get('return_month_name', "")
        departure_year = context.user_data.get('departure_year')
        departure_month = context.user_data.get('departure_month')
        await ask_month(update, context,
                        year_for_months=year,
                        message_text=f"–ì–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                        callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_month_", #
                        departure_year_for_comparison=departure_year,
                        departure_month_for_comparison=departure_month)
        return config.SELECTING_RETURN_MONTH #

    year = context.user_data['return_year']
    month = context.user_data['return_month']
    departure_date_str = context.user_data.get('departure_date')
    min_date_for_return = None
    if departure_date_str:
        min_date_for_return = helpers.validate_date_format(departure_date_str) #
        if not min_date_for_return: # Should not happen if departure_date is always valid
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {departure_date_str}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞—Ç–æ–π –≤—ã–ª–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /start.")
            context.user_data.clear()
            return ConversationHandler.END

    await ask_specific_date(update, context, year, month, start_day, end_day,
                            f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                            callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_date_", #
                            min_allowed_date_for_comparison=min_date_for_return)
    return config.SELECTING_RETURN_DATE #

async def standard_return_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_date_str = query.data.replace(config.CALLBACK_PREFIX_STANDARD + "ret_date_", "") #
    return_date_obj = helpers.validate_date_format(selected_date_str) #
    departure_date_obj = helpers.validate_date_format(context.user_data.get('departure_date')) #

    if not return_date_obj or not departure_date_obj or return_date_obj < departure_date_obj:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –æ–Ω–∞ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        year = context.user_data['return_year']
        month = context.user_data['return_month']
        selected_range_str = context.user_data.get('return_date_range_str', "1-10")
        try:
            start_day, end_day = map(int, selected_range_str.split('-'))
        except ValueError: start_day, end_day = 1, 10
        await ask_specific_date(update, context, year, month, start_day, end_day,
                                f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                                callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_date_", #
                                min_allowed_date_for_comparison=departure_date_obj)
        return config.SELECTING_RETURN_DATE #

    context.user_data['return_date'] = selected_date_str
    formatted_date = return_date_obj.strftime('%d-%m-%Y')
    await query.edit_message_text(text=f"–î–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
    await query.message.reply_text(config.MSG_MAX_PRICE_PROMPT, reply_markup=ReplyKeyboardRemove()) #
    return config.SELECTING_MAX_PRICE #

async def standard_max_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price = helpers.validate_price(update.message.text) #
    if price is None:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 50:")
        return config.SELECTING_MAX_PRICE #
    context.user_data['max_price'] = price
    await update.message.reply_text(config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove()) #
    flights_by_date = await flight_api.find_flights_with_fallback( #
        departure_airport_iata=context.user_data['departure_airport_iata'],
        arrival_airport_iata=context.user_data['arrival_airport_iata'],
        departure_date_str=context.user_data['departure_date'],
        max_price=context.user_data['max_price'],
        return_date_str=context.user_data.get('return_date'),
        is_one_way=context.user_data.get('flight_type_one_way', True)
    )
    return await process_and_send_flights(update, context, flights_by_date)

# --- –ì–ò–ë–ö–ò–ô –ü–û–ò–°–ö ---
# (–ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è flex_* —Ñ—É–Ω–∫—Ü–∏–π, –∫–∞—Å–∞—é—â–∏—Ö—Å—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∏ –º–µ—Å—è—Ü–µ–≤)

async def flex_flight_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    if user_input not in ['1', '2']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.", reply_markup=keyboards.get_flight_type_reply_keyboard()) #
        return config.SELECTING_FLEX_FLIGHT_TYPE #
    context.user_data['flight_type_one_way'] = (user_input == '1')
    await update.message.reply_text(config.MSG_MAX_PRICE_PROMPT, reply_markup=ReplyKeyboardRemove()) #
    return config.SELECTING_FLEX_MAX_PRICE #

async def flex_max_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price = helpers.validate_price(update.message.text) #
    if price is None:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 50:")
        return config.SELECTING_FLEX_MAX_PRICE #
    context.user_data['max_price'] = price
    await update.message.reply_text(
        "–£–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞?",
        reply_markup=keyboards.get_yes_no_keyboard( #
            yes_callback=config.CALLBACK_PREFIX_FLEX + "ask_dep_yes", #
            no_callback=config.CALLBACK_PREFIX_FLEX + "ask_dep_no" #
        )
    )
    return config.ASK_FLEX_DEPARTURE_AIRPORT #

async def flex_ask_departure_airport(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == config.CALLBACK_PREFIX_FLEX + "ask_dep_yes": #
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞: –î–ê")
        await ask_departure_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:")
        return config.SELECTING_FLEX_DEPARTURE_COUNTRY #
    else:
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞: –ù–ï–¢ (–ø—Ä–æ–ø—É—â–µ–Ω–æ).")
        context.user_data['departure_airport_iata'] = None
        logger.info("–ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞.")
        if context.user_data.get('arrival_airport_iata') is None: # "–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ" –ø–æ—Ç–æ–∫
            if query.message: await query.message.reply_text(
                "–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
                reply_markup=keyboards.get_skip_dates_keyboard( #
                    callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes" #
                ))
            return config.ASK_FLEX_DATES #
        if query.message: await query.message.reply_text(
            "–£–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞?",
            reply_markup=keyboards.get_yes_no_keyboard( #
                yes_callback=config.CALLBACK_PREFIX_FLEX + "ask_arr_yes", #
                no_callback=config.CALLBACK_PREFIX_FLEX + "ask_arr_no" #
            ))
        return config.ASK_FLEX_ARRIVAL_AIRPORT #

async def flex_departure_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_departure_country)
    country = update.message.text
    if country not in config.COUNTRIES_DATA: #
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_departure_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:")
        return config.SELECTING_FLEX_DEPARTURE_COUNTRY #
    context.user_data['departure_country'] = country
    await ask_departure_city(update, context, country)
    return config.SELECTING_FLEX_DEPARTURE_CITY #

async def flex_departure_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_departure_city)
    city = update.message.text
    country = context.user_data.get('departure_country')
    iata_code = helpers.get_airport_iata(country, city) #
    if not iata_code:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_departure_city(update, context, country)
        return config.SELECTING_FLEX_DEPARTURE_CITY #
    context.user_data['departure_airport_iata'] = iata_code
    context.user_data['departure_city_name'] = city
    if context.user_data.get('arrival_airport_iata') is None: # "–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ"
        await update.message.reply_text(
            "–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
            reply_markup=keyboards.get_skip_dates_keyboard( #
                callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes" #
            ))
        return config.ASK_FLEX_DATES #
    await update.message.reply_text(
        "–£–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞?",
        reply_markup=keyboards.get_yes_no_keyboard( #
            yes_callback=config.CALLBACK_PREFIX_FLEX + "ask_arr_yes", #
            no_callback=config.CALLBACK_PREFIX_FLEX + "ask_arr_no" #
        ))
    return config.ASK_FLEX_ARRIVAL_AIRPORT #

async def flex_ask_arrival_airport(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if context.user_data.get('arrival_airport_iata') is None and context.user_data.get('departure_date') is None: # "–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ"
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞: –õ—é–±–æ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
        await context.bot.send_message(chat_id=update.effective_chat.id,
            text="–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
            reply_markup=keyboards.get_skip_dates_keyboard( #
                callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes" #
            ))
        return config.ASK_FLEX_DATES #
    if query.data == config.CALLBACK_PREFIX_FLEX + "ask_arr_yes": #
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞: –î–ê")
        await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
        return config.SELECTING_FLEX_ARRIVAL_COUNTRY #
    else: # ask_arr_no
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞: –ù–ï–¢ (–ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)")
        context.user_data['arrival_airport_iata'] = None
        if context.user_data.get('departure_airport_iata') is None:
             msg = "–û—à–∏–±–∫–∞: –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ '–≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'. –ù–∞—á–Ω–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ."
             if query.message: await query.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())
             else: await context.bot.send_message(chat_id=update.effective_chat.id, text=msg, reply_markup=ReplyKeyboardRemove())
             context.user_data.clear()
             return ConversationHandler.END
        await context.bot.send_message(chat_id=update.effective_chat.id,
            text="–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
            reply_markup=keyboards.get_skip_dates_keyboard( #
                callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes" #
            ))
        return config.ASK_FLEX_DATES #

async def flex_arrival_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_arrival_country)
    country = update.message.text
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if country not in config.COUNTRIES_DATA: # –ü—Ä–∏–º–µ—Ä #
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return config.SELECTING_FLEX_ARRIVAL_COUNTRY #
    context.user_data['arrival_country'] = country
    await ask_arrival_city(update, context, country)
    return config.SELECTING_FLEX_ARRIVAL_CITY #


async def flex_arrival_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_arrival_city)
    city = update.message.text # –ü—Ä–∏–º–µ—Ä
    country = context.user_data.get('arrival_country')
    iata_code = helpers.get_airport_iata(country, city) #
    if not iata_code:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return config.SELECTING_FLEX_ARRIVAL_CITY #
    if context.user_data.get('departure_airport_iata') and iata_code == context.user_data['departure_airport_iata']:
        await update.message.reply_text("–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return config.SELECTING_FLEX_ARRIVAL_CITY #
    context.user_data['arrival_airport_iata'] = iata_code
    context.user_data['arrival_city_name'] = city
    if context.user_data.get('departure_date') is None: # "–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ"
        await update.message.reply_text(config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove()) #
        # ... (–≤—ã–∑–æ–≤ flight_api)
        flights_by_date = await flight_api.find_flights_with_fallback( #
            departure_airport_iata=context.user_data.get('departure_airport_iata'),
            arrival_airport_iata=context.user_data.get('arrival_airport_iata'),
            departure_date_str=None, max_price=context.user_data['max_price'],
            return_date_str=None, is_one_way=context.user_data.get('flight_type_one_way', True)
        )
        return await process_and_send_flights(update, context, flights_by_date)
    await update.message.reply_text(
        "–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
        reply_markup=keyboards.get_skip_dates_keyboard( #
            callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes" #
        ))
    return config.ASK_FLEX_DATES #

async def flex_ask_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    departure_airport_is_set = context.user_data.get('departure_airport_iata') is not None
    if query.data == config.CALLBACK_PREFIX_FLEX + "ask_dates_yes": #
        if query.message: await query.edit_message_text(text="–î–∞—Ç—ã: –î–ê, —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ.")
        await ask_year(query, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_year_") #
        return config.SELECTING_FLEX_DEPARTURE_YEAR #
    elif query.data == config.CALLBACK_NO_SPECIFIC_DATES: #
        if query.message: await query.edit_message_text(text="–î–∞—Ç—ã: –ù–ï–¢, –∏—Å–∫–∞—Ç—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥.")
        context.user_data['departure_date'] = None
        context.user_data['return_date'] = None
        if not departure_airport_is_set and context.user_data.get('arrival_airport_iata') is not None : # –ï—Å–ª–∏ –Ω–µ "–∫—É–¥–∞ —É–≥–æ–¥–Ω–æ" –∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤—ã–ª–µ—Ç
            msg_text = ("–û—à–∏–±–∫–∞: –î–ª—è –ø–æ–∏—Å–∫–∞ –±–µ–∑ –¥–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ /start.")
            if query.message: await query.edit_message_text(text=msg_text, reply_markup=None)
            else: await context.bot.send_message(chat_id=update.effective_chat.id, text=msg_text, reply_markup=ReplyKeyboardRemove())
            context.user_data.clear()
            return ConversationHandler.END
        await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove()) #
        flights_by_date = await flight_api.find_flights_with_fallback( #
            departure_airport_iata=context.user_data.get('departure_airport_iata'),
            arrival_airport_iata=context.user_data.get('arrival_airport_iata'),
            departure_date_str=None, max_price=context.user_data['max_price'],
            return_date_str=None, is_one_way=context.user_data.get('flight_type_one_way', True)
        )
        return await process_and_send_flights(update, context, flights_by_date)
    return config.ASK_FLEX_DATES #

async def flex_departure_year_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_departure_year_selected
    query = update.callback_query
    await query.answer()
    selected_year = int(query.data.replace(config.CALLBACK_PREFIX_FLEX + "dep_year_", "")) #
    context.user_data['departure_year'] = selected_year
    await ask_month(update, context,
                  year_for_months=selected_year,
                  message_text=f"–ì–æ–¥ –≤—ã–ª–µ—Ç–∞: {selected_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                  callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_month_") #
    return config.SELECTING_FLEX_DEPARTURE_MONTH #

async def flex_departure_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_departure_month_selected
    query = update.callback_query
    await query.answer()
    selected_month = int(query.data.replace(config.CALLBACK_PREFIX_FLEX + "dep_month_", "")) #
    year = context.user_data['departure_year']
    now = datetime.now()
    if year == now.year and selected_month < now.month:
        await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü ({config.RUSSIAN_MONTHS[selected_month]}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü.") #
        await ask_month(update, context, year, f"–ì–æ–¥ –≤—ã–ª–µ—Ç–∞: {year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_month_") #
        return config.SELECTING_FLEX_DEPARTURE_MONTH #
    context.user_data['departure_month'] = selected_month
    month_name = config.RUSSIAN_MONTHS.get(selected_month, "") #
    context.user_data['departure_month_name'] = month_name
    await ask_date_range(update, context, year, selected_month, f"–í—ã–±—Ä–∞–Ω: {month_name} {year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_range_") #
    return config.SELECTING_FLEX_DEPARTURE_DATE_RANGE #

async def flex_departure_date_range_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_departure_date_range_selected
    query = update.callback_query
    await query.answer()
    selected_range_str = query.data.replace(config.CALLBACK_PREFIX_FLEX + "dep_range_", "") #
    # ... (–ª–æ–≥–∏–∫–∞ start_day, end_day)
    try: start_day, end_day = map(int, selected_range_str.split('-'))
    except ValueError: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ...
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        return config.SELECTING_FLEX_DEPARTURE_DATE_RANGE # –ü—Ä–∏–º–µ—Ä #
    context.user_data['departure_date_range_str'] = selected_range_str
    year = context.user_data['departure_year']
    month = context.user_data['departure_month']
    min_date_for_dep = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    await ask_specific_date(update, context, year, month, start_day, end_day,
                            f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                            callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_date_", #
                            min_allowed_date_for_comparison=min_date_for_dep)
    return config.SELECTING_FLEX_DEPARTURE_DATE #

async def flex_departure_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_departure_date_selected
    query = update.callback_query
    await query.answer()
    selected_date_str = query.data.replace(config.CALLBACK_PREFIX_FLEX + "dep_date_", "") #
    date_obj = helpers.validate_date_format(selected_date_str) #
    min_allowed_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    if not date_obj or date_obj < min_allowed_date :
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # ... (–ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        year, month = context.user_data['departure_year'], context.user_data['departure_month']
        s_range = context.user_data.get('departure_date_range_str', "1-10")
        try: start_day, end_day = map(int, s_range.split('-'))
        except: start_day, end_day = 1,10
        await ask_specific_date(update, context, year, month, start_day, end_day, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                                callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_date_", #
                                min_allowed_date_for_comparison=min_allowed_date)
        return config.SELECTING_FLEX_DEPARTURE_DATE #
    context.user_data['departure_date'] = selected_date_str
    formatted_date = date_obj.strftime('%d-%m-%Y')
    if context.user_data.get('flight_type_one_way', True):
        if query.message: await query.edit_message_text(text=f"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove()) #
        flights_by_date = await flight_api.find_flights_with_fallback( #
            departure_airport_iata=context.user_data.get('departure_airport_iata'),
            arrival_airport_iata=context.user_data.get('arrival_airport_iata'),
            departure_date_str=context.user_data['departure_date'],
            max_price=context.user_data['max_price'], is_one_way=True)
        return await process_and_send_flights(update, context, flights_by_date)
    else:
        if query.message: await query.edit_message_text(text=f"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
        await ask_year(query, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_year_") #
        return config.SELECTING_FLEX_RETURN_YEAR #

async def flex_return_year_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_return_year_selected
    query = update.callback_query
    await query.answer()
    selected_return_year = int(query.data.replace(config.CALLBACK_PREFIX_FLEX + "ret_year_", "")) #
    departure_year = context.user_data.get('departure_year')
    if selected_return_year < departure_year: # –ü—Ä–æ–≤–µ—Ä–∫–∞
        await query.edit_message_text(f"–ì–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ ({selected_return_year}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≥–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ ({departure_year}).")
        await ask_year(query, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_year_") #
        return config.SELECTING_FLEX_RETURN_YEAR #
    context.user_data['return_year'] = selected_return_year
    departure_month = context.user_data.get('departure_month')
    await ask_month(update, context, selected_return_year, f"–ì–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {selected_return_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                  callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_month_", #
                  departure_year_for_comparison=departure_year,
                  departure_month_for_comparison=departure_month)
    return config.SELECTING_FLEX_RETURN_MONTH #

async def flex_return_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_return_month_selected
    query = update.callback_query
    await query.answer()
    selected_return_month = int(query.data.replace(config.CALLBACK_PREFIX_FLEX + "ret_month_", "")) #
    return_year, dep_year, dep_month = context.user_data['return_year'], context.user_data['departure_year'], context.user_data['departure_month']
    if return_year == dep_year and selected_return_month < dep_month: # –ü—Ä–æ–≤–µ—Ä–∫–∞
        await query.edit_message_text(f"–ú–µ—Å—è—Ü –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –º–µ—Å—è—Ü–∞ –≤—ã–ª–µ—Ç–∞ –≤ —Ç–æ–º –∂–µ –≥–æ–¥—É.")
        await ask_month(update, context, return_year, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_month_", #
                        departure_year_for_comparison=dep_year, departure_month_for_comparison=dep_month)
        return config.SELECTING_FLEX_RETURN_MONTH #
    context.user_data['return_month'] = selected_return_month
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–µ)
    month_name = config.RUSSIAN_MONTHS.get(selected_return_month, "") #
    context.user_data['return_month_name'] = month_name
    await ask_date_range(update, context, return_year, selected_return_month, f"–í—ã–±—Ä–∞–Ω: {month_name} {return_year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_range_") #
    return config.SELECTING_FLEX_RETURN_DATE_RANGE #


async def flex_return_date_range_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_return_date_range_selected
    query = update.callback_query
    await query.answer()
    selected_range_str = query.data.replace(config.CALLBACK_PREFIX_FLEX + "ret_range_", "") #
    # ... (–ª–æ–≥–∏–∫–∞ start_day, end_day)
    try: start_day, end_day = map(int, selected_range_str.split('-'))
    except ValueError: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ...
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        return config.SELECTING_FLEX_RETURN_DATE_RANGE # –ü—Ä–∏–º–µ—Ä #
    context.user_data['return_date_range_str'] = selected_range_str
    year, month = context.user_data['return_year'], context.user_data['return_month']
    departure_date_str = context.user_data.get('departure_date')
    min_date_for_return = helpers.validate_date_format(departure_date_str) if departure_date_str else None #
    if departure_date_str and not min_date_for_return:
        logger.error("Flex return: departure_date parsing failed.") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        await query.edit_message_text("–û—à–∏–±–∫–∞ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    await ask_specific_date(update, context, year, month, start_day, end_day,
                            f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                            callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_date_", #
                            min_allowed_date_for_comparison=min_date_for_return)
    return config.SELECTING_FLEX_RETURN_DATE #

async def flex_return_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ standard_return_date_selected
    query = update.callback_query
    await query.answer()
    selected_date_str = query.data.replace(config.CALLBACK_PREFIX_FLEX + "ret_date_", "") #
    return_date_obj = helpers.validate_date_format(selected_date_str) #
    departure_date_obj = helpers.validate_date_format(context.user_data.get('departure_date')) #
    if not return_date_obj or not departure_date_obj or return_date_obj < departure_date_obj:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –æ–Ω–∞ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # ... (–ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        year, month = context.user_data['return_year'], context.user_data['return_month']
        s_range = context.user_data.get('return_date_range_str', "1-10")
        try: start_day, end_day = map(int, s_range.split('-'))
        except: start_day, end_day = 1,10
        await ask_specific_date(update, context, year, month, start_day, end_day, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                                callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_date_", #
                                min_allowed_date_for_comparison=departure_date_obj)
        return config.SELECTING_FLEX_RETURN_DATE #
    context.user_data['return_date'] = selected_date_str
    formatted_date = return_date_obj.strftime('%d-%m-%Y')
    if query.message: await query.edit_message_text(text=f"–î–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove()) #
    flights_by_date = await flight_api.find_flights_with_fallback( #
        departure_airport_iata=context.user_data.get('departure_airport_iata'),
        arrival_airport_iata=context.user_data.get('arrival_airport_iata'),
        departure_date_str=context.user_data['departure_date'],
        max_price=context.user_data['max_price'],
        return_date_str=context.user_data['return_date'], is_one_way=False)
    return await process_and_send_flights(update, context, flights_by_date)

async def handle_search_other_airports_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == config.CALLBACK_YES_OTHER_AIRPORTS: #
        # ... (–ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–¥–µ—Å—å)
        departure_country = context.user_data.get('departure_country')
        original_departure_iata = context.user_data.get('departure_airport_iata')
        if not departure_country or not original_departure_iata: # defensive
            await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return ConversationHandler.END
        await query.edit_message_text(text=f"–ò—â—É —Ä–µ–π—Å—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –≤ {departure_country}...")
        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        all_airports_in_country = config.COUNTRIES_DATA.get(departure_country, {}) #
        alternative_airports = { city: iata for city, iata in all_airports_in_country.items() if iata != original_departure_iata }
        if not alternative_airports:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í —Å—Ç—Ä–∞–Ω–µ {departure_country} –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤.")
            # ... (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞)
            return ConversationHandler.END
        # --- –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞–º ---
        found_alternative_flights = False
        all_alternative_flights_by_date = defaultdict(list)

        original_search_params = {
            "arrival_airport_iata": context.user_data.get('arrival_airport_iata'),
            "departure_date_str": context.user_data.get('departure_date'),
            "max_price": context.user_data['max_price'],
            "return_date_str": context.user_data.get('return_date'),
            "is_one_way": context.user_data.get('flight_type_one_way', True)
        }

        for city, iata_code in alternative_airports.items():
            logger.info(f"–ü–æ–∏—Å–∫ –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞: {city} ({iata_code})")
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ò—â—É –∏–∑ {city} ({iata_code})...")
            flights_from_alt_airport_by_date = await flight_api.find_flights_with_fallback( #
                departure_airport_iata=iata_code,
                **original_search_params
            )
            if flights_from_alt_airport_by_date:
                found_alternative_flights = True
                for date_str, flights_list in flights_from_alt_airport_by_date.items():
                    all_alternative_flights_by_date[f"{city} ({iata_code}) - {date_str}"].extend(flights_list) # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å –≥–æ—Ä–æ–¥–æ–º

        if found_alternative_flights:
            # –í–∞–∂–Ω–æ: process_and_send_flights –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–∏—Å–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤,
            # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ—Ç. –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∞, –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–π user_data –∏–ª–∏ —Ñ–ª–∞–≥.
            # –ù–æ –ø—Ä–æ—â–µ —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.
            # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è process_and_send_flights
            # –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è.
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–µ–º —á–µ—Ä–µ–∑ process_and_send_flights, –æ—Å–æ–∑–Ω–∞–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–Ω–æ–≤–∞.
            # –ò–ª–∏, –ª—É—á—à–µ, –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å process_and_send_flights, –∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å.
            
            # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–∞—Ö ---
            alt_flights_message_parts = [f"–ù–∞–π–¥–µ–Ω—ã —Ä–µ–π—Å—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –≤ {departure_country}:\n"]
            for source_and_date, flights_on_date in all_alternative_flights_by_date.items():
                date_obj = datetime.strptime(source_and_date.split(" - ")[-1], "%Y-%m-%d")
                formatted_date_header = f"\n--- ‚úàÔ∏è –í—ã–ª–µ—Ç –∏–∑ {source_and_date.split(' - ')[0]}, üìÖ *{date_obj.strftime('%d %B %Y (%A)')}* ---\n"
                alt_flights_message_parts.append(formatted_date_header)
                for i, flight in enumerate(flights_on_date):
                    if i < config.FLIGHTS_CHUNK_SIZE: #
                        alt_flights_message_parts.append(helpers.format_flight_details(flight)) #
                    else:
                        alt_flights_message_parts.append(f"...–∏ –µ—â–µ {len(flights_on_date) - i} —Ä–µ–π—Å(–æ–≤) –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –∏–∑ {source_and_date.split(' - ')[0]}.\n")
                        break
                if not alt_flights_message_parts[-1].endswith("—Ä–µ–π—Å(–æ–≤) –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.\n"):
                    alt_flights_message_parts.append("\n")
            
            full_alt_message = "".join(alt_flights_message_parts)
            max_length = 4096
            for i in range(0, len(full_alt_message), max_length):
                await context.bot.send_message(chat_id=update.effective_chat.id, text=full_alt_message[i:i+max_length], parse_mode='Markdown')
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=keyboards.get_yes_no_keyboard( #
                    yes_callback="prompt_new_search_type", no_callback="end_search_session",
                    yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
                )
            )
            context.user_data.clear() # –û—á–∏—â–∞–µ–º user_data –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞
            return ConversationHandler.END
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ò–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –≤ {departure_country} —Ç–∞–∫–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        # --- –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ ---

        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.get_yes_no_keyboard( #
                yes_callback="prompt_new_search_type", no_callback="end_search_session",
                yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
            )
        )
        context.user_data.clear()
        return ConversationHandler.END


    elif query.data == config.CALLBACK_NO_OTHER_AIRPORTS: #
        await query.edit_message_text(text="–ü–æ–Ω—è–ª. –ü–æ–∏—Å–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.get_yes_no_keyboard( #
                yes_callback="prompt_new_search_type", no_callback="end_search_session",
                yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
            ))
        context.user_data.clear()
        return ConversationHandler.END
    return config.ASK_SEARCH_OTHER_AIRPORTS #

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message_to_send = config.MSG_CANCELLED #
    reply_markup_to_send = ReplyKeyboardRemove()
    chat_id_to_send = update.effective_chat.id
    if update.callback_query:
        await update.callback_query.answer()
        if update.callback_query.message:
            try: await update.callback_query.edit_message_text(text=message_to_send)
            except Exception:
                if chat_id_to_send: await context.bot.send_message(chat_id=chat_id_to_send, text=message_to_send, reply_markup=reply_markup_to_send)
        elif chat_id_to_send: await context.bot.send_message(chat_id=chat_id_to_send, text=message_to_send, reply_markup=reply_markup_to_send)
    elif update.message and chat_id_to_send:
        await update.message.reply_text(message_to_send, reply_markup=reply_markup_to_send)
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler_conv(update: Update | None, context: ContextTypes.DEFAULT_TYPE) -> int | None:
    logger.error(f"–û—à–∏–±–∫–∞ –≤ ConversationHandler: {context.error}", exc_info=context.error)
    chat_id_to_send_error = None
    if update and hasattr(update, 'effective_chat') and update.effective_chat:
        chat_id_to_send_error = update.effective_chat.id
    if chat_id_to_send_error:
        try:
            await context.bot.send_message(
                chat_id=chat_id_to_send_error,
                text=config.MSG_ERROR_OCCURRED + " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.", #
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    if context.user_data: context.user_data.clear()
    return ConversationHandler.END

def create_conversation_handler() -> ConversationHandler:
    std_dep_year_pattern = f"^{config.CALLBACK_PREFIX_STANDARD}dep_year_" #
    flex_dep_year_pattern = f"^{config.CALLBACK_PREFIX_FLEX}dep_year_" #
    flex_ret_year_pattern = f"^{config.CALLBACK_PREFIX_FLEX}ret_year_" #
    flex_ret_date_pattern = f"^{config.CALLBACK_PREFIX_FLEX}ret_date_" #

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start_command),
            CallbackQueryHandler(start_search_callback, pattern='^start_standard_search$|^start_flex_search$'),
            CallbackQueryHandler(start_flex_anywhere_callback, pattern='^start_flex_anywhere$')
        ],
        states={
            config.SELECTING_FLIGHT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_flight_type)], #
            config.SELECTING_DEPARTURE_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_departure_country)], #
            config.SELECTING_DEPARTURE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_departure_city)], #
            config.SELECTING_DEPARTURE_YEAR: [CallbackQueryHandler(standard_departure_year_selected, pattern=std_dep_year_pattern)], #
            config.SELECTING_DEPARTURE_MONTH: [CallbackQueryHandler(standard_departure_month_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}dep_month_")], #
            config.SELECTING_DEPARTURE_DATE_RANGE: [CallbackQueryHandler(standard_departure_date_range_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}dep_range_")], #
            config.SELECTING_DEPARTURE_DATE: [CallbackQueryHandler(standard_departure_date_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}dep_date_")], #
            config.SELECTING_ARRIVAL_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_arrival_country)], #
            config.SELECTING_ARRIVAL_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_arrival_city)], #
            config.SELECTING_RETURN_YEAR: [CallbackQueryHandler(standard_return_year_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}ret_year_")], #
            config.SELECTING_RETURN_MONTH: [CallbackQueryHandler(standard_return_month_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}ret_month_")], #
            config.SELECTING_RETURN_DATE_RANGE: [CallbackQueryHandler(standard_return_date_range_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}ret_range_")], #
            config.SELECTING_RETURN_DATE: [CallbackQueryHandler(standard_return_date_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}ret_date_")], #
            config.SELECTING_MAX_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_max_price)], #

            config.SELECTING_FLEX_FLIGHT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_flight_type)], #
            config.SELECTING_FLEX_MAX_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_max_price)], #
            config.ASK_FLEX_DEPARTURE_AIRPORT: [CallbackQueryHandler(flex_ask_departure_airport, pattern=f"^{config.CALLBACK_PREFIX_FLEX}ask_dep_")], #
            config.SELECTING_FLEX_DEPARTURE_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_departure_country)], #
            config.SELECTING_FLEX_DEPARTURE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_departure_city)], #
            config.ASK_FLEX_ARRIVAL_AIRPORT: [CallbackQueryHandler(flex_ask_arrival_airport, pattern=f"^{config.CALLBACK_PREFIX_FLEX}ask_arr_")], #
            config.SELECTING_FLEX_ARRIVAL_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_arrival_country)], #
            config.SELECTING_FLEX_ARRIVAL_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_arrival_city)], #
            config.ASK_FLEX_DATES: [CallbackQueryHandler(flex_ask_dates, pattern=f"^(?:{config.CALLBACK_PREFIX_FLEX}ask_dates_yes|{config.CALLBACK_NO_SPECIFIC_DATES})$")], #
            config.SELECTING_FLEX_DEPARTURE_YEAR: [CallbackQueryHandler(flex_departure_year_selected, pattern=flex_dep_year_pattern)], #
            config.SELECTING_FLEX_DEPARTURE_MONTH: [CallbackQueryHandler(flex_departure_month_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}dep_month_")], #
            config.SELECTING_FLEX_DEPARTURE_DATE_RANGE: [CallbackQueryHandler(flex_departure_date_range_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}dep_range_")], #
            config.SELECTING_FLEX_DEPARTURE_DATE: [CallbackQueryHandler(flex_departure_date_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}dep_date_")], #
            config.SELECTING_FLEX_RETURN_YEAR: [CallbackQueryHandler(flex_return_year_selected, pattern=flex_ret_year_pattern)], #
            config.SELECTING_FLEX_RETURN_MONTH: [CallbackQueryHandler(flex_return_month_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}ret_month_")], #
            config.SELECTING_FLEX_RETURN_DATE_RANGE: [CallbackQueryHandler(flex_return_date_range_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}ret_range_")], #
            config.SELECTING_FLEX_RETURN_DATE: [CallbackQueryHandler(flex_return_date_selected, pattern=flex_ret_date_pattern)], #

            config.ASK_SEARCH_OTHER_AIRPORTS: [ #
                CallbackQueryHandler(handle_search_other_airports_decision, pattern=f"^{config.CALLBACK_YES_OTHER_AIRPORTS}$|^{config.CALLBACK_NO_OTHER_AIRPORTS}$") #
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_handler),
            CallbackQueryHandler(lambda u, c: u.callback_query.answer("–≠—Ç–æ—Ç –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ—à—ë–ª –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True), pattern="^ignore_past_month$"),
            CallbackQueryHandler(lambda u, c: u.callback_query.answer("–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True), pattern="^ignore_past_day$"),
            CallbackQueryHandler(lambda u, c: u.callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True), pattern="^no_valid_months_error$"),
            CallbackQueryHandler(lambda u, c: u.callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True), pattern="^no_valid_dates_error$"),
        ],
        map_to_parent={},
        # per_message=False, # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ –≤–∞—à–µ–≥–æ ConversationHandler
        # per_user=True, # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True, –º–æ–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å
        # per_chat=True, # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
        # allow_reentry=False # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –¥–∏–∞–ª–æ–≥
    )
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ ConversationHandler
    conv_handler.error_handler = error_handler_conv
    return conv_handler