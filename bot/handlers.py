# bot/handlers.py
import logging
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
from datetime import datetime
from collections import defaultdict #NEW

from . import config, keyboards, helpers, flight_api

logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
async def ask_departure_country(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å—Ç—Ä–∞–Ω, –µ—Å–ª–∏ update.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(message_text, reply_markup=keyboards.get_country_reply_keyboard())
    # –ï—Å–ª–∏ —ç—Ç–æ callback_query, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç callback_query
    elif hasattr(update, 'callback_query') and update.callback_query and update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=keyboards.get_country_reply_keyboard())
    else:
        logger.warning("ask_departure_country: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")


async def ask_departure_city(update: Update, context: ContextTypes.DEFAULT_TYPE, country_name: str):
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:", reply_markup=keyboards.get_city_reply_keyboard(country_name))
    elif hasattr(update, 'callback_query') and update.callback_query and update.effective_chat:
         await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:", reply_markup=keyboards.get_city_reply_keyboard(country_name))

async def ask_arrival_country(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(message_text, reply_markup=keyboards.get_country_reply_keyboard())
    elif hasattr(update, 'callback_query') and update.callback_query and update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=keyboards.get_country_reply_keyboard())


async def ask_arrival_city(update: Update, context: ContextTypes.DEFAULT_TYPE, country_name: str):
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞:", reply_markup=keyboards.get_city_reply_keyboard(country_name))
    elif hasattr(update, 'callback_query') and update.callback_query and update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞:", reply_markup=keyboards.get_city_reply_keyboard(country_name))


async def ask_year(message_or_update: Update | object, context: ContextTypes.DEFAULT_TYPE, message_text: str, callback_prefix: str = ""):
    target_message_object = None
    if hasattr(message_or_update, 'callback_query') and message_or_update.callback_query:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
        await message_or_update.callback_query.edit_message_text(
            text=message_text,
            reply_markup=keyboards.generate_year_buttons(callback_prefix)
        )
        return
    elif hasattr(message_or_update, 'message') and message_or_update.message:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ)
        target_message_object = message_or_update.message
    elif hasattr(message_or_update, 'reply_text'): # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Update –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        target_message_object = message_or_update
    
    if target_message_object and hasattr(target_message_object, 'reply_text'):
        await target_message_object.reply_text(
            message_text,
            reply_markup=keyboards.generate_year_buttons(callback_prefix)
        )
    # NEW: –ï—Å–ª–∏ —ç—Ç–æ callback, –Ω–æ –Ω–µ—Ç message –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ ReplyKeyboard), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    elif hasattr(message_or_update, 'effective_chat') and message_or_update.effective_chat:
         await context.bot.send_message(
            chat_id=message_or_update.effective_chat.id,
            text=message_text,
            reply_markup=keyboards.generate_year_buttons(callback_prefix)
        )
    else:
        logger.warning("ask_year: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")


async def ask_month(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str, callback_prefix: str = ""):
    await update.callback_query.edit_message_text(
        text=message_text,
        reply_markup=keyboards.generate_month_buttons(callback_prefix)
    )

async def ask_date_range(update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, message_text: str, callback_prefix: str = ""):
    await update.callback_query.edit_message_text(
        text=message_text,
        reply_markup=keyboards.generate_date_range_buttons(year, month, callback_prefix)
    )

async def ask_specific_date(update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int, range_start: int, range_end: int, message_text: str, callback_prefix: str = ""):
    await update.callback_query.edit_message_text(
        text=message_text,
        reply_markup=keyboards.generate_specific_date_buttons(year, month, range_start, range_end, callback_prefix)
    )

# MODIFIED: –õ–æ–≥–∏–∫–∞ process_and_send_flights –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è —Ä–µ–π—Å–æ–≤ –ø–æ –¥–∞—Ç–∞–º
async def process_and_send_flights(update: Update, context: ContextTypes.DEFAULT_TYPE, flights_by_date: dict):
    chat_id = update.effective_chat.id
    context.user_data.pop('remaining_flights_to_show', None) # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å

    if not flights_by_date:
        await context.bot.send_message(chat_id=chat_id, text=config.MSG_NO_FLIGHTS_FOUND)
        # NEW: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
        dep_country = context.user_data.get('departure_country')
        dep_airport_iata = context.user_data.get('departure_airport_iata')
        if dep_country and dep_airport_iata and config.COUNTRIES_DATA.get(dep_country) and \
           len(config.COUNTRIES_DATA[dep_country]) > 1: # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –≤ —Å—Ç—Ä–∞–Ω–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–•–æ—Ç–∏—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤—ã–ª–µ—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –≤ —Å—Ç—Ä–∞–Ω–µ {dep_country} –ø–æ —ç—Ç–æ–º—É –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ –¥–∞—Ç–∞–º?",
                reply_markup=keyboards.get_search_other_airports_keyboard(dep_country)
            )
            return config.ASK_SEARCH_OTHER_AIRPORTS # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ / –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.get_yes_no_keyboard(
                yes_callback="prompt_new_search_type", no_callback="end_search_session",
                yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
            )
        )
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –Ω–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤

    else:
        await context.bot.send_message(chat_id=chat_id, text=config.MSG_FLIGHTS_FOUND_SEE_BELOW)
        
        total_flights_shown_count = 0
        flights_message_parts = []

        sorted_dates = sorted(flights_by_date.keys())

        for flight_date_str in sorted_dates:
            flights_on_this_date = flights_by_date[flight_date_str]
            if not flights_on_this_date:
                continue

            date_obj = datetime.strptime(flight_date_str, "%Y-%m-%d")
            formatted_date_header = f"\n--- üìÖ *{date_obj.strftime('%d %B %Y (%A)')}* ---\n"
            flights_message_parts.append(formatted_date_header)
            
            for i, flight in enumerate(flights_on_this_date):
                if i < config.FLIGHTS_CHUNK_SIZE: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –Ω–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞
                    formatted_flight = helpers.format_flight_details(flight)
                    flights_message_parts.append(formatted_flight)
                    total_flights_shown_count += 1
                else:
                    flights_message_parts.append(f"...–∏ –µ—â–µ {len(flights_on_this_date) - i} —Ä–µ–π—Å(–æ–≤) –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
                    break # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
            
            if not flights_message_parts[-1].endswith("—Ä–µ–π—Å(–æ–≤) –Ω–∞ —ç—Ç—É –¥–∞—Ç—É."): # –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ "...–∏ –µ—â–µ"
                 flights_message_parts.append("\n")


        if flights_message_parts:
            full_message = "".join(flights_message_parts)
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            max_length = 4096
            for i in range(0, len(full_message), max_length):
                await context.bot.send_message(chat_id=chat_id, text=full_message[i:i+max_length], parse_mode='Markdown')

        if total_flights_shown_count == 0 and any(flights_by_date.values()):
             await context.bot.send_message(chat_id=chat_id, text="–ù–∞–π–¥–µ–Ω—ã —Ä–µ–π—Å—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")

    # –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ / –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=keyboards.get_yes_no_keyboard(
            yes_callback="prompt_new_search_type",
            no_callback="end_search_session",
            yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫",
            no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
        )
    )
    context.user_data.clear() # –û—á–∏—â–∞–µ–º user_data –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    return ConversationHandler.END


# MODIFIED: show_all_remaining_flights_callback is now less relevant with grouped dates,
# this function can be removed or adapted if complex pagination per date is re-introduced.
# For now, it's not used by the modified process_and_send_flights.
async def show_all_remaining_flights_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # ... (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞)
    await query.edit_message_text(text="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ–π—Å–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.")


async def prompt_new_search_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.message: 
      await query.edit_message_text( 
          text=config.MSG_WELCOME,
          reply_markup=keyboards.get_main_menu_keyboard()
      )
    else: 
      await context.bot.send_message(
          chat_id=update.effective_chat.id,
          text=config.MSG_WELCOME,
          reply_markup=keyboards.get_main_menu_keyboard()
      )
    # NEW: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ConversationHandler, –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –µ–≥–æ fallbacks –∏–ª–∏ entry_points
    # –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π callback, —Ç–æ ConversationHandler.END –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞, —Ç–∞–∫ —á—Ç–æ END –Ω–µ –Ω—É–∂–µ–Ω.


async def end_search_session_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.message:
      await query.edit_message_text(text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –º–µ–Ω—è –Ω–∞–π—Ç–∏! /start")
    else:
      await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –º–µ–Ω—è –Ω–∞–π—Ç–∏! /start")
    context.user_data.clear()


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        await update.message.reply_text(config.MSG_WELCOME, reply_markup=keyboards.get_main_menu_keyboard())
    elif update.callback_query: 
        await update.callback_query.answer()
        if update.callback_query.message:
            await update.callback_query.edit_message_text(config.MSG_WELCOME, reply_markup=keyboards.get_main_menu_keyboard())
        elif update.effective_chat:
             await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_WELCOME, reply_markup=keyboards.get_main_menu_keyboard())


async def start_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data.clear() 

    if query.data == "start_standard_search":
        if query.message: await query.edit_message_text(text="–í—ã–±—Ä–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫.")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_FLIGHT_TYPE_PROMPT, reply_markup=keyboards.get_flight_type_reply_keyboard())
        return config.SELECTING_FLIGHT_TYPE
    elif query.data == "start_flex_search":
        if query.message: await query.edit_message_text(text="–í—ã–±—Ä–∞–Ω –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫.")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_FLIGHT_TYPE_PROMPT, reply_markup=keyboards.get_flight_type_reply_keyboard())
        return config.SELECTING_FLEX_FLIGHT_TYPE
    return ConversationHandler.END

# NEW: Callback handler for "–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ" button
async def start_flex_anywhere_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    
    context.user_data['arrival_airport_iata'] = None  # –ü—Ä–∏–ª—ë—Ç –∫—É–¥–∞ —É–≥–æ–¥–Ω–æ
    context.user_data['departure_date'] = None       # –î–∞—Ç—ã –Ω–µ –≤–∞–∂–Ω—ã
    context.user_data['return_date'] = None          # –ò –æ–±—Ä–∞—Ç–Ω—ã–µ –¥–∞—Ç—ã —Ç–æ–∂–µ
    # –§–ª–∞–≥–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–æ–≤ –≤ flex –¥–∏–∞–ª–æ–≥–µ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    # context.user_data['skip_arrival_selection'] = True
    # context.user_data['skip_date_selection'] = True
    
    if query.message:
        await query.edit_message_text(text="–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ \"–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ\".")
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫, –Ω–æ —Å —É–∂–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=config.MSG_FLIGHT_TYPE_PROMPT,
        reply_markup=keyboards.get_flight_type_reply_keyboard()
    )
    return config.SELECTING_FLEX_FLIGHT_TYPE


# --- –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ü–û–ò–°–ö ---
async def standard_flight_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    if user_input not in ['1', '2']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.", reply_markup=keyboards.get_flight_type_reply_keyboard())
        return config.SELECTING_FLIGHT_TYPE
    context.user_data['flight_type_one_way'] = (user_input == '1')
    await ask_departure_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:")
    return config.SELECTING_DEPARTURE_COUNTRY

async def standard_departure_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    country = update.message.text
    if country not in config.COUNTRIES_DATA:
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_departure_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:") 
        return config.SELECTING_DEPARTURE_COUNTRY
    context.user_data['departure_country'] = country
    await ask_departure_city(update, context, country)
    return config.SELECTING_DEPARTURE_CITY

async def standard_departure_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    country = context.user_data.get('departure_country')
    iata_code = helpers.get_airport_iata(country, city)
    if not iata_code:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_departure_city(update, context, country) 
        return config.SELECTING_DEPARTURE_CITY
        
    context.user_data['departure_airport_iata'] = iata_code
    context.user_data['departure_city_name'] = city
    await ask_year(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_year_")
    return config.SELECTING_DEPARTURE_YEAR

async def standard_departure_year_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_year = int(query.data.replace(config.CALLBACK_PREFIX_STANDARD + "dep_year_", ""))
    context.user_data['departure_year'] = selected_year
    await ask_month(update, context, f"–ì–æ–¥ –≤—ã–ª–µ—Ç–∞: {selected_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_month_")
    return config.SELECTING_DEPARTURE_MONTH

async def standard_departure_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_month = int(query.data.replace(config.CALLBACK_PREFIX_STANDARD + "dep_month_", ""))
    context.user_data['departure_month'] = selected_month
    year = context.user_data['departure_year']
    month_name = config.RUSSIAN_MONTHS.get(selected_month, "")
    context.user_data['departure_month_name'] = month_name 
    await ask_date_range(update, context, year, selected_month, f"–í—ã–±—Ä–∞–Ω: {month_name} {year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_range_")
    return config.SELECTING_DEPARTURE_DATE_RANGE

async def standard_departure_date_range_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_range_str = query.data.replace(config.CALLBACK_PREFIX_STANDARD + "dep_range_", "")
    try:
        start_day, end_day = map(int, selected_range_str.split('-'))
        context.user_data['departure_date_range_str'] = selected_range_str 
    except ValueError:
        await query.edit_message_text(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        year = context.user_data['departure_year']
        month = context.user_data['departure_month']
        month_name = config.RUSSIAN_MONTHS.get(month, "")
        await ask_date_range(update, context, year, month, f"–í—ã–±—Ä–∞–Ω: {month_name} {year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_range_")
        return config.SELECTING_DEPARTURE_DATE_RANGE
    
    year = context.user_data['departure_year']
    month = context.user_data['departure_month']
    await ask_specific_date(update, context, year, month, start_day, end_day, f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_date_")
    return config.SELECTING_DEPARTURE_DATE

async def standard_departure_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_date_str = query.data.replace(config.CALLBACK_PREFIX_STANDARD + "dep_date_", "") 
    
    date_obj = helpers.validate_date_format(selected_date_str)
    current_date_midnight = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

    if not date_obj or date_obj < current_date_midnight :
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # ... (–∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã)
        year = context.user_data['departure_year']
        month = context.user_data['departure_month']
        selected_range_str = context.user_data.get('departure_date_range_str', "1-10") 
        try:
            start_day, end_day = map(int, selected_range_str.split('-'))
        except ValueError: 
            start_day, end_day = 1, 10 
        await ask_specific_date(update, context, year, month, start_day, end_day, f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "dep_date_")
        return config.SELECTING_DEPARTURE_DATE

    context.user_data['departure_date'] = selected_date_str
    formatted_date = date_obj.strftime('%d-%m-%Y')
    await query.edit_message_text(text=f"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ask_arrival_country, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
    return config.SELECTING_ARRIVAL_COUNTRY

# MODIFIED: standard_arrival_country - —Ñ–∏–∫—Å –±–∞–≥–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≥–æ—Ä–æ–¥–æ–º
async def standard_arrival_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    country = update.message.text
    if country not in config.COUNTRIES_DATA:
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:") 
        return config.SELECTING_ARRIVAL_COUNTRY
    
    # NEW: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π –∞—ç—Ä–æ–ø–æ—Ä—Ç
    departure_airport_iata = context.user_data.get('departure_airport_iata')
    if departure_airport_iata and country in config.COUNTRIES_DATA and len(config.COUNTRIES_DATA[country]) == 1:
        single_city_name = list(config.COUNTRIES_DATA[country].keys())[0]
        single_airport_iata = helpers.get_airport_iata(country, single_city_name)
        if single_airport_iata == departure_airport_iata:
            await update.message.reply_text(
                f"–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤ —Å—Ç—Ä–∞–Ω–µ \"{country}\" ({single_city_name}) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –≤—ã–ª–µ—Ç–∞. "
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞."
            )
            await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
            return config.SELECTING_ARRIVAL_COUNTRY

    context.user_data['arrival_country'] = country
    await ask_arrival_city(update, context, country)
    return config.SELECTING_ARRIVAL_CITY

async def standard_arrival_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è) ...
    city = update.message.text
    country = context.user_data.get('arrival_country')
    iata_code = helpers.get_airport_iata(country, city)

    if not iata_code:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_arrival_city(update, context, country)
        return config.SELECTING_ARRIVAL_CITY
    
    if iata_code == context.user_data.get('departure_airport_iata'):
        await update.message.reply_text("–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –≤—ã–ª–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        await ask_arrival_city(update, context, country)
        return config.SELECTING_ARRIVAL_CITY

    context.user_data['arrival_airport_iata'] = iata_code
    context.user_data['arrival_city_name'] = city
    
    if context.user_data.get('flight_type_one_way', True):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã
        await update.message.reply_text(config.MSG_MAX_PRICE_PROMPT, reply_markup=ReplyKeyboardRemove())
        return config.SELECTING_MAX_PRICE
    else:
        await ask_year(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_year_")
        return config.SELECTING_RETURN_YEAR


async def standard_return_year_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_year = int(query.data.replace(config.CALLBACK_PREFIX_STANDARD + "ret_year_", ""))
    context.user_data['return_year'] = selected_year
    await ask_month(update, context, f"–ì–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {selected_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_month_")
    return config.SELECTING_RETURN_MONTH

async def standard_return_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_month = int(query.data.replace(config.CALLBACK_PREFIX_STANDARD + "ret_month_", ""))
    context.user_data['return_month'] = selected_month
    year = context.user_data['return_year']
    month_name = config.RUSSIAN_MONTHS.get(selected_month, "")
    context.user_data['return_month_name'] = month_name 
    await ask_date_range(update, context, year, selected_month, f"–í—ã–±—Ä–∞–Ω: {month_name} {year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_range_")
    return config.SELECTING_RETURN_DATE_RANGE

async def standard_return_date_range_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_range_str = query.data.replace(config.CALLBACK_PREFIX_STANDARD + "ret_range_", "")
    try:
        start_day, end_day = map(int, selected_range_str.split('-'))
        context.user_data['return_date_range_str'] = selected_range_str
    except ValueError: 
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –∑–∞–Ω–æ–≤–æ.")
        # ... (–∫–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞)
        year = context.user_data['return_year']
        month_name = context.user_data.get('return_month_name', "") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –º–µ—Å—è—Ü–∞
        await ask_month(update, context, f"–ì–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_month_")
        return config.SELECTING_RETURN_MONTH


    year = context.user_data['return_year']
    month = context.user_data['return_month']
    await ask_specific_date(update, context, year, month, start_day, end_day, f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_date_")
    return config.SELECTING_RETURN_DATE

async def standard_return_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_date_str = query.data.replace(config.CALLBACK_PREFIX_STANDARD + "ret_date_", "") 

    departure_date_obj = helpers.validate_date_format(context.user_data['departure_date'])
    return_date_obj = helpers.validate_date_format(selected_date_str)

    if not return_date_obj or not departure_date_obj or return_date_obj < departure_date_obj:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –æ–Ω–∞ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # ... (–∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã)
        year = context.user_data['return_year']
        month = context.user_data['return_month']
        selected_range_str = context.user_data.get('return_date_range_str', "1-10")
        try:
            start_day, end_day = map(int, selected_range_str.split('-'))
        except ValueError:
            start_day, end_day = 1, 10
        await ask_specific_date(update, context, year, month, start_day, end_day, f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", callback_prefix=config.CALLBACK_PREFIX_STANDARD + "ret_date_")
        return config.SELECTING_RETURN_DATE
        
    context.user_data['return_date'] = selected_date_str
    formatted_date = return_date_obj.strftime('%d-%m-%Y')
    await query.edit_message_text(text=f"–î–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã, —Ç.–∫. –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
    await query.message.reply_text(config.MSG_MAX_PRICE_PROMPT, reply_markup=ReplyKeyboardRemove())
    return config.SELECTING_MAX_PRICE

async def standard_max_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    price = helpers.validate_price(update.message.text)
    if price is None:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 50:")
        return config.SELECTING_MAX_PRICE
    
    context.user_data['max_price'] = price
    await update.message.reply_text(config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove()) # MODIFIED: Remove keyboard
    
    # MODIFIED: find_flights_with_fallback —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    flights_by_date = await flight_api.find_flights_with_fallback(
        departure_airport_iata=context.user_data['departure_airport_iata'],
        arrival_airport_iata=context.user_data['arrival_airport_iata'],
        departure_date_str=context.user_data['departure_date'],
        max_price=context.user_data['max_price'],
        return_date_str=context.user_data.get('return_date'),
        is_one_way=context.user_data.get('flight_type_one_way', True)
    )
    # MODIFIED: process_and_send_flights —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return await process_and_send_flights(update, context, flights_by_date)


# --- –ì–ò–ë–ö–ò–ô –ü–û–ò–°–ö ---
async def flex_flight_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_input = update.message.text
    if user_input not in ['1', '2']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.", reply_markup=keyboards.get_flight_type_reply_keyboard())
        return config.SELECTING_FLEX_FLIGHT_TYPE
    context.user_data['flight_type_one_way'] = (user_input == '1')
    await update.message.reply_text(config.MSG_MAX_PRICE_PROMPT, reply_markup=ReplyKeyboardRemove())
    return config.SELECTING_FLEX_MAX_PRICE

async def flex_max_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    price = helpers.validate_price(update.message.text)
    if price is None:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 50:")
        return config.SELECTING_FLEX_MAX_PRICE
    context.user_data['max_price'] = price
    
    await update.message.reply_text(
        "–£–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞?",
        reply_markup=keyboards.get_yes_no_keyboard(
            yes_callback=config.CALLBACK_PREFIX_FLEX + "ask_dep_yes",
            no_callback=config.CALLBACK_PREFIX_FLEX + "ask_dep_no"
        )
    )
    return config.ASK_FLEX_DEPARTURE_AIRPORT

async def flex_ask_departure_airport(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è, –µ—Å–ª–∏ skip_arrival_selection —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω) ...
    query = update.callback_query
    await query.answer()
    
    if query.data == config.CALLBACK_PREFIX_FLEX + "ask_dep_yes":
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞: –î–ê")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ask_departure_country, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ask_departure_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:")
        return config.SELECTING_FLEX_DEPARTURE_COUNTRY
    else: 
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞: –ù–ï–¢ (–Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –∏–ª–∏ –ø—Ä–∏–ª—ë—Ç).")
        context.user_data['departure_airport_iata'] = None 
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞, –Ω–æ —É –Ω–∞—Å "anywhere" –ø–æ–∏—Å–∫,
        # –º—ã –¥–æ–ª–∂–Ω—ã –µ–≥–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å, —Ç.–∫. –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.
        # –ò–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å "anywhere" —Ñ–ª–æ—É, —ç—Ç–æ—Ç —à–∞–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω, –µ—Å–ª–∏ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω.
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —Ç.–∫. `flex_ask_dates` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ç–æ.
        logger.info("–ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ (–ø–æ–∫–∞).")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ "anywhere" –ø–æ–∏—Å–∫, –≥–¥–µ arrival_airport_iata —É–∂–µ None
        if context.user_data.get('arrival_airport_iata') is None:
             # –ï—Å–ª–∏ arrival —É–∂–µ None (–∏–∑-–∑–∞ "anywhere"), —Ç–æ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –¥–∞—Ç—ã
            await query.message.reply_text( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                "–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
                reply_markup=keyboards.get_skip_dates_keyboard(
                    callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes"
                )
            )
            return config.ASK_FLEX_DATES

        await query.message.reply_text( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            "–£–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞?",
            reply_markup=keyboards.get_yes_no_keyboard(
                yes_callback=config.CALLBACK_PREFIX_FLEX + "ask_arr_yes",
                no_callback=config.CALLBACK_PREFIX_FLEX + "ask_arr_no"
            )
        )
        return config.ASK_FLEX_ARRIVAL_AIRPORT


async def flex_departure_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    country = update.message.text
    if country not in config.COUNTRIES_DATA:
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_departure_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:")
        return config.SELECTING_FLEX_DEPARTURE_COUNTRY
    context.user_data['departure_country'] = country
    await ask_departure_city(update, context, country)
    return config.SELECTING_FLEX_DEPARTURE_CITY

async def flex_departure_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    city = update.message.text
    country = context.user_data.get('departure_country')
    iata_code = helpers.get_airport_iata(country, city)
    if not iata_code:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_departure_city(update, context, country)
        return config.SELECTING_FLEX_DEPARTURE_CITY
        
    context.user_data['departure_airport_iata'] = iata_code
    context.user_data['departure_city_name'] = city
    
    # –ï—Å–ª–∏ arrival_airport_iata —É–∂–µ None (–∏–∑ "anywhere" –ø–æ—Ç–æ–∫–∞), —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–∞–º
    if context.user_data.get('arrival_airport_iata') is None:
        await update.message.reply_text( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            "–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
            reply_markup=keyboards.get_skip_dates_keyboard(
                callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes"
            )
        )
        return config.ASK_FLEX_DATES

    await update.message.reply_text( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        "–£–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞?",
        reply_markup=keyboards.get_yes_no_keyboard(
            yes_callback=config.CALLBACK_PREFIX_FLEX + "ask_arr_yes",
            no_callback=config.CALLBACK_PREFIX_FLEX + "ask_arr_no"
        )
    )
    return config.ASK_FLEX_ARRIVAL_AIRPORT


async def flex_ask_arrival_airport(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –ï—Å–ª–∏ arrival_airport_iata —É–∂–µ None (–∏–∑ "anywhere" –ø–æ—Ç–æ–∫–∞), —ç—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω
    # –∏–ª–∏ –µ–≥–æ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —ç—Ç–æ —É—á–∏—Ç—ã–≤–∞—Ç—å. –¢–µ–∫—É—â–∏–π –∫–æ–¥ callback'–∞ start_flex_anywhere_callback
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç arrival_airport_iata=None, –Ω–æ –ø–æ—Ç–æ–∫ –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç —Å—é–¥–∞ –ø–æ–ø–∞—Å—Ç—å.
    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É.
    if context.user_data.get('arrival_airport_iata') is None and context.user_data.get('departure_date') is None:
        # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ start_flex_anywhere, –≥–¥–µ arrival –∏ date —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ None.
        # –ü–µ—Ä–µ—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ä–∞–∑—É –∫ ASK_FLEX_DATES –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—É –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤—ã–ª–µ—Ç–∞).
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –º—ã –∑–¥–µ—Å—å –æ–∫–∞–∑–∞–ª–∏—Å—å —Å arrival_airport_iata=None, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ "anywhere"
        # –∏ –º—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–∞—Ç–∞–º.
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞: –õ—é–±–æ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
        await context.bot.send_message(chat_id=update.effective_chat.id,
            text="–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
            reply_markup=keyboards.get_skip_dates_keyboard(
                callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes"
            )
        )
        return config.ASK_FLEX_DATES

    if query.data == config.CALLBACK_PREFIX_FLEX + "ask_arr_yes":
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞: –î–ê")
        await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
        return config.SELECTING_FLEX_ARRIVAL_COUNTRY
    else: # ask_arr_no
        if query.message: await query.edit_message_text(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞: –ù–ï–¢ (–ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)")
        context.user_data['arrival_airport_iata'] = None 
        
        if context.user_data.get('departure_airport_iata') is None: # –ò –≤—ã–ª–µ—Ç —Ç–æ–∂–µ –Ω–µ —É–∫–∞–∑–∞–Ω
             if query.message:
                await query.message.reply_text("–û—à–∏–±–∫–∞: –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ '–≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'. –ù–∞—á–Ω–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
             else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞: –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ '–≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'. –ù–∞—á–Ω–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
             context.user_data.clear()
             return ConversationHandler.END

        await context.bot.send_message(chat_id=update.effective_chat.id,
            text="–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
            reply_markup=keyboards.get_skip_dates_keyboard(
                callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes"
            )
        )
        return config.ASK_FLEX_DATES

# MODIFIED: flex_arrival_country - —Ñ–∏–∫—Å –±–∞–≥–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≥–æ—Ä–æ–¥–æ–º
async def flex_arrival_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    country = update.message.text
    if country not in config.COUNTRIES_DATA:
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
        return config.SELECTING_FLEX_ARRIVAL_COUNTRY

    # NEW: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π –∞—ç—Ä–æ–ø–æ—Ä—Ç
    departure_airport_iata = context.user_data.get('departure_airport_iata')
    if departure_airport_iata and country in config.COUNTRIES_DATA and len(config.COUNTRIES_DATA[country]) == 1:
        single_city_name = list(config.COUNTRIES_DATA[country].keys())[0]
        single_airport_iata = helpers.get_airport_iata(country, single_city_name)
        if single_airport_iata == departure_airport_iata:
            await update.message.reply_text(
                f"–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤ —Å—Ç—Ä–∞–Ω–µ \"{country}\" ({single_city_name}) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –≤—ã–ª–µ—Ç–∞. "
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            await ask_arrival_country(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏–ª—ë—Ç–∞:")
            return config.SELECTING_FLEX_ARRIVAL_COUNTRY
            
    context.user_data['arrival_country'] = country
    await ask_arrival_city(update, context, country)
    return config.SELECTING_FLEX_ARRIVAL_CITY

async def flex_arrival_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è) ...
    city = update.message.text
    country = context.user_data.get('arrival_country')
    iata_code = helpers.get_airport_iata(country, city)
    if not iata_code:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await ask_arrival_city(update, context, country)
        return config.SELECTING_FLEX_ARRIVAL_CITY
    
    if context.user_data.get('departure_airport_iata') and iata_code == context.user_data['departure_airport_iata']:
        await update.message.reply_text("–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–ª—ë—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –≤—ã–ª–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        await ask_arrival_city(update, context, country)
        return config.SELECTING_FLEX_ARRIVAL_CITY

    context.user_data['arrival_airport_iata'] = iata_code
    context.user_data['arrival_city_name'] = city
    
    # –ï—Å–ª–∏ departure_date —É–∂–µ None (–∏–∑ "anywhere" –ø–æ—Ç–æ–∫–∞), —Ç–æ —Å—Ä–∞–∑—É –∏—â–µ–º
    if context.user_data.get('departure_date') is None:
        await update.message.reply_text(config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove())
        flights_by_date = await flight_api.find_flights_with_fallback(
            departure_airport_iata=context.user_data.get('departure_airport_iata'), 
            arrival_airport_iata=context.user_data.get('arrival_airport_iata'), 
            departure_date_str=None, 
            max_price=context.user_data['max_price'],
            return_date_str=None, 
            is_one_way=context.user_data.get('flight_type_one_way', True)
        )
        return await process_and_send_flights(update, context, flights_by_date)

    await update.message.reply_text( # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        "–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã?",
        reply_markup=keyboards.get_skip_dates_keyboard(
            callback_select_dates=config.CALLBACK_PREFIX_FLEX + "ask_dates_yes"
        )
    )
    return config.ASK_FLEX_DATES


async def flex_ask_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    departure_airport_is_set = context.user_data.get('departure_airport_iata') is not None

    if query.data == config.CALLBACK_PREFIX_FLEX + "ask_dates_yes":
        # –ï—Å–ª–∏ —ç—Ç–æ "anywhere" –ø–æ–∏—Å–∫ (departure_date —É–∂–µ None), —Ç–æ —ç—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞—Ç—å—Å—è
        # start_flex_anywhere_callback —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç departure_date=None
        # –≠—Ç–æ—Ç if –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã
        if query.message: await query.edit_message_text(text="–î–∞—Ç—ã: –î–ê, —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ.")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ask_year, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ask_year(query, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_year_")
        return config.SELECTING_FLEX_DEPARTURE_YEAR 
    
    elif query.data == config.CALLBACK_NO_SPECIFIC_DATES: 
        # –≠—Ç–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ò—Å–∫–∞—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç"
        if query.message: await query.edit_message_text(text="–î–∞—Ç—ã: –ù–ï–¢, –∏—Å–∫–∞—Ç—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥.")
        context.user_data['departure_date'] = None 
        context.user_data['return_date'] = None

        if not departure_airport_is_set:
            msg_text = ("–û—à–∏–±–∫–∞: –î–ª—è –ø–æ–∏—Å–∫–∞ –±–µ–∑ –¥–∞—Ç –∏–ª–∏ '–≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞. "
                        "–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
            if query.message: await query.edit_message_text(text=msg_text, reply_markup=None)
            else: await context.bot.send_message(chat_id=update.effective_chat.id, text=msg_text, reply_markup=ReplyKeyboardRemove())
            context.user_data.clear()
            return ConversationHandler.END
            
        await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove())
        flights_by_date = await flight_api.find_flights_with_fallback(
            departure_airport_iata=context.user_data.get('departure_airport_iata'), 
            arrival_airport_iata=context.user_data.get('arrival_airport_iata'), 
            departure_date_str=None, 
            max_price=context.user_data['max_price'],
            return_date_str=None, 
            is_one_way=context.user_data.get('flight_type_one_way', True)
        )
        return await process_and_send_flights(update, context, flights_by_date) 
    return config.ASK_FLEX_DATES # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ, –µ—Å–ª–∏ callback –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω


async def flex_departure_year_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_year = int(query.data.replace(config.CALLBACK_PREFIX_FLEX + "dep_year_", ""))
    context.user_data['departure_year'] = selected_year
    await ask_month(update, context, f"–ì–æ–¥ –≤—ã–ª–µ—Ç–∞: {selected_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_month_")
    return config.SELECTING_FLEX_DEPARTURE_MONTH

async def flex_departure_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_month = int(query.data.replace(config.CALLBACK_PREFIX_FLEX + "dep_month_", ""))
    context.user_data['departure_month'] = selected_month
    year = context.user_data['departure_year']
    month_name = config.RUSSIAN_MONTHS.get(selected_month, "")
    context.user_data['departure_month_name'] = month_name
    await ask_date_range(update, context, year, selected_month, f"–í—ã–±—Ä–∞–Ω: {month_name} {year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_range_")
    return config.SELECTING_FLEX_DEPARTURE_DATE_RANGE

async def flex_departure_date_range_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_range_str = query.data.replace(config.CALLBACK_PREFIX_FLEX + "dep_range_", "")
    try:
        start_day, end_day = map(int, selected_range_str.split('-'))
        context.user_data['departure_date_range_str'] = selected_range_str
    except ValueError:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –∑–∞–Ω–æ–≤–æ.")
        # ... (–∫–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞)
        year = context.user_data['departure_year']
        month_name = context.user_data.get('departure_month_name', "")
        await ask_month(update, context, f"–ì–æ–¥ –≤—ã–ª–µ—Ç–∞: {year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_month_")
        return config.SELECTING_FLEX_DEPARTURE_MONTH
        
    year = context.user_data['departure_year']
    month = context.user_data['departure_month']
    await ask_specific_date(update, context, year, month, start_day, end_day, f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_date_")
    return config.SELECTING_FLEX_DEPARTURE_DATE

async def flex_departure_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –Ω–æ –¥–∞–ª–µ–µ –≤—ã–∑–æ–≤ API) ...
    query = update.callback_query
    await query.answer()
    selected_date_str = query.data.replace(config.CALLBACK_PREFIX_FLEX + "dep_date_", "")
    date_obj = helpers.validate_date_format(selected_date_str)
    current_date_midnight = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

    if not date_obj or date_obj < current_date_midnight:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # ... (–∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        year = context.user_data['departure_year']
        month = context.user_data['departure_month']
        selected_range_str = context.user_data.get('departure_date_range_str', "1-10")
        try:
            start_day, end_day = map(int, selected_range_str.split('-'))
        except ValueError:
            start_day, end_day = 1,10
        await ask_specific_date(update, context, year, month, start_day, end_day, f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "dep_date_")
        return config.SELECTING_FLEX_DEPARTURE_DATE


    context.user_data['departure_date'] = selected_date_str
    formatted_date = date_obj.strftime('%d-%m-%Y')
    
    if context.user_data.get('flight_type_one_way', True):
        if query.message: await query.edit_message_text(text=f"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove())
        
        flights_by_date = await flight_api.find_flights_with_fallback(
            departure_airport_iata=context.user_data.get('departure_airport_iata'),
            arrival_airport_iata=context.user_data.get('arrival_airport_iata'),
            departure_date_str=context.user_data['departure_date'],
            max_price=context.user_data['max_price'],
            is_one_way=True
        )
        return await process_and_send_flights(update, context, flights_by_date)
    else:
        if query.message: await query.edit_message_text(text=f"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
        await ask_year(query, context, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_year_")
        return config.SELECTING_FLEX_RETURN_YEAR

async def flex_return_year_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_year = int(query.data.replace(config.CALLBACK_PREFIX_FLEX + "ret_year_", ""))
    context.user_data['return_year'] = selected_year
    await ask_month(update, context, f"–ì–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {selected_year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_month_")
    return config.SELECTING_FLEX_RETURN_MONTH

async def flex_return_month_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_month = int(query.data.replace(config.CALLBACK_PREFIX_FLEX + "ret_month_", ""))
    context.user_data['return_month'] = selected_month
    year = context.user_data['return_year']
    month_name = config.RUSSIAN_MONTHS.get(selected_month, "")
    context.user_data['return_month_name'] = month_name
    await ask_date_range(update, context, year, selected_month, f"–í—ã–±—Ä–∞–Ω: {month_name} {year}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_range_")
    return config.SELECTING_FLEX_RETURN_DATE_RANGE

async def flex_return_date_range_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    selected_range_str = query.data.replace(config.CALLBACK_PREFIX_FLEX + "ret_range_", "")
    try:
        start_day, end_day = map(int, selected_range_str.split('-'))
        context.user_data['return_date_range_str'] = selected_range_str
    except ValueError:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –∑–∞–Ω–æ–≤–æ.")
        # ... (–∫–æ–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞)
        year = context.user_data['return_year']
        month_name = context.user_data.get('return_month_name', "")
        await ask_month(update, context, f"–ì–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {year}. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_month_")
        return config.SELECTING_FLEX_RETURN_MONTH


    year = context.user_data['return_year']
    month = context.user_data['return_month']
    await ask_specific_date(update, context, year, month, start_day, end_day, f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_date_")
    return config.SELECTING_FLEX_RETURN_DATE

async def flex_return_date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –Ω–æ –¥–∞–ª–µ–µ –≤—ã–∑–æ–≤ API) ...
    query = update.callback_query
    await query.answer()
    selected_date_str = query.data.replace(config.CALLBACK_PREFIX_FLEX + "ret_date_", "")
    
    departure_date_obj = helpers.validate_date_format(context.user_data['departure_date'])
    return_date_obj = helpers.validate_date_format(selected_date_str)

    if not return_date_obj or not departure_date_obj or return_date_obj < departure_date_obj:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –æ–Ω–∞ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # ... (–∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        year = context.user_data['return_year']
        month = context.user_data['return_month']
        selected_range_str = context.user_data.get('return_date_range_str', "1-10")
        try:
            start_day, end_day = map(int, selected_range_str.split('-'))
        except ValueError:
            start_day, end_day = 1,10
        await ask_specific_date(update, context, year, month, start_day, end_day, f"–î–∏–∞–ø–∞–∑–æ–Ω: {selected_range_str}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", callback_prefix=config.CALLBACK_PREFIX_FLEX + "ret_date_")
        return config.SELECTING_FLEX_RETURN_DATE

    context.user_data['return_date'] = selected_date_str
    formatted_date = return_date_obj.strftime('%d-%m-%Y')
    if query.message: await query.edit_message_text(text=f"–î–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞: {formatted_date}")
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=config.MSG_SEARCHING_FLIGHTS, reply_markup=ReplyKeyboardRemove())
    flights_by_date = await flight_api.find_flights_with_fallback(
        departure_airport_iata=context.user_data.get('departure_airport_iata'),
        arrival_airport_iata=context.user_data.get('arrival_airport_iata'),
        departure_date_str=context.user_data['departure_date'],
        max_price=context.user_data['max_price'],
        return_date_str=context.user_data['return_date'],
        is_one_way=False
    )
    return await process_and_send_flights(update, context, flights_by_date)

# NEW: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
async def handle_search_other_airports_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == config.CALLBACK_YES_OTHER_AIRPORTS:
        departure_country = context.user_data.get('departure_country')
        original_departure_iata = context.user_data.get('departure_airport_iata')
        
        if not departure_country or not original_departure_iata:
            await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            return ConversationHandler.END # –ò–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

        await query.edit_message_text(text=f"–ò—â—É —Ä–µ–π—Å—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –≤ {departure_country}...")

        all_airports_in_country = config.COUNTRIES_DATA.get(departure_country, {})
        alternative_airports = {
            city: iata for city, iata in all_airports_in_country.items() if iata != original_departure_iata
        }

        if not alternative_airports:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í —Å—Ç—Ä–∞–Ω–µ {departure_country} –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ / –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=keyboards.get_yes_no_keyboard(
                    yes_callback="prompt_new_search_type", no_callback="end_search_session",
                    yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
                )
            )
            return ConversationHandler.END


        found_alternative_flights = False
        for city, iata_code in alternative_airports.items():
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü—Ä–æ–±—É—é –ø–æ–∏—Å–∫ –∏–∑ {city} ({iata_code})...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
            context.user_data['current_search_departure_airport_iata'] = iata_code
            
            flights_by_date_alt = await flight_api.find_flights_with_fallback(
                departure_airport_iata=iata_code, # –ù–æ–≤—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞
                arrival_airport_iata=context.user_data.get('arrival_airport_iata'), # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ user_data
                departure_date_str=context.user_data.get('departure_date'), # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –≥–∏–±–∫–æ–≥–æ
                max_price=context.user_data.get('max_price'),
                return_date_str=context.user_data.get('return_date'),
                is_one_way=context.user_data.get('flight_type_one_way', True)
            )
            if flights_by_date_alt:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ù–∞–π–¥–µ–Ω—ã —Ä–µ–π—Å—ã –∏–∑ {city}:")
                # process_and_send_flights —Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ–ø—Ü–∏–∏
                return await process_and_send_flights(update, context, flights_by_date_alt)
        
        # –ï—Å–ª–∏ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ç–∞–∫–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.get_yes_no_keyboard(
                yes_callback="prompt_new_search_type", no_callback="end_search_session",
                yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
            )
        )
        context.user_data.clear()
        return ConversationHandler.END

    elif query.data == config.CALLBACK_NO_OTHER_AIRPORTS:
        await query.edit_message_text(text="–ü–æ–Ω—è–ª. –ü–æ–∏—Å–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.")
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=keyboards.get_yes_no_keyboard(
                yes_callback="prompt_new_search_type", no_callback="end_search_session",
                yes_text="‚úÖ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫", no_text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å"
            )
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    return config.ASK_SEARCH_OTHER_AIRPORTS # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ callback –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω

# --- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    message_to_send = config.MSG_CANCELLED
    reply_markup_to_send = ReplyKeyboardRemove()
    chat_id_to_send = update.effective_chat.id

    if update.callback_query:
        await update.callback_query.answer()
        if update.callback_query.message:
            try:
                await update.callback_query.edit_message_text(text=message_to_send)
            except Exception:
                if chat_id_to_send:
                    await context.bot.send_message(chat_id=chat_id_to_send, text=message_to_send, reply_markup=reply_markup_to_send)
        elif chat_id_to_send:
            await context.bot.send_message(chat_id=chat_id_to_send, text=message_to_send, reply_markup=reply_markup_to_send)
    elif update.message and chat_id_to_send: 
        await update.message.reply_text(message_to_send, reply_markup=reply_markup_to_send)
    
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler_conv(update: Update | None, context: ContextTypes.DEFAULT_TYPE) -> int | None:
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    logger.error(f"–û—à–∏–±–∫–∞ –≤ ConversationHandler: {context.error}", exc_info=context.error)
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat_id_to_send_error = None
    if update and hasattr(update, 'effective_chat') and update.effective_chat:
        chat_id_to_send_error = update.effective_chat.id
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if chat_id_to_send_error:
        try:
            await context.bot.send_message(
                chat_id=chat_id_to_send_error,
                text=config.MSG_ERROR_OCCURRED + " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.",
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    if context.user_data: context.user_data.clear()
    return ConversationHandler.END


# --- –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler ---
def create_conversation_handler() -> ConversationHandler:
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è CallbackQueryHandlers
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    std_dep_year_pattern = f"^{config.CALLBACK_PREFIX_STANDARD}dep_year_"
    flex_dep_year_pattern = f"^{config.CALLBACK_PREFIX_FLEX}dep_year_"
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    flex_ret_date_pattern = f"^{config.CALLBACK_PREFIX_FLEX}ret_date_"


    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start_command),
            # –£–±—Ä–∞–Ω—ã /search –∏ /flexsearch, —Ç–∞–∫ –∫–∞–∫ /start —Ç–µ–ø–µ—Ä—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            CallbackQueryHandler(start_search_callback, pattern='^start_standard_search$|^start_flex_search$'),
            # NEW: Entry point for "–ö—É–¥–∞ —É–≥–æ–¥–Ω–æ"
            CallbackQueryHandler(start_flex_anywhere_callback, pattern='^start_flex_anywhere$')
        ],
        states={
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
            config.SELECTING_FLIGHT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_flight_type)],
            config.SELECTING_DEPARTURE_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_departure_country)],
            # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö) ...
            config.SELECTING_DEPARTURE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_departure_city)],
            config.SELECTING_DEPARTURE_YEAR: [CallbackQueryHandler(standard_departure_year_selected, pattern=std_dep_year_pattern)],
            config.SELECTING_DEPARTURE_MONTH: [CallbackQueryHandler(standard_departure_month_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}dep_month_")],
            config.SELECTING_DEPARTURE_DATE_RANGE: [CallbackQueryHandler(standard_departure_date_range_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}dep_range_")],
            config.SELECTING_DEPARTURE_DATE: [CallbackQueryHandler(standard_departure_date_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}dep_date_")],
            config.SELECTING_ARRIVAL_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_arrival_country)],
            config.SELECTING_ARRIVAL_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_arrival_city)],
            config.SELECTING_RETURN_YEAR: [CallbackQueryHandler(standard_return_year_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}ret_year_")],
            config.SELECTING_RETURN_MONTH: [CallbackQueryHandler(standard_return_month_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}ret_month_")],
            config.SELECTING_RETURN_DATE_RANGE: [CallbackQueryHandler(standard_return_date_range_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}ret_range_")],
            config.SELECTING_RETURN_DATE: [CallbackQueryHandler(standard_return_date_selected, pattern=f"^{config.CALLBACK_PREFIX_STANDARD}ret_date_")],
            config.SELECTING_MAX_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, standard_max_price)],
            
            # –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫
            config.SELECTING_FLEX_FLIGHT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_flight_type)],
            # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö) ...
            config.SELECTING_FLEX_MAX_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_max_price)],
            config.ASK_FLEX_DEPARTURE_AIRPORT: [CallbackQueryHandler(flex_ask_departure_airport, pattern=f"^{config.CALLBACK_PREFIX_FLEX}ask_dep_")],
            config.SELECTING_FLEX_DEPARTURE_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_departure_country)],
            config.SELECTING_FLEX_DEPARTURE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_departure_city)],
            config.ASK_FLEX_ARRIVAL_AIRPORT: [CallbackQueryHandler(flex_ask_arrival_airport, pattern=f"^{config.CALLBACK_PREFIX_FLEX}ask_arr_")],
            config.SELECTING_FLEX_ARRIVAL_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_arrival_country)],
            config.SELECTING_FLEX_ARRIVAL_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, flex_arrival_city)],
            config.ASK_FLEX_DATES: [CallbackQueryHandler(flex_ask_dates, pattern=f"^(?:{config.CALLBACK_PREFIX_FLEX}ask_dates_yes|{config.CALLBACK_NO_SPECIFIC_DATES})$")],
            config.SELECTING_FLEX_DEPARTURE_YEAR: [CallbackQueryHandler(flex_departure_year_selected, pattern=flex_dep_year_pattern)],
            config.SELECTING_FLEX_DEPARTURE_MONTH: [CallbackQueryHandler(flex_departure_month_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}dep_month_")],
            config.SELECTING_FLEX_DEPARTURE_DATE_RANGE: [CallbackQueryHandler(flex_departure_date_range_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}dep_range_")],
            config.SELECTING_FLEX_DEPARTURE_DATE: [CallbackQueryHandler(flex_departure_date_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}dep_date_")],
            config.SELECTING_FLEX_RETURN_YEAR: [CallbackQueryHandler(flex_return_year_selected, pattern=flex_ret_year_pattern)],
            config.SELECTING_FLEX_RETURN_MONTH: [CallbackQueryHandler(flex_return_month_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}ret_month_")],
            config.SELECTING_FLEX_RETURN_DATE_RANGE: [CallbackQueryHandler(flex_return_date_range_selected, pattern=f"^{config.CALLBACK_PREFIX_FLEX}ret_range_")],
            config.SELECTING_FLEX_RETURN_DATE: [CallbackQueryHandler(flex_return_date_selected, pattern=flex_ret_date_pattern)],
            
            # NEW: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
            config.ASK_SEARCH_OTHER_AIRPORTS: [
                CallbackQueryHandler(handle_search_other_airports_decision, pattern=f"^{config.CALLBACK_YES_OTHER_AIRPORTS}$|^{config.CALLBACK_NO_OTHER_AIRPORTS}$")
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_handler),
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è ConversationHandler, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # MessageHandler(filters.ALL, error_handler_conv) # –ü—Ä–∏–º–µ—Ä
            ],
        # error_handler=error_handler_conv, # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ error_handler_conv –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ ConvHandler
        map_to_parent={ # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ—Ç ConversationHandler –≤–ª–æ–∂–µ–Ω –≤ –¥—Ä—É–≥–æ–π
            # ConversationHandler.END: SOME_PARENT_STATE,
        }
    )
    return conv_handler