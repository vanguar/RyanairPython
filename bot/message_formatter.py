# bot/message_formatter.py
import logging
from datetime import datetime
from decimal import Decimal, InvalidOperation
from telegram.helpers import escape_markdown

logger = logging.getLogger(__name__)

def _get_escaped_attr(obj: any, attr_name: str, default: str = 'N/A') -> str:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ 
    –∏ –µ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è MarkdownV2, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞.
    """
    val = getattr(obj, attr_name, default)
    if val is default and default == 'N/A': # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —ç—Ç–æ 'N/A'
        return 'N/A' # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 'N/A'
    if isinstance(val, str):
        return escape_markdown(val, version=2)
    return escape_markdown(str(val), version=2) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–µ

def format_flight_details(flight: any) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úàÔ∏è‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'.
    –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ü–µ–Ω—ã, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ.
    """
    custom_separator = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úàÔ∏è‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ —Ä–µ–π—Å "—Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ", —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏–º–µ–µ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if hasattr(flight, 'outbound') and flight.outbound and hasattr(flight, 'inbound') and flight.inbound:
            outbound = flight.outbound
            inbound = flight.inbound

            out_departure_time_dt = getattr(outbound, 'departureTime', None)
            if isinstance(out_departure_time_dt, str):
                try: 
                    out_departure_time_dt = datetime.fromisoformat(out_departure_time_dt.replace("Z", "+00:00"))
                except ValueError: 
                    logger.warning(f"Could not parse outbound date string: {getattr(outbound, 'departureTime', 'N/A')}")
            out_departure_time_str = out_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(out_departure_time_dt, datetime) else str(getattr(outbound, 'departureTime', 'N/A'))

            in_departure_time_dt = getattr(inbound, 'departureTime', None)
            if isinstance(in_departure_time_dt, str):
                try: 
                    in_departure_time_dt = datetime.fromisoformat(in_departure_time_dt.replace("Z", "+00:00"))
                except ValueError: 
                    logger.warning(f"Could not parse inbound date string: {getattr(inbound, 'departureTime', 'N/A')}")
            in_departure_time_str = in_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(in_departure_time_dt, datetime) else str(getattr(inbound, 'departureTime', 'N/A'))

            out_flight_number_val = getattr(outbound, 'flightNumber', 'N/A')
            out_origin_full_val = getattr(outbound, 'originFull', 'N/A')
            out_destination_full_val = getattr(outbound, 'destinationFull', 'N/A')
            out_currency_val = getattr(outbound, 'currency', 'EUR') # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é EUR, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ

            out_price_attr = getattr(outbound, 'price', None)
            out_price_str = "N/A"
            out_price_val_decimal = None
            if out_price_attr is not None:
                try:
                    out_price_val_decimal = Decimal(str(out_price_attr)).quantize(Decimal('0.01'))
                    out_price_str = str(out_price_val_decimal)
                except InvalidOperation:
                    logger.warning(f"Invalid price format for outbound: {out_price_attr}")

            in_flight_number_val = getattr(inbound, 'flightNumber', 'N/A')
            in_origin_full_val = getattr(inbound, 'originFull', 'N/A')
            in_destination_full_val = getattr(inbound, 'destinationFull', 'N/A')
            # –í–∞–ª—é—Ç–∞ –¥–ª—è inbound –æ–±—ã—á–Ω–æ —Ç–∞ –∂–µ, —á—Ç–æ –∏ –¥–ª—è outbound
            
            in_price_attr = getattr(inbound, 'price', None)
            in_price_str = "N/A"
            in_price_val_decimal = None
            if in_price_attr is not None:
                try:
                    in_price_val_decimal = Decimal(str(in_price_attr)).quantize(Decimal('0.01'))
                    in_price_str = str(in_price_val_decimal)
                except InvalidOperation:
                    logger.warning(f"Invalid price format for inbound: {in_price_attr}")
            
            total_price_str = "N/A"
            if isinstance(out_price_val_decimal, Decimal) and isinstance(in_price_val_decimal, Decimal):
                total_price_val = (out_price_val_decimal + in_price_val_decimal).quantize(Decimal('0.01'))
                total_price_str = str(total_price_val)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º _get_escaped_attr –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã
            return (
                f"üîÑ –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ\n\n"
                f"‚û°Ô∏è –í—ã–ª–µ—Ç —Ç—É–¥–∞:\n"
                f"  ‚úàÔ∏è –†–µ–π—Å: {_get_escaped_attr(None, '', default=out_flight_number_val)}\n"
                f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {_get_escaped_attr(None, '', default=out_origin_full_val)} ‚Üí {_get_escaped_attr(None, '', default=out_destination_full_val)}\n"
                f"  üõ´ –í—ã–ª–µ—Ç: {escape_markdown(out_departure_time_str, version=2)}\n"
                f"  üí∂ –¶–µ–Ω–∞: {escape_markdown(out_price_str, version=2)} {_get_escaped_attr(None, '', default=out_currency_val)}\n\n"
                f"‚¨ÖÔ∏è –í—ã–ª–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ:\n"
                f"  ‚úàÔ∏è –†–µ–π—Å: {_get_escaped_attr(None, '', default=in_flight_number_val)}\n"
                f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {_get_escaped_attr(None, '', default=in_origin_full_val)} ‚Üí {_get_escaped_attr(None, '', default=in_destination_full_val)}\n"
                f"  üõ´ –í—ã–ª–µ—Ç: {escape_markdown(in_departure_time_str, version=2)}\n"
                f"  üí∂ –¶–µ–Ω–∞: {escape_markdown(in_price_str, version=2)} {_get_escaped_attr(None, '', default=out_currency_val)}\n\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª—é—Ç—É –æ—Ç outbound
                f"üíµ –û–±—â–∞—è —Ü–µ–Ω–∞: {escape_markdown(total_price_str, version=2)} {_get_escaped_attr(None, '', default=out_currency_val)}\n"
                f"{custom_separator}"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–π—Å "–≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É"
        elif hasattr(flight, 'price') and flight.price is not None:
            departure_time_dt = getattr(flight, 'departureTime', None)
            if isinstance(departure_time_dt, str):
                try:
                    departure_time_dt = datetime.fromisoformat(departure_time_dt.replace("Z", "+00:00"))
                except ValueError:
                    logger.warning(f"Could not parse date string: {getattr(flight, 'departureTime', 'N/A')}")
            
            departure_time_str = departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(departure_time_dt, datetime) else str(getattr(flight, 'departureTime', 'N/A'))
            
            flight_number_val = getattr(flight, 'flightNumber', 'N/A')
            origin_full_val = getattr(flight, 'originFull', 'N/A')
            destination_full_val = getattr(flight, 'destinationFull', 'N/A')
            
            price_attr = getattr(flight, 'price', None) # –£–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, —á—Ç–æ –Ω–µ None
            price_str = "N/A"
            if price_attr is not None: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è
                try:
                    price_val = Decimal(str(price_attr)).quantize(Decimal('0.01'))
                    price_str = str(price_val)
                except InvalidOperation:
                    logger.warning(f"Invalid price format for one-way: {price_attr}")

            currency_val = getattr(flight, 'currency', 'EUR')

            return (
                f"‚úàÔ∏è –†–µ–π—Å: {_get_escaped_attr(None, '', default=flight_number_val)}\n"
                f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {_get_escaped_attr(None, '', default=origin_full_val)} ‚Üí {_get_escaped_attr(None, '', default=destination_full_val)}\n"
                f"üõ´ –í—ã–ª–µ—Ç: {escape_markdown(departure_time_str, version=2)}\n" 
                f"üí∂ –¶–µ–Ω–∞: {escape_markdown(price_str, version=2)} {_get_escaped_attr(None, '', default=currency_val)}\n"
                f"{custom_separator}"
            )
        else: # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è (price/outbound): {flight}")
            # –í—ã–≤–æ–¥–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ flight –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            flight_attrs = {attr: getattr(flight, attr, 'N/A') for attr in dir(flight) if not callable(getattr(flight, attr)) and not attr.startswith("__")}
            logger.debug(f"–ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ flight, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –æ—à–∏–±–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {flight_attrs}")
            return escape_markdown("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞).", version=2) + "\n"

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–π—Å–∞: {e}. –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞: {flight}", exc_info=True)
        # –í—ã–≤–æ–¥–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ flight –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        flight_attrs = {attr: getattr(flight, attr, 'N/A') for attr in dir(flight) if not callable(getattr(flight, attr)) and not attr.startswith("__")}
        logger.debug(f"–ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ flight, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É: {flight_attrs}")
        return escape_markdown("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ.", version=2) + "\n"