# bot/message_formatter.py
import logging
from datetime import datetime
from decimal import Decimal, InvalidOperation
from bot import weather_api # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

logger = logging.getLogger(__name__)

def _get_simple_attr(obj: any, attr_name: str, default: str = 'N/A') -> str:
    val = getattr(obj, attr_name, default)
    return str(val)

async def format_flight_details(flight: any, 
                                departure_city_name: str | None = None, 
                                arrival_city_name: str | None = None) -> str:
    flight_info_parts = []
    custom_separator = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úàÔ∏è‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    weather_separator = "--------------------\n" # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –±–ª–æ–∫–∞ –ø–æ–≥–æ–¥—ã

    try:
        # –ë–ª–æ–∫ 1: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
        # (–≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –≤–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏,
        #  –∫–æ—Ç–æ—Ä–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞ —Ä–µ–π—Å—ã –±–µ–∑ –ø–æ–≥–æ–¥—ã. –Ø –Ω–µ –±—É–¥—É –µ–≥–æ –∑–¥–µ—Å—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å,
        #  —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞ –º–µ—Å—Ç–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.)
        # --- –ù–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ ---
        if hasattr(flight, 'price') and flight.price is not None:  # –†–µ–π—Å –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            departure_time_dt = getattr(flight, 'departureTime', None)
            if isinstance(departure_time_dt, str):
                try:
                    departure_time_dt = datetime.fromisoformat(departure_time_dt.replace("Z", "+00:00"))
                except ValueError:
                    logger.warning(f"Could not parse date string: {getattr(flight, 'departureTime', 'N/A')}")
            departure_time_str = departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(departure_time_dt, datetime) else str(getattr(flight, 'departureTime', 'N/A'))
            
            flight_number_val = _get_simple_attr(flight, 'flightNumber')
            origin_full_val = _get_simple_attr(flight, 'originFull')
            destination_full_val = _get_simple_attr(flight, 'destinationFull')
            
            price_attr = getattr(flight, 'price', None)
            price_str = "N/A"
            if price_attr is not None:
                try:
                    price_val_decimal = Decimal(str(price_attr)).quantize(Decimal('0.01'))
                    price_str = str(price_val_decimal)
                except InvalidOperation:
                    logger.warning(f"Invalid price format for one-way: {price_attr}")
            currency_val = _get_simple_attr(flight, 'currency', 'EUR')

            flight_info_parts.append(f"‚úàÔ∏è –†–µ–π—Å: {flight_number_val}\n")
            flight_info_parts.append(f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {origin_full_val} ‚Üí {destination_full_val}\n")
            flight_info_parts.append(f"üõ´ –í—ã–ª–µ—Ç: {departure_time_str}\n")
            flight_info_parts.append(f"üí∂ –¶–µ–Ω–∞: {price_str} {currency_val}\n")
        
        elif hasattr(flight, 'outbound') and flight.outbound and hasattr(flight, 'inbound') and flight.inbound:
            outbound = flight.outbound
            inbound = flight.inbound

            out_departure_time_dt = getattr(outbound, 'departureTime', None)
            if isinstance(out_departure_time_dt, str):
                try: out_departure_time_dt = datetime.fromisoformat(out_departure_time_dt.replace("Z", "+00:00"))
                except ValueError: logger.warning(f"Could not parse outbound date string: {getattr(outbound, 'departureTime', 'N/A')}")
            out_departure_time_str = out_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(out_departure_time_dt, datetime) else str(getattr(outbound, 'departureTime', 'N/A'))

            in_departure_time_dt = getattr(inbound, 'departureTime', None)
            if isinstance(in_departure_time_dt, str):
                try: in_departure_time_dt = datetime.fromisoformat(in_departure_time_dt.replace("Z", "+00:00"))
                except ValueError: logger.warning(f"Could not parse inbound date string: {getattr(inbound, 'departureTime', 'N/A')}")
            in_departure_time_str = in_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(in_departure_time_dt, datetime) else str(getattr(inbound, 'departureTime', 'N/A'))

            out_flight_number_val = _get_simple_attr(outbound, 'flightNumber')
            out_origin_full_val = _get_simple_attr(outbound, 'originFull') 
            out_destination_full_val = _get_simple_attr(outbound, 'destinationFull') 
            out_currency_val = _get_simple_attr(outbound, 'currency', 'EUR') 

            out_price_attr = getattr(outbound, 'price', None)
            out_price_str = "N/A"; out_price_val_decimal = None
            if out_price_attr is not None:
                try:
                    out_price_val_decimal = Decimal(str(out_price_attr)).quantize(Decimal('0.01'))
                    out_price_str = str(out_price_val_decimal)
                except InvalidOperation: logger.warning(f"Invalid price format for outbound: {out_price_attr}")

            in_flight_number_val = _get_simple_attr(inbound, 'flightNumber')
            in_origin_full_val = _get_simple_attr(inbound, 'originFull')
            in_destination_full_val = _get_simple_attr(inbound, 'destinationFull')
            
            in_price_attr = getattr(inbound, 'price', None)
            in_price_str = "N/A"; in_price_val_decimal = None
            if in_price_attr is not None:
                try:
                    in_price_val_decimal = Decimal(str(in_price_attr)).quantize(Decimal('0.01'))
                    in_price_str = str(in_price_val_decimal)
                except InvalidOperation: logger.warning(f"Invalid price format for inbound: {in_price_attr}")
            
            total_price_str = "N/A"
            if isinstance(out_price_val_decimal, Decimal) and isinstance(in_price_val_decimal, Decimal):
                total_price_val = (out_price_val_decimal + in_price_val_decimal).quantize(Decimal('0.01'))
                total_price_str = str(total_price_val)
            
            flight_info_parts.append(f"üîÑ –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ\n\n")
            flight_info_parts.append(f"‚û°Ô∏è –í—ã–ª–µ—Ç —Ç—É–¥–∞:\n")
            flight_info_parts.append(f"  ‚úàÔ∏è –†–µ–π—Å: {out_flight_number_val}\n")
            flight_info_parts.append(f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {out_origin_full_val} ‚Üí {out_destination_full_val}\n")
            flight_info_parts.append(f"  üõ´ –í—ã–ª–µ—Ç: {out_departure_time_str}\n")
            flight_info_parts.append(f"  üí∂ –¶–µ–Ω–∞: {out_price_str} {out_currency_val}\n\n")
            flight_info_parts.append(f"‚¨ÖÔ∏è –í—ã–ª–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ:\n")
            flight_info_parts.append(f"  ‚úàÔ∏è –†–µ–π—Å: {in_flight_number_val}\n")
            flight_info_parts.append(f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {in_origin_full_val} ‚Üí {in_destination_full_val}\n")
            flight_info_parts.append(f"  üõ´ –í—ã–ª–µ—Ç: {in_departure_time_str}\n")
            flight_info_parts.append(f"  üí∂ –¶–µ–Ω–∞: {in_price_str} {out_currency_val}\n\n")
            flight_info_parts.append(f"üíµ –û–±—â–∞—è —Ü–µ–Ω–∞: {total_price_str} {out_currency_val}\n")
        else: 
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å (–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å), –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {flight}")
            flight_info_parts.append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞).\n")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ –±—ã–ª–∞ –∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if flight_info_parts and flight_info_parts[-1] != "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞).\n":
            flight_info_parts.append(f"\n{custom_separator}")
        # --- –ö–æ–Ω–µ—Ü –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ ---

        # –ë–ª–æ–∫ 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
        weather_text_parts = []
        attempted_weather_fetch = False # –§–ª–∞–≥, —á—Ç–æ –º—ã –ø—ã—Ç–∞–ª–∏—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞

        if departure_city_name and departure_city_name != 'N/A':
            attempted_weather_fetch = True
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞: {departure_city_name}")
            dep_weather = await weather_api.get_weather_forecast(departure_city_name)
            if dep_weather:
                weather_text_parts.append(f"  –í –≥. {dep_weather['city']}: {dep_weather['temperature']}¬∞C {dep_weather['emoji']}")
            else:
                logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ {departure_city_name} –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞
        if arrival_city_name and arrival_city_name != 'N/A' and \
           (not departure_city_name or departure_city_name.lower() != arrival_city_name.lower()):
            attempted_weather_fetch = True
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞: {arrival_city_name}")
            arr_weather = await weather_api.get_weather_forecast(arrival_city_name)
            if arr_weather:
                weather_text_parts.append(f"  –í –≥. {arr_weather['city']}: {arr_weather['temperature']}¬∞C {arr_weather['emoji']}")
            else:
                 logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞ {arrival_city_name} –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
        elif arrival_city_name and arrival_city_name != 'N/A' and \
             departure_city_name and departure_city_name.lower() == arrival_city_name.lower() and weather_text_parts:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏ –ø–æ–≥–æ–¥–∞ –¥–ª—è –≤—ã–ª–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞, –Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
            attempted_weather_fetch = True


        if attempted_weather_fetch:
            flight_info_parts.append(f"{weather_separator}üå¨Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n")
            if weather_text_parts:
                flight_info_parts.append("\n".join(weather_text_parts) + "\n")
            else:
                flight_info_parts.append("  –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n")
        
        return "".join(flight_info_parts)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–π—Å–∞ (–≤–∫–ª. –ø–æ–≥–æ–¥—É): {e}. –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞: {flight}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ (–≤–∫–ª. –ø–æ–≥–æ–¥—É).\n"