# bot/message_formatter.py
import logging
from datetime import datetime
from decimal import Decimal, InvalidOperation
from bot import weather_api # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

logger = logging.getLogger(__name__)

def _get_simple_attr(obj: any, attr_name: str, default: str = 'N/A') -> str:
    val = getattr(obj, attr_name, default)
    return str(val)

async def format_flight_details(flight: any,
                                departure_city_name: str | None = None,
                                arrival_city_name: str | None = None) -> str:
    flight_info_parts = [] # –°–æ–±–∏—Ä–∞–µ–º –∑–¥–µ—Å—å —á–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
    weather_info_parts = [] # –û—Ç–¥–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    flight_custom_separator = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úàÔ∏è‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    weather_block_separator = "--------------------\n" # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –ø–æ–≥–æ–¥—ã

    logger.debug(f"–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ flight: {type(flight)}. –ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ (–ø–µ—Ä–µ–¥–∞–Ω): '{departure_city_name}', –ì–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞ (–ø–µ—Ä–µ–¥–∞–Ω): '{arrival_city_name}'")
    if flight is None:
        logger.error("format_flight_details –≤—ã–∑–≤–∞–Ω —Å flight=None")
        return "–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Å–∞.\n"

    try:
        # –ë–ª–æ–∫ 1: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ
        # (–≠—Ç–æ—Ç –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à–µ–π —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞)
        if hasattr(flight, 'price') and flight.price is not None:  # –†–µ–π—Å –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            logger.debug("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–∞ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É")
            departure_time_val = getattr(flight, 'departureTime', None)
            departure_time_str = str(departure_time_val)
            if isinstance(departure_time_val, str):
                try:
                    dt_obj = datetime.fromisoformat(departure_time_val.replace("Z", "+00:00"))
                    departure_time_str = dt_obj.strftime("%Y-%m-%d %H:%M")
                except ValueError:
                    logger.warning(f"Could not parse date string for one-way: {departure_time_val}")
            elif isinstance(departure_time_val, datetime):
                 departure_time_str = departure_time_val.strftime("%Y-%m-%d %H:%M")

            flight_number_val = _get_simple_attr(flight, 'flightNumber')
            origin_full_val = _get_simple_attr(flight, 'originFull')
            destination_full_val = _get_simple_attr(flight, 'destinationFull')
            price_attr = getattr(flight, 'price', None)
            price_str = "N/A"
            if price_attr is not None:
                try:
                    price_val_decimal = Decimal(str(price_attr)).quantize(Decimal('0.01'))
                    price_str = str(price_val_decimal)
                except (InvalidOperation, ValueError) as e_price:
                    logger.warning(f"Invalid price format for one-way: {price_attr}, error: {e_price}")
            currency_val = _get_simple_attr(flight, 'currency', 'EUR')

            flight_info_parts.append(f"‚úàÔ∏è –†–µ–π—Å: {flight_number_val}\n")
            flight_info_parts.append(f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {origin_full_val} ‚Üí {destination_full_val}\n")
            flight_info_parts.append(f"üõ´ –í—ã–ª–µ—Ç: {departure_time_str}\n")
            flight_info_parts.append(f"üí∂ –¶–µ–Ω–∞: {price_str} {currency_val}\n")

        elif hasattr(flight, 'outbound') and flight.outbound and hasattr(flight, 'inbound') and flight.inbound:
            logger.debug("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Å–∞ —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ")
            outbound = flight.outbound
            inbound = flight.inbound

            # Outbound
            out_departure_time_val = getattr(outbound, 'departureTime', None)
            out_departure_time_str = str(out_departure_time_val)
            if isinstance(out_departure_time_val, str):
                try:
                    dt_obj = datetime.fromisoformat(out_departure_time_val.replace("Z", "+00:00"))
                    out_departure_time_str = dt_obj.strftime("%Y-%m-%d %H:%M")
                except ValueError:
                    logger.warning(f"Could not parse outbound date string: {out_departure_time_val}")
            elif isinstance(out_departure_time_val, datetime):
                 out_departure_time_str = out_departure_time_val.strftime("%Y-%m-%d %H:%M")

            out_flight_number_val = _get_simple_attr(outbound, 'flightNumber')
            out_origin_full_val = _get_simple_attr(outbound, 'originFull')
            out_destination_full_val = _get_simple_attr(outbound, 'destinationFull')
            out_currency_val = _get_simple_attr(outbound, 'currency', 'EUR')
            out_price_attr = getattr(outbound, 'price', None)
            out_price_str = "N/A"; out_price_val_decimal = None
            if out_price_attr is not None:
                try:
                    out_price_val_decimal = Decimal(str(out_price_attr)).quantize(Decimal('0.01'))
                    out_price_str = str(out_price_val_decimal)
                except (InvalidOperation, ValueError) as e_price:
                    logger.warning(f"Invalid price format for outbound: {out_price_attr}, error: {e_price}")

            # Inbound
            in_departure_time_val = getattr(inbound, 'departureTime', None)
            in_departure_time_str = str(in_departure_time_val)
            if isinstance(in_departure_time_val, str):
                try:
                    dt_obj = datetime.fromisoformat(in_departure_time_val.replace("Z", "+00:00"))
                    in_departure_time_str = dt_obj.strftime("%Y-%m-%d %H:%M")
                except ValueError:
                    logger.warning(f"Could not parse inbound date string: {in_departure_time_val}")
            elif isinstance(in_departure_time_val, datetime):
                 in_departure_time_str = in_departure_time_val.strftime("%Y-%m-%d %H:%M")

            in_flight_number_val = _get_simple_attr(inbound, 'flightNumber')
            in_origin_full_val = _get_simple_attr(inbound, 'originFull')
            in_destination_full_val = _get_simple_attr(inbound, 'destinationFull')
            in_price_attr = getattr(inbound, 'price', None)
            in_price_str = "N/A"; in_price_val_decimal = None
            if in_price_attr is not None:
                try:
                    in_price_val_decimal = Decimal(str(in_price_attr)).quantize(Decimal('0.01'))
                    in_price_str = str(in_price_val_decimal)
                except (InvalidOperation, ValueError) as e_price:
                    logger.warning(f"Invalid price format for inbound: {in_price_attr}, error: {e_price}")

            total_price_str = "N/A"
            if isinstance(out_price_val_decimal, Decimal) and isinstance(in_price_val_decimal, Decimal):
                total_price_val = (out_price_val_decimal + in_price_val_decimal).quantize(Decimal('0.01'))
                total_price_str = str(total_price_val)

            flight_info_parts.append(f"üîÑ –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ\n\n")
            flight_info_parts.append(f"‚û°Ô∏è –í—ã–ª–µ—Ç —Ç—É–¥–∞:\n")
            flight_info_parts.append(f"  ‚úàÔ∏è –†–µ–π—Å: {out_flight_number_val}\n")
            flight_info_parts.append(f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {out_origin_full_val} ‚Üí {out_destination_full_val}\n")
            flight_info_parts.append(f"  üõ´ –í—ã–ª–µ—Ç: {out_departure_time_str}\n")
            flight_info_parts.append(f"  üí∂ –¶–µ–Ω–∞: {out_price_str} {out_currency_val}\n\n")
            flight_info_parts.append(f"‚¨ÖÔ∏è –í—ã–ª–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ:\n")
            flight_info_parts.append(f"  ‚úàÔ∏è –†–µ–π—Å: {in_flight_number_val}\n")
            flight_info_parts.append(f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {in_origin_full_val} ‚Üí {in_destination_full_val}\n")
            flight_info_parts.append(f"  üõ´ –í—ã–ª–µ—Ç: {in_departure_time_str}\n")
            flight_info_parts.append(f"  üí∂ –¶–µ–Ω–∞: {in_price_str} {out_currency_val}\n\n")
            flight_info_parts.append(f"üíµ –û–±—â–∞—è —Ü–µ–Ω–∞: {total_price_str} {out_currency_val}\n")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å (–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å), –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {flight}. "
                           f"has 'price': {hasattr(flight, 'price')}, "
                           f"has 'outbound': {hasattr(flight, 'outbound')}, outbound is: {getattr(flight, 'outbound', None)}, "
                           f"has 'inbound': {hasattr(flight, 'inbound')}, inbound is: {getattr(flight, 'inbound', None)}")
            flight_info_parts.append("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞).\n")

        # –ë–ª–æ–∫ 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ø–í–ù–û –ü–ï–†–ï–î–ê–ù–ù–´–ï departure_city_name –∏ arrival_city_name
        
        dep_city_for_weather_query = departure_city_name
        arr_city_for_weather_query = arrival_city_name
        
        attempted_dep_weather = False
        dep_weather_data_available = False
        attempted_arr_weather = False

        if dep_city_for_weather_query and dep_city_for_weather_query != 'N/A':
            attempted_dep_weather = True
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞: '{dep_city_for_weather_query}'")
            dep_weather = await weather_api.get_weather_forecast(dep_city_for_weather_query)
            if dep_weather:
                weather_info_parts.append(f"  –í –≥. {dep_weather['city']}: {dep_weather['temperature']}¬∞C {dep_weather['emoji']}")
                dep_weather_data_available = True
            else:
                logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ '{dep_city_for_weather_query}' –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
        
        if arr_city_for_weather_query and arr_city_for_weather_query != 'N/A':
            attempted_arr_weather = True
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞,
            # –ò–õ–ò –µ—Å–ª–∏ –ø–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞
            if (not dep_city_for_weather_query or 
                dep_city_for_weather_query.lower() != arr_city_for_weather_query.lower() or 
                not dep_weather_data_available):
                logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞: '{arr_city_for_weather_query}'")
                arr_weather = await weather_api.get_weather_forecast(arr_city_for_weather_query)
                if arr_weather:
                    weather_info_parts.append(f"  –í –≥. {arr_weather['city']}: {arr_weather['temperature']}¬∞C {arr_weather['emoji']}")
                else:
                    logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞ '{arr_city_for_weather_query}' –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
            elif dep_city_for_weather_query and dep_city_for_weather_query.lower() == arr_city_for_weather_query.lower() and dep_weather_data_available:
                 logger.debug(f"–ì–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞ '{arr_city_for_weather_query}' —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≥–æ—Ä–æ–¥–æ–º –≤—ã–ª–µ—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–≥–æ–¥–∞ —É–∂–µ –µ—Å—Ç—å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –ø–æ–≥–æ–¥—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π, –ï–°–õ–ò –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞
        if flight_info_parts and flight_info_parts[0] != "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞).\n":
            if attempted_dep_weather or attempted_arr_weather:
                flight_info_parts.append(f"\n{weather_block_separator}üå¨Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:\n") # \n –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –ø–æ–≥–æ–¥—ã
                if weather_info_parts:
                    flight_info_parts.append("\n".join(weather_info_parts) + "\n")
                else:
                    flight_info_parts.append("  –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ä–µ–π—Å–∞ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, –ü–û–°–õ–ï –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            flight_info_parts.append(custom_separator) 
        
        return "".join(flight_info_parts)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–π—Å–∞ (–≤–∫–ª. –ø–æ–≥–æ–¥—É): {e}. –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞: {type(flight)}", exc_info=True)
        try:
            flight_attrs = {attr: str(getattr(flight, attr, 'N/A')) for attr in dir(flight) if not callable(getattr(flight, attr)) and not attr.startswith("__")}
            logger.debug(f"–ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ flight (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞): {flight_attrs}")
        except Exception as e_attrs:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ flight –ø—Ä–∏ –æ—à–∏–±–∫–µ: {e_attrs}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ (–≤–∫–ª. –ø–æ–≥–æ–¥—É).\n"