# bot/message_formatter.py
import logging
from datetime import datetime
from decimal import Decimal, InvalidOperation
from telegram.helpers import escape_markdown

logger = logging.getLogger(__name__)

def format_flight_details(flight: any) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úàÔ∏è‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'.
    """
    # –í–∞—à –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    custom_separator = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úàÔ∏è‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    try:
        if hasattr(flight, 'price') and flight.price is not None:  # –†–µ–π—Å –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            departure_time_dt = flight.departureTime
            if isinstance(departure_time_dt, str):
                try:
                    departure_time_dt = datetime.fromisoformat(departure_time_dt.replace("Z", "+00:00"))
                except ValueError:
                    logger.warning(f"Could not parse date string: {flight.departureTime}")
            
            departure_time_str = departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(departure_time_dt, datetime) else str(flight.departureTime)
            
            flight_number = _get_escaped_attr(flight, 'flightNumber')
            origin_full = _get_escaped_attr(flight, 'originFull')
            destination_full = _get_escaped_attr(flight, 'destinationFull')
            
            try:
                price_val = Decimal(str(flight.price)).quantize(Decimal('0.01'))
                price_str = str(price_val)
            except InvalidOperation:
                price_str = "N/A"
            
            currency = _get_escaped_attr(flight, 'currency')

            return (
                f"‚úàÔ∏è –†–µ–π—Å: {flight_number}\n"
                f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {origin_full} ‚Üí {destination_full}\n"
                f"üõ´ –í—ã–ª–µ—Ç: {escape_markdown(departure_time_str, version=2)}\n" 
                f"üí∂ –¶–µ–Ω–∞: {escape_markdown(price_str, version=2)} {currency}\n"
                f"{custom_separator}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            )
            
        elif hasattr(flight, 'outbound') and flight.outbound and hasattr(flight.outbound, 'price') and \
             hasattr(flight, 'inbound') and flight.inbound and hasattr(flight.inbound, 'price'):  # –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ
            
            outbound = flight.outbound
            inbound = flight.inbound

            # ... (–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç –≤—ã–ª–µ—Ç–∞ outbound –∏ inbound –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º) ...
            out_departure_time_dt = outbound.departureTime
            if isinstance(out_departure_time_dt, str):
                try: 
                    out_departure_time_dt = datetime.fromisoformat(out_departure_time_dt.replace("Z", "+00:00"))
                except ValueError: 
                    logger.warning(f"Could not parse outbound date string: {outbound.departureTime}")
            out_departure_time_str = out_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(out_departure_time_dt, datetime) else str(outbound.departureTime)

            in_departure_time_dt = inbound.departureTime
            if isinstance(in_departure_time_dt, str):
                try: 
                    in_departure_time_dt = datetime.fromisoformat(in_departure_time_dt.replace("Z", "+00:00"))
                except ValueError: 
                    logger.warning(f"Could not parse inbound date string: {inbound.departureTime}")
            in_departure_time_str = in_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(in_departure_time_dt, datetime) else str(inbound.departureTime)


            out_flight_number = _get_escaped_attr(outbound, 'flightNumber')
            out_origin_full = _get_escaped_attr(outbound, 'originFull')
            out_destination_full = _get_escaped_attr(outbound, 'destinationFull')
            out_currency = _get_escaped_attr(outbound, 'currency')
            
            try:
                out_price_val = Decimal(str(outbound.price)).quantize(Decimal('0.01'))
                out_price_str = str(out_price_val)
            except InvalidOperation:
                out_price_str = "N/A"
                out_price_val = None

            in_flight_number = _get_escaped_attr(inbound, 'flightNumber')
            in_origin_full = _get_escaped_attr(inbound, 'originFull')
            in_destination_full = _get_escaped_attr(inbound, 'destinationFull')
            
            try:
                in_price_val = Decimal(str(inbound.price)).quantize(Decimal('0.01'))
                in_price_str = str(in_price_val)
            except InvalidOperation:
                in_price_str = "N/A"
                in_price_val = None
            
            total_price_str = "N/A"
            if isinstance(out_price_val, Decimal) and isinstance(in_price_val, Decimal):
                total_price_val = (out_price_val + in_price_val).quantize(Decimal('0.01'))
                total_price_str = str(total_price_val)

            return (
                f"üîÑ –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ\n\n"
                f"‚û°Ô∏è –í—ã–ª–µ—Ç —Ç—É–¥–∞:\n"
                f"  ‚úàÔ∏è –†–µ–π—Å: {out_flight_number}\n"
                f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {out_origin_full} ‚Üí {out_destination_full}\n"
                f"  üõ´ –í—ã–ª–µ—Ç: {escape_markdown(out_departure_time_str, version=2)}\n"
                f"  üí∂ –¶–µ–Ω–∞: {escape_markdown(out_price_str, version=2)} {out_currency}\n\n"
                f"‚¨ÖÔ∏è –í—ã–ª–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ:\n"
                f"  ‚úàÔ∏è –†–µ–π—Å: {in_flight_number}\n"
                f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {in_origin_full} ‚Üí {in_destination_full}\n"
                f"  üõ´ –í—ã–ª–µ—Ç: {escape_markdown(in_departure_time_str, version=2)}\n"
                f"  üí∂ –¶–µ–Ω–∞: {escape_markdown(in_price_str, version=2)} {out_currency}\n\n"
                f"üíµ –û–±—â–∞—è —Ü–µ–Ω–∞: {escape_markdown(total_price_str, version=2)} {out_currency}\n"
                f"{custom_separator}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            )
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {flight}")
            return escape_markdown("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ.", version=2) + "\n"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–π—Å–∞: {e}. –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞: {flight}", exc_info=True)
        return escape_markdown("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ.", version=2) + "\n"