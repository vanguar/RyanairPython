# bot/message_formatter.py
import logging
from datetime import datetime
from decimal import Decimal, InvalidOperation
# –£–±–∏—Ä–∞–µ–º from telegram.helpers import escape_markdown, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ

logger = logging.getLogger(__name__)

def _get_escaped_attr(obj: any, attr_name: str, default: str = 'N/A') -> str:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –æ–±—ä–µ–∫—Ç–∞.
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.
    """
    val = getattr(obj, attr_name, default)
    return str(val) # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ

def format_flight_details(flight: any) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —É–¥–∞–ª–µ–Ω–æ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úàÔ∏è‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'.
    """
    custom_separator = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚úàÔ∏è‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    try:
        if hasattr(flight, 'price') and flight.price is not None:  # –†–µ–π—Å –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            departure_time_dt = getattr(flight, 'departureTime', None)
            if isinstance(departure_time_dt, str):
                try:
                    departure_time_dt = datetime.fromisoformat(departure_time_dt.replace("Z", "+00:00"))
                except ValueError:
                    logger.warning(f"Could not parse date string: {getattr(flight, 'departureTime', 'N/A')}")
            
            departure_time_str = departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(departure_time_dt, datetime) else str(getattr(flight, 'departureTime', 'N/A'))
            
            flight_number_val = getattr(flight, 'flightNumber', 'N/A')
            origin_full_val = getattr(flight, 'originFull', 'N/A')
            destination_full_val = getattr(flight, 'destinationFull', 'N/A')
            
            price_attr = getattr(flight, 'price', None)
            price_str = "N/A"
            if price_attr is not None:
                try:
                    price_val = Decimal(str(price_attr)).quantize(Decimal('0.01'))
                    price_str = str(price_val)
                except InvalidOperation:
                    logger.warning(f"Invalid price format for one-way: {price_attr}")

            currency_val = getattr(flight, 'currency', 'EUR')

            return (
                f"‚úàÔ∏è –†–µ–π—Å: {flight_number_val}\n"
                f"üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {origin_full_val} ‚Üí {destination_full_val}\n"
                f"üõ´ –í—ã–ª–µ—Ç: {departure_time_str}\n" 
                f"üí∂ –¶–µ–Ω–∞: {price_str} {currency_val}\n"
                f"{custom_separator}"
            )
            
        elif hasattr(flight, 'outbound') and flight.outbound and hasattr(flight, 'inbound') and flight.inbound:
            outbound = flight.outbound
            inbound = flight.inbound

            out_departure_time_dt = getattr(outbound, 'departureTime', None)
            if isinstance(out_departure_time_dt, str):
                try: 
                    out_departure_time_dt = datetime.fromisoformat(out_departure_time_dt.replace("Z", "+00:00"))
                except ValueError: 
                    logger.warning(f"Could not parse outbound date string: {getattr(outbound, 'departureTime', 'N/A')}")
            out_departure_time_str = out_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(out_departure_time_dt, datetime) else str(getattr(outbound, 'departureTime', 'N/A'))

            in_departure_time_dt = getattr(inbound, 'departureTime', None)
            if isinstance(in_departure_time_dt, str):
                try: 
                    in_departure_time_dt = datetime.fromisoformat(in_departure_time_dt.replace("Z", "+00:00"))
                except ValueError: 
                    logger.warning(f"Could not parse inbound date string: {getattr(inbound, 'departureTime', 'N/A')}")
            in_departure_time_str = in_departure_time_dt.strftime("%Y-%m-%d %H:%M") if isinstance(in_departure_time_dt, datetime) else str(getattr(inbound, 'departureTime', 'N/A'))

            out_flight_number_val = getattr(outbound, 'flightNumber', 'N/A')
            out_origin_full_val = getattr(outbound, 'originFull', 'N/A')
            out_destination_full_val = getattr(outbound, 'destinationFull', 'N/A')
            out_currency_val = getattr(outbound, 'currency', 'EUR') 

            out_price_attr = getattr(outbound, 'price', None)
            out_price_str = "N/A"
            out_price_val_decimal = None
            if out_price_attr is not None:
                try:
                    out_price_val_decimal = Decimal(str(out_price_attr)).quantize(Decimal('0.01'))
                    out_price_str = str(out_price_val_decimal)
                except InvalidOperation:
                    logger.warning(f"Invalid price format for outbound: {out_price_attr}")

            in_flight_number_val = getattr(inbound, 'flightNumber', 'N/A')
            in_origin_full_val = getattr(inbound, 'originFull', 'N/A')
            in_destination_full_val = getattr(inbound, 'destinationFull', 'N/A')
            
            in_price_attr = getattr(inbound, 'price', None)
            in_price_str = "N/A"
            in_price_val_decimal = None
            if in_price_attr is not None:
                try:
                    in_price_val_decimal = Decimal(str(in_price_attr)).quantize(Decimal('0.01'))
                    in_price_str = str(in_price_val_decimal)
                except InvalidOperation:
                    logger.warning(f"Invalid price format for inbound: {in_price_attr}")
            
            total_price_str = "N/A"
            if isinstance(out_price_val_decimal, Decimal) and isinstance(in_price_val_decimal, Decimal):
                total_price_val = (out_price_val_decimal + in_price_val_decimal).quantize(Decimal('0.01'))
                total_price_str = str(total_price_val)
            
            return (
                f"üîÑ –†–µ–π—Å —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ\n\n"
                f"‚û°Ô∏è –í—ã–ª–µ—Ç —Ç—É–¥–∞:\n"
                f"  ‚úàÔ∏è –†–µ–π—Å: {out_flight_number_val}\n"
                f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {out_origin_full_val} ‚Üí {out_destination_full_val}\n"
                f"  üõ´ –í—ã–ª–µ—Ç: {out_departure_time_str}\n"
                f"  üí∂ –¶–µ–Ω–∞: {out_price_str} {out_currency_val}\n\n"
                f"‚¨ÖÔ∏è –í—ã–ª–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ:\n"
                f"  ‚úàÔ∏è –†–µ–π—Å: {in_flight_number_val}\n"
                f"  üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {in_origin_full_val} ‚Üí {in_destination_full_val}\n"
                f"  üõ´ –í—ã–ª–µ—Ç: {in_departure_time_str}\n"
                f"  üí∂ –¶–µ–Ω–∞: {in_price_str} {out_currency_val}\n\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª—é—Ç—É –æ—Ç outbound
                f"üíµ –û–±—â–∞—è —Ü–µ–Ω–∞: {total_price_str} {out_currency_val}\n"
                f"{custom_separator}"
            )
        else: 
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Å, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è (price/outbound): {flight}")
            flight_attrs = {attr: getattr(flight, attr, 'N/A') for attr in dir(flight) if not callable(getattr(flight, attr)) and not attr.startswith("__")}
            logger.debug(f"–ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ flight, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –æ—à–∏–±–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {flight_attrs}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞).\n" # –£–±—Ä–∞–ª escape_markdown

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–π—Å–∞: {e}. –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞: {flight}", exc_info=True)
        flight_attrs = {attr: getattr(flight, attr, 'N/A') for attr in dir(flight) if not callable(getattr(flight, attr)) and not attr.startswith("__")}
        logger.debug(f"–ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ flight, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É: {flight_attrs}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–µ.\n" # –£–±—Ä–∞–ª escape_markdown