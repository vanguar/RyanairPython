# bot/admin_handlers.py

import logging
import io  # <-- –î–û–ë–ê–í–õ–Ø–ï–ú –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò –í –ü–ê–ú–Ø–¢–ò
import asyncio  # <-- –î–û–ë–ê–í–õ–Ø–ï–ú –î–õ–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –°–ë–û–†–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò
from datetime import datetime  # <-- –î–û–ë–ê–í–õ–Ø–ï–ú –î–õ–Ø –î–ê–¢–´ –í –ò–ú–ï–ù–ò –§–ê–ô–õ–ê
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from . import config
from . import user_stats

logger = logging.getLogger(__name__)


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –ö–ù–û–ü–ö–£ –í –ö–õ–ê–í–ò–ê–¢–£–†–£ ---
def get_stats_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_day"),
            InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week"),
        ],
        [
            InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month"),
            InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="stats_total"),
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_refresh"),
            # –í–æ—Ç –æ–Ω–∞, –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞:
            InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="stats_download"),
        ]
    ])

# –§—É–Ω–∫—Ü–∏—è is_admin –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def is_admin(user_id: int) -> bool:
    admin_id_str = config.ADMIN_TELEGRAM_ID
    return admin_id_str and str(user_id) == admin_id_str

# –§—É–Ω–∫—Ü–∏—è stats_command –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        return

    await update.message.reply_text(
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_stats_keyboard(),
        parse_mode="Markdown"
    )


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –î–û–†–ê–ë–ê–¢–´–í–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ---
async def stats_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –≤–∫–ª—é—á–∞—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        return

    period = query.data.split('_')[1]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å"
    if period == "download":
        await query.message.reply_chat_action('upload_document') # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞"

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        day_count, week_count, month_count, total_count = await asyncio.gather(
            user_stats.count_new_users("day"),
            user_stats.count_new_users("week"),
            user_stats.count_new_users("month"),
            user_stats.count_new_users("total")
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–π–ª–∞
        report_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report_text = (
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –Ω–∞ {report_date}\n"
            f"-----------------------------------------\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {day_count}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {month_count}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        report_file = io.BytesIO(report_text.encode('utf-8'))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        filename = f"ryanair_bot_stats_{datetime.now().strftime('%Y-%m-%d')}.txt"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=report_file,
            filename=filename
        )
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
    elif period == "refresh":
        await query.edit_message_text(
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=get_stats_keyboard(),
            parse_mode="Markdown"
        )
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (—Å–µ–≥–æ–¥–Ω—è, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, –≤—Å–µ–≥–æ)
    else:
        count = await user_stats.count_new_users(period)
        period_rus_map = {
            'day': '—Å–µ–≥–æ–¥–Ω—è', 'week': '–Ω–µ–¥–µ–ª—é', 'month': '–º–µ—Å—è—Ü', 'total': '–≤—Å—ë –≤—Ä–µ–º—è'
        }
        period_rus = period_rus_map.get(period, '')
        message_text = f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {period_rus}: *{count}*"
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=get_stats_keyboard(),
            parse_mode="Markdown"
        )

# –§—É–Ω–∫—Ü–∏—è daily_report_job –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def daily_report_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
    admin_id = config.ADMIN_TELEGRAM_ID
    if not admin_id:
        logger.warning("–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: ADMIN_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    counts = {p: await user_stats.count_new_users(p) for p in ("day", "week", "month", "total")}
    
    text = (
        f"üìà *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*\n\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{counts['day']}*\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: *{counts['week']}*\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{counts['total']}*"
    )
    
    await context.bot.send_message(chat_id=admin_id, text=text, parse_mode="Markdown")