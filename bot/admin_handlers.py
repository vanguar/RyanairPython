# bot/admin_handlers.py

import logging
import io
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, error as telegram_error
from telegram.ext import ContextTypes
from telegram.error import BadRequest

from . import config
from . import user_stats

logger = logging.getLogger(__name__)


# --- –ö–õ–ê–í–ò–ê–¢–£–†–ê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_stats_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="stats_day"),
            InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week"),
        ],
        [
            InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month"),
            InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="stats_total"),
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_refresh"),
            InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="stats_download"),
        ]
    ])

# --- –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def is_admin(user_id: int) -> bool:
    admin_id_str = config.ADMIN_TELEGRAM_ID
    return admin_id_str and str(user_id) == admin_id_str

# --- –ö–û–ú–ê–ù–î–ê /stats (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        return

    await update.message.reply_text(
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_stats_keyboard(),
        parse_mode="Markdown"
    )


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–ò–ó–ú–ï–ù–Å–ù) ---
async def stats_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –≤–∫–ª—é—á–∞—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å username."""
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        if "Query is too old" in str(e):
            logger.warning(f"–ù–∞–∂–∞—Ç–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            return
        else:
            logger.error(f"–û—à–∏–±–∫–∞ BadRequest –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}", exc_info=True)
            return
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å query.answer() –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

    if not is_admin(query.from_user.id):
        return

    period = query.data.split('_')[1]

    if period == "download":
        await query.message.reply_chat_action('upload_document')
        
        # 1. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        day_count, week_count, month_count, total_count, all_users = await asyncio.gather(
            user_stats.count_new_users("day"),
            user_stats.count_new_users("week"),
            user_stats.count_new_users("month"),
            user_stats.count_new_users("total"),
            user_stats.get_all_users() # 2. –ò —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        )
        
        report_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞
        report_text = (
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –Ω–∞ {report_date}\n"
            f"-----------------------------------------\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {day_count}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {month_count}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}\n"
        )
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        report_text += "\n\n-----------------------------------------"
        report_text += "\nID –∏ username –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n-----------------------------------------\n"
        for uid, uname in all_users:
            report_text += f"{uid:>12}  ‚Äî  {uname or '-'}\n"
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        report_file = io.BytesIO(report_text.encode('utf-8'))
        filename = f"ryanair_bot_stats_{datetime.now().strftime('%Y-%m-%d')}.txt"
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=report_file,
            filename=filename
        )
        return

    try:
        if period == "refresh":
            await query.edit_message_text(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=get_stats_keyboard(),
                parse_mode="Markdown"
            )
        else:
            count = await user_stats.count_new_users(period)
            period_rus_map = {
                'day': '—Å–µ–≥–æ–¥–Ω—è', 'week': '–Ω–µ–¥–µ–ª—é', 'month': '–º–µ—Å—è—Ü', 'total': '–≤—Å—ë –≤—Ä–µ–º—è'
            }
            period_rus = period_rus_map.get(period, '')
            message_text = f"üë§ *–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {period_rus}:* {count}"
            
            await query.edit_message_text(
                text=message_text,
                reply_markup=get_stats_keyboard(),
                parse_mode="Markdown"
            )
            
    except telegram_error.BadRequest as e:
        if "Message is not modified" in str(e):
            pass # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É, —Ç.–∫. –æ–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        else:
            logger.error(f"–û—à–∏–±–∫–∞ BadRequest –≤ stats_callback_handler: {e}", exc_info=True)


# --- –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def daily_report_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
    admin_id = config.ADMIN_TELEGRAM_ID
    if not admin_id:
        logger.warning("–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: ADMIN_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    counts = {p: await user_stats.count_new_users(p) for p in ("day", "week", "month", "total")}
    
    text = (
        f"üìà *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*\n\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {counts['day']}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {counts['week']}\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {counts['total']}"
    )
    
    await context.bot.send_message(chat_id=admin_id, text=text, parse_mode="Markdown")